  # !toggle word-wrap

  #################################################
  #                                               #
  #                   SETTINGS                    #
  #                                               #
  #################################################

  settings:
    variables:
      entity_tablet: switch.galaxy_tab_a7_screensaver
      entity_browser_mod: media_player.browser_galaxy_tab
      translate_unknown: Unknown
      translate_idle: Idle
      translate_home: 'Yes'
      translate_not_home: 'No'
      translate_available: Available
      translate_no_updates: No Updates
      translate_update_available: Available
      translate_updates_available: Available


  #################################################
  #                                               #
  #                     BASE                      #
  #                                               #
  #################################################

  base:
    template:
      - settings
      - tilt
      - extra_styles
    variables:
      state_on: >
        [[[ return ['on', 'home', 'cool', 'fan_only', 'heat', 'heat_cool', 'InUse', 'Locked', 'playing', 'cleaning', 'open', 'opening', 'closing', 'unlocked', '0', 'healthy', '0 Issues', 'yes'].indexOf(entity === undefined || entity.state) !== -1; ]]]
      state_error: >
        [[[ return ['error', 'unavailable'].indexOf(entity === undefined || entity.state) !== -1; ]]]
      state: >
        [[[ return entity === undefined || entity.state; ]]]
      entity_id: >
        [[[ return entity === undefined || entity.entity_id; ]]]
      media_on: >
        [[[ return entity === undefined || ['playing', 'paused'].indexOf(entity.state) !== -1; ]]]
      media_off: >
        [[[ return entity === undefined || ['off', 'idle', 'standby', 'unknown', 'unavailable'].indexOf(entity.state) !== -1; ]]]
      entity_picture: >
        [[[ return entity === undefined || entity.attributes.entity_picture; ]]]
      timeout: >
        [[[ return entity === undefined || Date.now() - Date.parse(entity.last_changed); ]]]
    aspect_ratio: 1/1
    show_state: true
    show_icon: false
    state_display: >
      [[[ if (variables.state_error === true) return variables.translate_unknown; ]]]
    tap_action:
      action: toggle
      haptic: medium
    double_tap_action:
      haptic: success
    hold_action:
      action: block
      #haptic: success
    styles:
      grid:
        - grid-template-areas: |
            "icon  circle"
            "n     n"
            "s     s"
        - grid-template-columns: repeat(2, 1fr)
        - grid-template-rows: auto repeat(2, min-content)
        - gap: 1.3%
        - align-items: start
      name:
        - justify-self: start
        - line-height: 121%
      state:
        - justify-self: start
        - line-height: 115%
      card:
        - border-radius: var(--custom-button-card-border-radius)
        - border-width: 0
        - -webkit-tap-highlight-color: rgba(0,0,0,0)
        - transition: none
        - padding: 11.5% 10.5% 10.5% 11.5%
        - --mdc-ripple-color: >
            [[[
              return variables.state_on
                ? 'rgb(0, 0, 0)'
                : 'rgba(255, 255, 255, 0.3)';
            ]]]
        - color: >
            [[[
              return variables.state_on
                ? 'rgba(0, 0, 0, 0.6)'
                : 'rgba(255, 255, 255, 0.3)';
            ]]]
        - background-color: >
            [[[
              if (variables.state_error) {
                return variables.state_error
                  ? 'rgba(139, 51, 51, 0.9)'
                  : 'rgba(115, 115, 115, 0.2)';
              }
              else {
                return variables.state_on
                  ? 'rgba(255, 255, 255, 0.8)'
                  : 'rgba(115, 115, 115, 0.2)';
              }
            ]]]

  extra_styles:
    extra_styles: >
      [[[
        if (entity) {
          let hs = entity.attributes.hs_color === undefined,
            h = hs || entity.attributes.hs_color[0],
            s = hs || entity.attributes.hs_color[1],
            l_min = 28,
            l_max = 48,
            l_calc = entity.attributes.brightness / 2.54 * (l_max - l_min) / 100 + l_min;
          var light_color =
              entity.attributes.color_mode === 'color_temp' ||
              entity.attributes.color_mode === 'brightness' ||
              entity.attributes.color_mode === 'unknown'
                  ? `hsl(204, 58%, ${l_calc}%);`
                  : `hsl(${h}, ${s}%, ${l_calc}%);`;
        }

        return `
          svg {
            --light-color:
            ${ variables.state_on && entity.attributes.brightness !== undefined
                ? light_color
                : variables.state_on && entity.attributes.brightness === undefined
                  ? 'var(--state-icon-active-color);'
                  : 'var(--state-icon-color);'
            }
          }
          #container {
            text-align: left !important;
          }
          #name, #state {
            font-size: 1.1vw;
            letter-spacing: -0.02vw;
          }
          #state::first-letter {
            text-transform: uppercase;
          }
          /* portrait */
          @media screen and (max-width: 1200px) {
            #name, #state {
              font-size: 1.5vw;
            }
          }
          /* phone */
          @media screen and (max-width: 800px) {
            #name, #state {
              font-size: 3.3vw;
            }
          }

          ${this._config.template.includes('light') ? `

          /* * * * * * * * * * * * * * * * * *
            *                                 *
            *          CIRCLE SLIDER          *
            *                                 *
            * * * * * * * * * * * * * * * * * */

            #circle_slider {
              opacity: 0;
              appearance: none;
              transform: rotate(270deg);
              width: 90%;
              position: absolute;
              pointer-events: none;
              cursor: grab;
              left: 35%;
              margin-top: 13%;
            }

            #circle_slider::-webkit-slider-thumb {
              pointer-events: initial;
              appearance: none;
              width: 3vw;
              height: 3vw;
              border-radius: 50%;
              background: green;
            }

            #circle_slider::-webkit-slider-runnable-track {
              background: cornflowerblue;
            }

            #circle_slider::-moz-range-thumb {
              pointer-events: initial;
              appearance: none;
              width: 3vw;
              height: 3vw;
              border-radius: 50%;
              background: green;
            }

            #circle_slider::-moz-range-track {
              background: cornflowerblue;
              height: 3vw;
            }

            /* portrait */
            @media screen and (max-width: 1200px) {
              #circle_slider::-webkit-slider-thumb {
                width: 4vw;
                height: 4vw;
              }

              #circle_slider::-moz-range-thumb {
                width: 4vw;
                height: 4vw;
              }
            }

            /* phone */
            @media screen and (max-width: 800px) {
              #circle_slider::-webkit-slider-thumb {
                width: 7vw;
                height: 7vw;
              }

              #circle_slider::-moz-range-thumb {
                width: 7vw;
                height: 7vw;
              }
            }

          `:''}


          /* tilt */
          #ripple, .js-tilt-glare {
            clip-path: inset(0 round var(--custom-button-card-border-radius));
            overflow: hidden;
          }
          .js-tilt-glare {
            z-index: 1;
          }
          .js-tilt-glare-inner {
            background-color: rgba(0,0,0,0.9);
          }
          #container {
            transform: translateZ(${variables.tilt_options.parallax});
          }
          #card {
            transform-style: preserve-3d;
            overflow: visible;
          }

          ${this._config.template.includes('conditional_media') ? `
            :host {
              --blur-intensity: blur(4.5px) brightness(0.8);
            }
            /* phone */
            @media screen and (max-width: 800px) {
              :host {
                --blur-intensity: blur(2.5px) brightness(0.8);
              }
            }
            #ripple, .js-tilt-glare {
              clip-path: inset(0 round calc(var(--custom-button-card-border-radius) / 2));
            }
            #container {
              overflow: hidden;
            }
            .marquee {
              animation: marquee 20s linear infinite;
            }
            @keyframes marquee {
              from {
                transform: translateX(0%);
              }
              to {
                transform: translateX(-50%);
              }
            }
          `:''}

          ${this._config.template.includes('scene') ? `
            :host {
              --name-font-size: 1vw;
              --name-icon-size: 1.2vw;
              --name-padding-v: 0.4vw;
              --name-padding-h: 0.8vw;
              --card-border-radius: 0.6vw;
            }
            #ripple, .js-tilt-glare {
              border-radius: calc(var(--card-border-radius) - 0.1vw);
              clip-path: inset(0 round calc( var(--custom-button-card-border-radius) - 0.1vw ));
            }
            #name {
              font-size: var(--name-font-size);
              padding: var(--name-padding-v) var(--name-padding-h);
              letter-spacing: 0.012vw;
            }
            ha-icon {
              width: var(--name-icon-size);
              vertical-align: 7%;
              opacity: 0.4;
            }
            #card {
              border-radius: var(--card-border-radius);
              background: rgba(115, 115, 115, 0.04);
            }
            /* portrait */
            @media screen and (max-width: 1200px) {
              #name {
                font-size: calc(var(--name-font-size) * 1.4);
                padding: calc(var(--name-padding-v) * 1.4) calc(var(--name-padding-h) * 1.4);
              }
              ha-icon {
                width: calc(var(--name-icon-size) * 1.4);
              }
              #card {
                border-radius: calc(var(--card-border-radius) * 1.4);
                margin: 0 0.5vw;
              }
            }
            /* phone */
            @media screen and (max-width: 800px) {
              #name {
                font-size: calc(var(--name-font-size) * 2.7);
                padding: calc(var(--name-padding-v) * 2.7) calc(var(--name-padding-h) * 2.7);
                letter-spacing: 0.12vw;
              }
              ha-icon {
                width: calc(var(--name-icon-size) * 2.7);
              }
              #card {
                border-radius: calc(var(--card-border-radius) * 2.7);
                background: rgba(115, 115, 115, 0.08);
                margin: 0 0.5vw;
              }
            }
          `:''}

          ${this._config.template.includes('footer') ? `
            :host {
              --name-font-size: 1vw;
              --name-icon-size: 1.2vw;
              --notify-font-size: 0.9vw;
              --notify-box-size: 1.8vw;
              --name-padding-v: 0.4vw;
              --name-padding-h: 0.8vw;
              --card-border-radius: 0.6vw;
            }
            #ripple, .js-tilt-glare {
              border-radius: calc(var(--card-border-radius) - 0.1vw);
              clip-path: inset(0 round calc( var(--custom-button-card-border-radius) - 0.1vw ));
            }
            #name {
              font-size: var(--name-font-size);
              padding: var(--name-padding-v) var(--name-padding-h);
              letter-spacing: 0.012vw;
            }
            ha-icon {
              width: var(--name-icon-size);
              vertical-align: 7%;
              padding-right: 0.1vw;
              opacity: 0.4;
            }
            #card {
              border-radius: var(--card-border-radius);
              background: rgba(115, 115, 115, 0.04);
            }
            #notify {
              font-size: var(--notify-font-size);
              width: var(--notify-box-size);
              height: var(--notify-box-size);
              line-height: var(--notify-box-size);
              padding-right: 0.5px;
              padding-top: 0.5px;
            }
            /* portrait */
            @media screen and (max-width: 1200px) {
              #name {
                font-size: calc(var(--name-font-size) * 1.4);
                padding: calc(var(--name-padding-v) * 1.4) calc(var(--name-padding-h) * 1.4);
              }
              ha-icon {
                width: calc(var(--name-icon-size) * 1.4);
              }
              #card {
                border-radius: calc(var(--card-border-radius) * 1.4);
                margin: 0 0.5vw;
              }
              #notify {
                font-size: calc(var(--notify-font-size) * 1.4);
                width: calc(var(--notify-box-size) * 1.4);
                height: calc(var(--notify-box-size) * 1.4);
                line-height: calc(var(--notify-box-size) * 1.4);
              }
            }
            /* phone */
            @media screen and (max-width: 800px) {
              #name {
                font-size: calc(var(--name-font-size) * 2.7);
                padding: calc(var(--name-padding-v) * 2.7) calc(var(--name-padding-h) * 2.7);
                letter-spacing: 0.12vw;
              }
              ha-icon {
                width: calc(var(--name-icon-size) * 2.7);
              }
              #card {
                border-radius: calc(var(--card-border-radius) * 2.7);
                background: rgba(115, 115, 115, 0.08);
                margin: 0 0.5vw;
              }
              #notify {
                font-size: calc(var(--notify-font-size) * 2.7);
                width: calc(var(--notify-box-size) * 2);
                height: calc(var(--notify-box-size) * 2);
                line-height: calc(var(--notify-box-size) * 2);
                padding: 0;
              }
            }
          `:''}
        `
      ]]]


  #################################################
  #                                               #
  #                    SIDEBAR                    #
  #                                               #
  #################################################

  sidebar_template:
    show_state: false
    show_icon: false
    tap_action:
      action: none
    name: |
      [[[
        if (entity) {
          let attr = [];
          for (let [k, value] of Object.entries(entity.attributes))
            value != false && (attr += `<p>${value}</p>`);
          return attr;
        }
      ]]]
    #styles:
    #  state:
    #    - overflow: visible
    extra_styles: |
      #card {
        padding: 0;
        border-width: 0;
        font-family: Roboto, system-ui;
      }
      #container {
        display: flex !important;
      }
      #name {
        padding: 1.8vw 2.5vw 0 var(--custom-layout-card-padding);
        white-space: normal;
        text-align: left;
      }
      .time {
        font-size: var(--sidebar-time-font-size);
        font-weight: 300;
        line-height: var(--sidebar-time-line-height);
        letter-spacing: 0.11vw;
        margin-left: -0.3vw;
        color: rgba(255, 255, 255, 0.8);
      }
      @supports not (-moz-appearance:none) {
        .time-colon {
          position: relative;
          top: -.11em;
        }
      }
      p {
        font-size: min(max(16px, 1.13vw), 1.5vw);
        line-height: var(--sidebar-line-height);
        font-weight: 300;
        letter-spacing: 0.06vw;
        color: #6a7377;
      }
      p > b {
        color: rgba(255, 255, 255, 0.8);
      }
      /* portrait */
      @media screen and (max-width: 2000px) {
        .time {
          font-size: calc(var(--sidebar-time-font-size) * 1.2 );
          line-height: calc(var(--sidebar-time-line-height) * 1.4 );
        }
        p {
          font-size: calc(var(--sidebar-font-size) * 1.2 );
          line-height: calc(var(--sidebar-line-height) * 1.4 );
        }
      }
      /* phone */
      @media screen and (max-width: 800px) {
        .time {
          display: none;
          //font-size: calc(var(--sidebar-time-font-size) * 2.6 );
        }
        .date {
          display: none;
          //font-size: calc(var(--sidebar-time-font-size) * 2.6 );
        }
        .greet {
          font-size: 7vw;
        }
        p {
          //display: none;
          font-size: calc(var(--sidebar-font-size) * 2.6 );
          line-height: calc(var(--sidebar-line-height) * 2.6 );
          letter-spacing: 0.16vw;
        }
        #name {
          padding: 0 0 0 1vw;
        }
      }


  #################################################
  #                                               #
  #                     SCENE                     #
  #                                               #
  #################################################

  scene:
    template:
      - settings
      - tilt
      - extra_styles
    variables:
      tilt_options: >
        [[[ return { max: 5, scale: 1.1, glare: true, 'max-glare': 0.07, perspective: 1000, speed: 800, parallax: '10px' }; ]]]
    show_icon: false
    size: 2vw
    color: '#9da0a2'
    styles:
      card:
        - color: rgba(157,160,162, 0.55)
        - border: 0.12vw solid rgba(58, 69, 73, 0.2)
        - transition: none
        - padding: 0.37em 0.37em
        - margin-top: -0.2vw
        - overflow: visible
        - --mdc-ripple-color: rgba(0, 0, 0, 0.8)
    hold_action:
      action: none
    tap_action:
      haptic: medium


  #################################################
  #                                               #
  #                   FOOTER1                     #
  #                                               #
  #################################################

  footer:
    template:
      - settings
      - tilt
      - extra_styles
    variables:
      notify: >
        [[[
          return false;
        ]]]
      tilt_options: >
        [[[ return { max: 5, scale: 1.1, glare: true, 'max-glare': 0.07, perspective: 1000, speed: 800, parallax: '10px' }; ]]]
    show_icon: false
    size: 2vw
    color: '#9da0a2'
    custom_fields:
      notify: >
        [[[
          if (states['input_boolean.notify_visible'].state == 'on'){
            if (Number.isInteger(variables.notify)) {
              return variables.notify;
            } else if (variables.notify) {
              return `<span style="font-weight: 900;">!</span>`;
            }
          }
        ]]]
    styles:
      card:
        - color: rgba(157,160,162, 0.55)
        - width: fit-content
        - border: 0.12vw solid rgba(58, 69, 73, 0.2)
        - transition: none
        - padding: 0 0 0.05vw 0
        - margin-top: -0.7vw
        - overflow: visible
        - --mdc-ripple-color: rgba(0, 0, 0, 0.8)
      custom_fields:
        notify:
          - display: >
              [[[
                if (Number.isInteger(variables.notify)) {
                  return variables.notify > 0
                    ? 'initial'
                    : 'none';
                } else if (variables.notify) {
                  return variables.notify
                    ? 'initial'
                    : 'none';
                }
              ]]]
          - position: absolute
          - top: -0.9vw
          - right: -1vw
          - font-weight: 700
          - color: '#d6d6d6'
          - background: '#8b3333'
          - border-radius: 50%
          - text-align: center
          - text-overflow: unset
          - z-index: 1
    hold_action:
      action: none
    tap_action:
      haptic: medium


  #################################################
  #                                               #
  #                   FOOTER2                     #
  #                                               #
  #################################################

  rss:
    show_state: true
    show_name: false
    show_icon: false
    styles:
      state:
        - text-align: left
        - justify-self: left
        - white-space: normal
      card:
        - cursor: default
        - padding: 0.2em 0 0 0.6em
        - letter-spacing: var(--mdc-typography-body1-letter-spacing)
    #tap_action:
    #  href:
    extra_styles: |
      #card {
        border-width: 0;
      }
      #ripple {
        display: none;
      }
      ha-icon {
        width: 1.4em;
        vertical-align: 12%;
        opacity: 0.5;
        padding-right: 4px;
      }
      .title {
        font-size: 1.3em;
        font-weight: 500;
        color: #828383;
      }
      .subtitle {
        align-items: center;
        display: flex;
        justify-content: start;
        font-size: 1em;
        line-height: 0.75em;
        padding-left: 3px;
        padding-bottom: 15px;
        font-weight: 500;
        color: #828383;
      }
      a {
        color: var(--primary-color);
      }
      ul {
        margin-top: -0.6em;
        font-size: 0.88em;
        letter-spacing: 0.5px;
        line-height: 1.6em;
      }
      code {
        background-color: var(--secondary-background-color);
      }
      .badge {
        opacity: .8;
        height: .9em;
        margin-right: 0.6em;
      }
      .badge--new {
        content: url("/local/svg/new2.svg");
      }
      .badge--netflix {
        content: url("/local/svg/netflix.svg");
      }
      .badge--bluray {
        content: url("/local/svg/blu-ray.svg");
      }
      .badge--webdl {
        content: url("/local/svg/webdl.svg");
      }
      .badge--hd {
        content: url("/local/svg/hd.svg");
      }
      .badge--4k {
        content: url("/local/svg/4k.svg");
      }
      .badge--hdr {
        content: url("/local/svg/hdr.svg");
      }
      .badge--dv {
        content: url("/local/svg/dv_v2.svg");
      }
      .badge--dolby-atmos {
        content: url("/local/svg/atmos_v2.svg");
      }
      .badge--dv-atmos {
        content: url("/local/svg/dv_atmos.svg");
      }
      .badge--dolby-d {
        content: url("/local/svg/dd2.svg");
      }
      .badge--dolby-dp {
        content: url("/local/svg/ddp2.svg");
      }
      .badge--dts {
        content: url("/local/svg/dts.svg");
      }
      .badge--dtshd {
        content: url("/local/svg/dtshd.svg");
      }
      .badge--dtsx {
        content: url("/local/svg/dtsx.svg");
      }
      .badge--imdb {
        content: url("/local/svg/imdb.svg");
      }
      .badge--tmdb {
        content: url("/local/svg/tmdb.svg");
      }
      .badge--soon {
        content: url("/local/svg/soon2.svg");
      }
      #rss_container {
        align-items: center;
        display: flex;
        justify-content: start;
      }
      span {
        color: #2f3436;
      }
      .ellipsis {
        color: #6a7377;
      }
      /* phone */
      @media screen and (max-width: 800px) {
        #state {
          display: none;
        }
      }


  rss_footer:
    template:
      - rss
    show_state: true
    show_name: false
    show_icon: false
    state_display: >
      [[[
        if ( states[variables.tv_show].state !== 'unavailable' && states[variables.tv_show].state !== '' && states[variables.tv_show].state !== '0' && states[variables.tv_show_downloaded].state !== 'Yes' ) {
          var entity = states[variables.tv_show].attributes,
            tv_show = entity.name,
            season_episode = entity.season_episode,
            resolution = entity.resolution,
            hdr = entity.hdr,
            source = entity.source,
            audio = entity.audio,
            channels = entity.audio_channels;

          var season_split = '';
          if ( season_episode.includes('E') ) { season_split = season_episode.split('E').join(' · E') } else { season_split = season_episode };

          var source_icon = '';
          if (source == 'Blu-Ray') { source_icon = 'badge badge--bluray'};
          if (source == 'Netflix') { source_icon = 'badge badge--netflix'};
          if (source == 'Netflix WEB-DL') { source_icon = 'badge badge--netflix'};
          if (source == 'Netflix WEBRip') { source_icon = 'badge badge--netflix'};

          var resolution_icon = '';
          if (resolution == '2160p') { resolution_icon = 'badge badge--4k'} else { resolution_icon = 'badge badge--hd'};

          var hdr_icon = '';
          if (hdr == 'HDR') { hdr_icon = 'badge badge--hdr'};
          if (hdr == 'DV') { hdr_icon = 'badge badge--dv'};
          if (hdr == 'DV HDR' || hdr == 'HDR DV') { hdr_icon = 'badge badge--hdr'};
          if (hdr == 'DV' && audio == 'Atmos') { hdr_icon = 'badge badge--dv-atmos'};
          if (hdr == 'DV' && audio == 'Atmos' || hdr == 'DV' && audio == 'TrueHD Atmos' || hdr == 'DV' && audio == 'DDP Atmos') { hdr_icon = 'badge badge--dv-atmos'};

          var hdr_icon2 = '';
          if (hdr == 'DV HDR' || hdr == 'HDR DV' && hdr_icon != 'badge badge--dv-atmos') { hdr_icon2 = 'badge badge--dv'};

          var audio_icon = '';
          if (audio == 'DD') { audio_icon = 'badge badge--dolby-d'};
          if (audio == 'DTS') { audio_icon = 'badge badge--dts'};
          if (audio == 'DTS-HD') { audio_icon = 'badge badge--dtshd'};
          if (audio == 'DTS-X') { audio_icon = 'badge badge--dtsx'};
          if (audio == 'DDP') { audio_icon = 'badge badge--dolby-dp'};
          if (audio == 'DDP Atmos' && hdr_icon != 'badge badge--dv-atmos') { audio_icon = 'badge badge--dolby-atmos'};
          if (audio == 'Atmos') { audio_icon = 'badge badge--dolby-atmos'};
          if (audio == 'TrueHD') { audio_icon = 'badge badge--truehd'};
          if (audio == 'TrueHD Atmos') { audio_icon = 'badge badge--truehd'};
          if (audio == 'FLAC') { audio_icon = 'badge badge--flac'};

          var audio_icon2 = '';
          if (audio == 'TrueHD Atmos' && hdr_icon != 'badge badge--dv-atmos') { audio_icon2 = 'badge badge--dolby-atmos'};

          return `
            <div id="rss_container">
              <span class="badge badge--new" role="img"></span>
              <div>
                <span style="padding-left:0.75em;"></span>
                <b>${tv_show}</b> - <b>${season_split}</b>
                <span style="padding-left:1.5em;"></span>
              </div>
              <span class="${source_icon}" role="img"></span>
              <span class="${resolution_icon}" role="img"></span>
              <span class="${hdr_icon}" role="img"></span>
              <span class="${hdr_icon2}" role="img"></span>
              <span class="${audio_icon}" role="img"></span>
              <span class="${audio_icon2}" role="img"></span>
            </div>
          `;
        } else if (entity.state !== 'unavailable' && entity.state !== 'unknown' && entity.state !== '' && entity.state !== '0' && states[variables.movie_downloaded].state !== 'Yes' ) {
          let movie = entity.attributes.name,
            year = entity.attributes.year,
            resolution = entity.attributes.resolution,
            hdr = entity.attributes.hdr,
            source = entity.attributes.source,
            audio = entity.attributes.audio,
            channels = entity.attributes.audio_channels;

          var source_icon = '';
          if (source == 'Blu-Ray') { source_icon = 'badge badge--bluray'};
          if (source == 'WEB-DL') { source_icon = 'badge badge--webdl'};
          if (source == 'Netflix') { source_icon = 'badge badge--netflix'};
          if (source == 'Netflix WEB-DL') { source_icon = 'badge badge--netflix'};
          if (source == 'Netflix WEBRip') { source_icon = 'badge badge--netflix'};

          var resolution_icon = '';
          if (resolution == '2160p') { resolution_icon = 'badge badge--4k'} else { resolution_icon = 'badge badge--hd'};

          var hdr_icon = '';
          if (hdr == 'HDR') { hdr_icon = 'badge badge--hdr'};
          if (hdr == 'DV') { hdr_icon = 'badge badge--dv'};
          if (hdr == 'DV HDR' || hdr == 'HDR DV') { hdr_icon = 'badge badge--hdr'};
          if (hdr == 'DV' && audio == 'Atmos') { hdr_icon = 'badge badge--dv-atmos'};
          if (hdr == 'DV' && audio == 'Atmos' || audio == 'TrueHD Atmos') { hdr_icon = 'badge badge--dv-atmos'};

          var hdr_icon2 = '';
          if (hdr == 'DV HDR' || hdr == 'HDR DV' && hdr_icon != 'badge badge--dv-atmos') { hdr_icon2 = 'badge badge--dv'};

          var audio_icon = '';
          if (audio == 'DD') { audio_icon = 'badge badge--dolby-d'};
          if (audio == 'DTS') { audio_icon = 'badge badge--dts'};
          if (audio == 'DTS-HD') { audio_icon = 'badge badge--dtshd'};
          if (audio == 'DTS-X') { audio_icon = 'badge badge--dtsx'};
          if (audio == 'DDP') { audio_icon = 'badge badge--dolby-dp'};
          if (audio == 'DDP Atmos') { audio_icon = 'badge badge--dolby-dp'};
          if (audio == 'Atmos' && hdr_icon != 'badge badge--dv-atmos') { audio_icon = 'badge badge--dolby-atmos'};
          if (audio == 'TrueHD') { audio_icon = 'badge badge--truehd'};
          if (audio == 'TrueHD Atmos') { audio_icon = 'badge badge--truehd'};
          if (audio == 'FLAC') { audio_icon = 'badge badge--flac'};

          var audio_icon2 = '';
          if (audio == 'TrueHD Atmos' && hdr_icon != 'badge badge--dv-atmos') { audio_icon2 = 'badge badge--dolby-atmos'};
          if (audio == 'DDP Atmos') { audio_icon2 = 'badge badge--dolby-atmos'};

          return `
            <div id="rss_container">
              <span class="badge badge--new" role="img"></span>
              <div>
                <span style="padding-left:0.75em;"></span>
                <b>${movie}</b> <b><font color='#393e40'>(${year})</font></b>
                <span style="padding-left:1.5em;"></span>
              </div>
              <span class="${source_icon}" role="img"></span>
              <span class="${resolution_icon}" role="img"></span>
              <span class="${hdr_icon}" role="img"></span>
              <span class="${hdr_icon2}" role="img"></span>
              <span class="${audio_icon}" role="img"></span>
              <span class="${audio_icon2}" role="img"></span>
            </div>
          `;

        } else if (states[variables.radarr].state !== 'unavailable' && states[variables.radarr].state !== '' && states[variables.movie_downloaded].state !== 'Yes' ) {
          var entity = states[variables.radarr].attributes,
            movie = entity.titles[0],
            year = entity.year,
            release = entity.release,
            rating = entity.rating,
            spacer = '<span style="padding-left:68px;"></span>';

          var tmdb_icon = '';
          if (rating != '') { tmdb_icon = '<span class="badge badge--tmdb" role="img"></span><b>' + rating + '</b><span style="padding-left:1.5em;"></span>' };

          let time = release == '1' ? 'day' : 'days';

          return `
            <div id="rss_container">
              <span class="badge badge--soon" role="img"></span>
              <div>
                <span style="padding-left:1em;"></span>
                <b>${movie}</b> <b><font color='#393e40'>(${year})</font></b>
                <span style="padding-left:1.5em;"></span>
              </div>
              ${tmdb_icon}
              <b><font color='#393e40'>Release in ${release} ${time}</font></b>
            </div>
          `;
        } else {
          return " ";
        }
      ]]]
    styles:
      state:
        - place-self: start
        - font-family: var(--primary-font-family)
        - font-weight: 400
        - font-size: 1.26vw
        - letter-spacing: 0.05vw
        - white-space: nowrap
        - opacity: 0.6
        - width: 100%
      card:
        - background: none
        - padding: 0
        - margin-top: -4vh
        - overflow: hidden


  rss_results_movie:
    template:
      - rss
      - settings
    state_display: |
      [[[
        if (entity && entity.state !== '0') {
          let privatetorr = entity.attributes.link,
            imdb = entity.attributes.id,
            torrent = entity.attributes.torrent;

          let name = entity.attributes.name,
            year = entity.attributes.year,
            rating = entity.attributes.rating;

          var imdb_icon = '';
          if (rating != '') { imdb_icon = '<span style="padding-left:15px;"></span> | <span style="padding-left:15px;"></span> <span class="badge badge--imdb" role="img"></span>' };

          return `
            <ha-icon icon="ios:film"></ha-icon> <span class="title">Movie</span><br>
            <p class="subtitle">${name} (${year})
              ${imdb_icon} ${rating}
            </p>
          `;
          }
          else {
            return ' ';
          }
      ]]]


  rss_results_tv:
    template:
      - rss
      - settings
    state_display: |
      [[[
        if (entity && entity.state !== '0') {
          let privatetorr = entity.attributes.link,
            imdb = entity.attributes.id,
            torrent = entity.attributes.torrent;

          let name = entity.attributes.name,
            season_episode = entity.attributes.season_episode,
            rating = entity.attributes.rating;

          var season_split = '';
          if ( season_episode.includes('E') ) { season_split = season_episode.split('E').join(' · E') } else { season_split = season_episode };

          return `
            <ha-icon icon="ios:tv"></ha-icon> <span class="title">TV Show</span><br>
            <p class="subtitle">${name} - ${season_split}
              <span style="padding-left:15px;"></span> | <span style="padding-left:15px;"></span>
              <span class="badge badge--imdb" role="img"></span> ${rating}
            </p>
          `;
          }
          else {
            return ' ';
          }
      ]]]


  #################################################
  #                                               #
  #                    CIRCLE                     #
  #                                               #
  #################################################

  circle:
    styles:
      card:
        - --c-stroke-color-on: '#7d7e80'
        - --c-stroke-color-off: none
        - --c-fill-color-on: none
        - --c-fill-color-off: rgba(255,255,255,0.04)
        - --c-stroke-width: 3
        - --c-stroke-width-dragging: 4
        - --c-font-color: '#97989c'
        - --c-font-size: 14px
        - --c-unit-font-size: 10px
        - --c-font-weight: 500
        - --c-letter-spacing: 0.03rem
      custom_fields:
        circle:
          - display: initial
          - width: 90%
          - margin: -6% -6% 0 0
          - justify-self: end
          - opacity: 1
    custom_fields:
      circle: >
        [[[
          if (entity) {
              let r = 20.5,
                  c = r * 2 * Math.PI,
                  tspan = '<tspan dx=".2" dy="-.4">',
                  domain = entity.entity_id.split('.')[0],
                  state = variables.state_on,
                  input = variables.circle_input || ' ',
                  unit = variables.circle_input_unit || ' ';

            /* * * * * * * * * * * * * * * * * *
              *                                 *
              *             CIRCLE              *
              *                                 *
              * * * * * * * * * * * * * * * * * */

              let circle = (state, input, unit) => {
                  return `
                    <svg viewBox="0 0 50 50">
                      <style>
                        circle {
                          transform: rotate(-90deg);
                          transform-origin: 50% 50%;
                          stroke-dasharray: ${c};
                          stroke-linecap: round;
                          fill: ${state ? 'var(--c-fill-color-on)' : 'var(--c-fill-color-off)'};
                        }
                        text {
                          font-size: var(--c-font-size);
                          font-weight: var(--c-font-weight);
                          letter-spacing: var(--c-letter-spacing);
                          fill: var(--c-font-color);
                        }
                        tspan {
                          font-size: var(--c-unit-font-size);
                        }
                        #circle_value, tspan {
                          text-anchor: middle;
                          dominant-baseline: central;
                        }
                      </style>
                      <circle id="circle_stroke_bg" cx="25" cy="25" r="${r}" opacity="0.7" stroke-width="var(--c-stroke-width)" stroke="#9da0a2"/>
                      <circle id="circle_stroke_prev" cx="25" cy="25" r="${r}" opacity="1" stroke-width="2.5" stroke="#ffd945"  stroke-dashoffset="${typeof input === 'number' && c - input / 100 * c}" stroke-dasharray="${c}"/>
                      <circle id="circle_stroke" cx="25" cy="25" r="${r}" opacity="1.0" stroke-width="var(--c-stroke-width)" stroke="${state ? 'var(--c-stroke-color-on)' : 'var(--c-stroke-color-off)'}" stroke-dashoffset="${typeof input === 'number' && c - input / 100 * c}" stroke-dasharray="${c}"/>
                      <text id="circle_value" x="50%" y="52%" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${input}${tspan}${unit}</tspan></text>
                    </svg>

                    ${domain === 'light' && `
                        <input id="circle_slider" type="range" min="0" max="100" value="${input}">
                    `}
                  `;
              }

            /* * * * * * * * * * * * * * * * * *
              *                                 *
              *              LIGHT              *
              *                                 *
              * * * * * * * * * * * * * * * * * */

              if (domain === 'light' && state) {

                  // wait 0ms for shadow dom
                  setTimeout(() => {

                      // then get elements
                      let elt = this.shadowRoot,
                          circle_slider = elt.getElementById('circle_slider'),
                          circle_value = elt.getElementById('circle_value'),
                          circle_stroke_prev = elt.getElementById('circle_stroke_prev'),
                          circle_stroke = elt.getElementById('circle_stroke');

                      // approximate position of thumb relative to circle
                      circle_slider.style.top = `${(circle_slider.value - 70) / 1.66 - 1}%`;

                      // debug position
                      let debug = false;
                      if (debug) circle_slider.style.opacity = 0.3;

                      // pass each event to handler
                      ['click', 'input', 'mousedown', 'mouseup', 'touchstart', 'touchend'].forEach((event) => {
                          circle_slider.addEventListener(event, handler, { passive: true })
                      });

                      function handler(event) {

                          // "this" refers to slider
                          if (event.target === this) {

                              // bypass button-card tap_action
                              event.stopPropagation();

                              // update circle_value
                              circle_value.innerHTML = `${this.value}${tspan}${unit}</tspan>`;

                              // update stroke
                              circle_stroke.style.strokeDashoffset = c - this.value / 100 * c;
                              circle_stroke.style.strokeWidth = 'var(--c-stroke-width-dragging)';
                              
                              // set cursor while dragging
                              if (event.type === 'mousedown' || event.type === 'input') {
                                  this.style.cursor = 'grabbing';
                              } else {
                                  this.style.cursor = 'grab';
                              }

                              // reset stroke width if value doesn't change
                              if (input == this.value && (event.type === 'click' || event.type === 'touchend'))
                                  circle_stroke.style.strokeWidth = 'var(--c-stroke-width)';

                              // on release
                              if (event.type === 'mouseup' || event.type === 'touchend') {

                                  // display loader if brightness is 0
                                  if (circle_slider.value == 0 && elt.getElementById('loader')) {
                                      elt.getElementById('loader').style.display = 'initial';
                                      elt.getElementById('circle').style.display = 'none';
                                  }

                                  // set brightness
                                  hass.callService('light', 'turn_on', {
                                      entity_id: entity.entity_id,
                                      brightness_pct: this.value
                                  });
                              }
                          }
                      }
                  }, 0);

                  return circle(state, input, unit);
              }

            /* * * * * * * * * * * * * * * * * *
              *                                 *
              *             PERSON              *
              *                                 *
              * * * * * * * * * * * * * * * * * */

              else if (domain === 'person') {
                  let time = c => {
                      let s = (c/1e3),
                          m = (c/6e4),
                          h = (c/36e5),
                          d = (c/864e5);
                      return s < 60
                          ? parseInt(s) + 's'
                          : m < 60 ? parseInt(m) + 'm'
                          : h < 24 ? parseInt(h) + 'h'
                          : parseInt(d) + 'd';
                  };
                  let input = states[variables.retain] === undefined || states[variables.retain].state === 'unavailable'
                          ? time(Date.now() - Date.parse(entity.last_changed))
                          : time(Date.now() - Date.parse(states[variables.retain].state)),
                      unit = ' ';

                  return `
                    <svg viewBox="0 0 50 50">
                      <style>
                        circle {
                          transform: rotate(-90deg);
                          transform-origin: 50% 50%;
                          stroke-dasharray: ${c};
                          stroke-linecap: round;
                          fill: ${state ? 'var(--c-fill-color-on)' : 'var(--c-fill-color-off)'};
                        }
                        text {
                          font-size: var(--c-font-size);
                          font-weight: var(--c-font-weight);
                          letter-spacing: var(--c-letter-spacing);
                          fill: var(--c-font-color);
                        }
                        tspan {
                          font-size: var(--c-unit-font-size);
                        }
                        #circle_value, tspan {
                          text-anchor: middle;
                          dominant-baseline: central;
                        }
                      </style>
                      <circle id="circle_stroke_bg" cx="25" cy="25" r="${r}" opacity="0.7" stroke-width="var(--c-stroke-width)" stroke="#9da0a2"/>
                      <text id="circle_value" x="50%" y="52%" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${input}${tspan}${unit}</tspan></text>
                    </svg>
                  `;
              }

            /* * * * * * * * * * * * * * * * * *
              *                                 *
              *             CLIMATE             *
              *                                 *
              * * * * * * * * * * * * * * * * * */

              else if (domain === 'climate' || domain === 'switch') {
                  return `
                    <svg viewBox="0 0 50 50">
                      <style>
                        circle {
                          transform: rotate(-90deg);
                          transform-origin: 50% 50%;
                          stroke-dasharray: ${c};
                          stroke-linecap: round;
                          stroke: ${state ? '#9da0a2' : 'rgba(255,255,255,0.1)'};
                          fill: ${state ? 'var(--c-fill-color-on)' : 'var(--c-fill-color-off)'};
                        }
                        text {
                          font-size: var(--c-font-size);
                          font-weight: var(--c-font-weight);
                          letter-spacing: var(--c-letter-spacing);
                          fill: var(--c-font-color);
                        }
                        tspan {
                          font-size: var(--c-unit-font-size);
                        }
                        #circle_value, tspan {
                          text-anchor: middle;
                          dominant-baseline: central;
                        }
                      </style>
                      <circle id="circle_stroke_bg" cx="25" cy="25" r="${r}" opacity="0.7" stroke-width="var(--c-stroke-width)"/>
                      <text id="circle_value" x="50%" y="52%" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${input}${tspan}${unit}</tspan></text>
                    </svg>
                  `;
              }

            /* * * * * * * * * * * * * * * * * *
              *                                 *
              *              COVER              *
              *                                 *
              * * * * * * * * * * * * * * * * * */

              else if (domain === 'cover' && state) {
                  return circle(state, input, unit);
              }

            /* * * * * * * * * * * * * * * * * *
              *                                 *
              *              OTHER              *
              *                                 *
              * * * * * * * * * * * * * * * * * */

              else if (variables.state_on) {
                  return circle(state, input, unit);
              }
          }
        ]]]



  #################################################
  #                                               #
  #                    LOADER                     #
  #                                               #
  #################################################

  loader:
    custom_fields:
      loader: >
        <img src="/local/svg/loader.svg" width="100%">
    tap_action:
      loader: >
        [[[
          if (entity) {
            var domain = entity.entity_id.split('.')[0];
            if (domain === 'light' || domain === 'lock') {
              let elt = this.shadowRoot,
                loader = (id, style, timeout) => {
                  elt.getElementById(id) && (elt.getElementById(id).style.display = style,
                    window.setTimeout(() => {
                      elt.getElementById('loader').style.display = 'none'
                    }, 20000))
                };
              loader('circle', 'none', 'initial'),
              loader('loader', 'initial', 'none');
            }
          }
        ]]]
    double_tap_action:
      loader: >
        [[[
          if (entity) {
            var domain = entity.entity_id.split('.')[0];
            if (domain === 'cover') {
              let elt = this.shadowRoot,
                loader = (id, style, timeout) => {
                  elt.getElementById(id) && (elt.getElementById(id).style.display = style,
                    window.setTimeout(() => {
                      elt.getElementById('loader').style.display = 'none'
                    }, 20000))
                };
              loader('circle', 'none', 'initial'),
              loader('loader', 'initial', 'none');
            }
          }
        ]]]
    styles:
      custom_fields:
        loader:
          - display: none
          - top: -5.8%
          - right: -5.3%
          - width: 50%
          - position: absolute
          - opacity: 0.5
          - filter: >
              [[[
                return variables.state_on
                    ? 'none'
                    : 'invert(1)';
              ]]]
          #- filter: >
          #    [[[ return variables.state === 'off' ? 'invert(1)' : 'none'; ]]]


  #################################################
  #                                               #
  #                     TILT                      #
  #                                               #
  #################################################

  tilt:
    variables:
      tilt_enable: >
        [[[
          // enable only on this
          if (window.navigator.userAgent.match(/Windows NT/i)) {
              return true;
          }
          return false;
        ]]]
      tilt_options: >
        [[[
          let options = {
              max: 5,
              scale: 1.06,
              glare: true,
              'max-glare': 0.15,
              perspective: 800,
              speed: 800,
              parallax: '25px'
          }
          if (this._config.template.includes('conditional_media')) {
              options.scale = options.scale % parseInt(options.scale) / 2 + parseInt(options.scale);
              options.perspective = options.perspective * 2;
              return options;
          }
          return options;
        ]]]
    custom_fields:
      tilt: >
        [[[
          setTimeout(() => {
              let elt = this.shadowRoot,
                  card = elt.getElementById('card'),
                  tilt = typeof VanillaTilt === 'function';
              if (elt && card && tilt && variables.tilt_enable) {
                  VanillaTilt.init(card, variables.tilt_options);
              } else {
                  setTimeout(() => {
                      if (elt && card && tilt && variables.tilt_enable) {
                          VanillaTilt.init(card, variables.tilt_options);
                      }
                  }, 1000);
              }
          }, 0);
        ]]]

        
  #################################################
  #                                               #
  #                    CLIMATE                    #
  #                                               #
  #################################################

  climate_base:
    show_icon: false
    styles:
      name:
        - padding: 12px 13px
        - font-size: 0.8em
        - font-weight: 600
      card:
        - border-radius: 10px

  climate_fan_mode:
    show_icon: false
    variables:
      fan_mode: false
    tap_action:
      action: call-service
      service: climate.set_fan_mode
      service_data:
        entity_id: >
          [[[
            return !entity || entity.entity_id;
          ]]]
        fan_mode: >
          [[[
            return variables.fan_mode;
          ]]]
    styles:
      card:
        - background-color: >
            [[[
              return !entity || entity.attributes.fan_mode === variables.fan_mode ? "rgba(158, 158, 158, 0.2)" : "rgba(189, 189, 189, 0.05)";
            ]]]
    template:
      - climate_base

  climate_swing_mode:
    tap_action:
      action: call-service
      service: climate.set_swing_mode
      service_data:
        entity_id: >
          [[[
            return !entity || entity.entity_id;
          ]]]
        swing_mode: >
          [[[
            return !entity || entity.attributes.swing_mode === 'off' ? 'on' : 'off';
          ]]]
    styles:
      card:
        - background-color: >
            [[[
              return !entity || entity.attributes.swing_mode === "on" ? "rgba(158, 158, 158, 0.2)" : "rgba(189, 189, 189, 0.05)";
            ]]]
    template:
      - climate_base

  climate:
    template:
      - circle
    state_display: >
      [[[
        if (variables.state == 'heat_cool') {
          return 'Auto';
        }
      ]]]
    variables:
      circle_input: >
        [[[
          if (states['sensor.temperature_average_upstairs'].state) {
            return (Math.round(states['sensor.temperature_average_upstairs'].state));
          }
        ]]]
      circle_input_unit: '°C'
    styles:
      custom_fields:
        circle:
          - display: initial
          - width: 90%
          - letter-spacing: 0.03vw
          - margin: -6% -6% 0 0
          - justify-self: end
          - opacity: 1


  #################################################
  #                                               #
  #                    UPDATES                    #
  #                                               #
  #################################################

  base_updates:
    show_state: true
    show_name: false
    show_icon: false
    styles:
      state:
        - text-align: left
        - justify-self: left
        - white-space: normal
      card:
        - cursor: default
        - padding: 0.2em 0 0 0.6em
        - letter-spacing: var(--mdc-typography-body1-letter-spacing)
    tap_action:
      href:
    extra_styles: |
      #ripple {
        display: none;
      }
      ha-icon {
        width: 1.4em;
        vertical-align: 12%;
        opacity: 0.5;
        padding-right: 2px;
      }
      .title {
        font-size: 1.3em;
        font-weight: 500;
      }
      .subtitle {
        font-size: 0.95em;
        line-height: 0.7em;
        padding-left: 3px;
        padding-bottom: 10px;
        font-weight: 500;
        color: #828383;
      }
      a {
        color: var(--primary-color);
      }
      ul {
        margin-top: -0.6em;
        font-size: 0.88em;
        letter-spacing: 0.5px;
        line-height: 1.6em;
      }
      code {
        background-color: var(--secondary-background-color);
      }

  updates_hass:
    template:
      - base_updates
      - settings
    state_display: |
      [[[
        if (entity) {
            let available = states[variables.available].attributes.home_assistant;

            let links = new RegExp('<a href="([^"]+)"', "g"),
                installed = entity.state,
                hass_version_latest = states[variables.latest],
                hass_version_latest_beta = states[variables.latest_beta],
                hass_release_notes = states[variables.release_notes],
                hass_release_notes_beta = states[variables.release_notes_beta];

            let latest = installed.includes('b')
                ? hass_version_latest_beta.state
                : hass_version_latest.state;

            let release_notes = installed.includes('b')
                ? marked.parse(hass_release_notes.attributes.body)
                : marked.parse(hass_release_notes_beta.attributes.body);

            let subtitle = available === 0
                ? `${variables.translate_no_updates} <b>&larr;</b> ${installed}`
                : `${installed} <b>&rarr;</b> ${latest} ${variables.translate_available} ${String.fromCodePoint("0x1f389")}`;

            let output = available === 0
                ? '<ul></ul>'
                : release_notes.replace(links, '<a href="#" onclick="window.open(\'$1\')"');

            return `
              <ha-icon icon="mdi:home-assistant"></ha-icon> <span class="title">Home Assistant</span><br>
              <p class="subtitle">${subtitle}</p>
              ${output}
            `;
        }
      ]]]

  updates_hass_icon_name:
    template: icon_name
    icon: mdi:update
    styles:
      card:
        - opacity: >
            [[[
              return entity && (entity.state === states[variables.latest].state ||
                entity.state === states[variables.latest_beta].state)
                  ? '0.3'
                  : '1';
            ]]]
        - display: >
            [[[
              return entity
                ? 'flex'
                : 'none';
            ]]]

  updates:
    template:
      - base_updates
      - settings
    state_display: |
      [[[
        // variables
        let output = '',
            updates = states[variables.updates],
            hacs_installed = states[variables.hacs_installed]?.attributes.repositories,
            other_updates = states[variables.other_updates],
            hacs_update = states['update.hacs_update']?.attributes.installed_version,
            no_updates = variables.translate_no_updates,
            update_available = variables.translate_update_available,
            updates_available = variables.translate_updates_available;

        const rename = a => {
            return a.release_url && a.release_url.indexOf('github.com') > -1
                ? `${a.release_url.split('/')[3]}/${a.release_url.split('/')[4]}`
                : a?.friendly_name;
        };

        // update entities
        Object.keys(states).forEach(key => {
          let s = states[key], e = s.entity_id, a = s.attributes;
          if (e.includes('update.') && s.state === 'on') {
              output += `<li><b><a href="#" onclick="window.open('${a.release_url}');">
              ${rename(a)}</a></b> ${a.installed_version} <b>&rarr;</b> ${a.latest_version}</li>`
          }
        });
        // other updates
        let attr = Object.fromEntries(
            Object.entries(other_updates?.attributes).filter(([, value]) => value != false));
        for (const [, value] of Object.entries(attr)) {
          output += `<li>${value}</li>`;
        }
        // subtitle
        let count = updates?.attributes.update_entities + updates?.attributes.other_updates,
            subtitle = count === 0
                ? `${no_updates} <b>&larr;</b> ${hacs_update || ''}`
                : `${count} ${count === 1 ? update_available : updates_available} ${String.fromCodePoint('0x1f389')}`;
        return `
          <ha-icon icon="mdi:package-up"></ha-icon> <span class="title">Updates</span><br>
          <p class="subtitle">${subtitle}</p>
          <ul>${output}</ul>
        `;
      ]]]

  updates_icon_name:
    template: icon_name
    icon: mdi:open-in-new
    styles:
      card:
        - opacity: >
            [[[
              return entity?.attributes?.update_entities === 0
                  ? '0.3'
                  : '1';
            ]]]

  hacs_iframe:
    tap_action:
      action: fire-dom-event
      browser_mod:
        service: browser_mod.popup
        data:
          title: ' '
          size: fullscreen
          content:
            type: iframe
            aspect_ratio: 16x9.15
            url: >
              [[[ return `/${hass.panels.config.url_path}/updates` ]]]
    template: icon_name

  hacs_navigate_ios:
    tap_action:
      action: fire-dom-event
      browser_mod:
        service: browser_mod.javascript
        data:
          code: >
            window.location.href = `/${hass.panels.config.url_path}/updates`;
    template: icon_name


  #################################################
  #                                               #
  #                     LIGHT                     #
  #                                               #
  #################################################

  light:
    template:
      - base
      - circle
      - loader
    variables:
      circle_input: >
        [[[
          if (entity) {
              // if light group get brightness from child to remove bounce
              let child = entity.attributes.entity_id,
                  brightness = child && states[child[0]].attributes.brightness
                      ? Math.round(states[child[0]].attributes.brightness / 2.54)
                      : Math.round(entity.attributes.brightness / 2.54);
              return brightness === 0 && entity.state !== 'off'
                  ? 1
                  : brightness
          }
        ]]]
      circle_input_unit: '%'
    double_tap_action:
      action: fire-dom-event
      browser_mod:
        service: browser_mod.popup
        data:
          title: >
            [[[
              return !entity || entity.attributes.friendly_name;
            ]]]
          style: >
            --popup-background-color: transparent;
          card_mod:
            style:
              .: |
                ha-header-bar {
                  display: none !important;
                }
                @media screen and (max-width: 800px) {
                  ha-header-bar {
                    display: block !important;
                  }
                }
          content:
            type: custom:mod-card
            card_mod:
              style: |
                #states {
                  padding-top: 0.5em;
                }
            card:
              type: custom:light-popup-card
              entity: >
                [[[ return entity.entity_id ]]]
              icon: none
              fullscreen: false
              brightnessWidth: 130px
              brightnessHeight: 360px
              borderRadius: 1.7em
              sliderColor: '#c7c7c7'
              sliderTrackColor: rgba(25, 25, 25, 0.9)
              displayType: slider
              actionSize: 4.5em
              actionsInARow: 2
              actions:
                - action: call-service
                  service: light.turn_on
                  color: '#d8d9e1'
                  service_data:
                    entity_id: >
                      [[[ return entity.entity_id ]]]
                    color_temp: 153
                - action: call-service
                  service: light.turn_on
                  color: '#d5b08d'
                  service_data:
                    entity_id: >
                      [[[ return entity.entity_id ]]]
                    color_temp: 326
                - action: call-service
                  service: light.turn_on
                  color: '#ce944b'
                  service_data:
                    entity_id: >
                      [[[ return entity.entity_id ]]]
                    color_temp: 500
                - action: fire-dom-event
                  image: >-
                    data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 
                    50 50"%3E%3Cstyle%3Esvg%7Bbackground:radial-gradient(circle,rgba(255,255,
                    255,1) 0%25,rgba(255,255,255,0) 80%25),conic-gradient(%237827e6,%23e622e7,
                    %23e40588,%23e41919,%23e5691e,%23e8e22e,%237de629,%2334e828,%2333e75c,
                    %2334e8e0,%23207de5,%231227e5,%237827e6)%7D%3C/style%3E%3C/svg%3E
                  browser_mod:
                    command: popup
                    title: >
                      [[[ return entity.attributes.friendly_name ]]]
                    card:
                      type: custom:light-entity-card
                      entity: >
                        [[[ return entity.entity_id ]]]
                      brightness: true
                      color_temp: true
                      full_width_sliders: false
                      hide_header: true
                      show_slider_percent: true
                      smooth_color_wheel: true
                      persist_features: true
                      consolidate_entities: false


  #################################################
  #                                               #
  #                 LIGHT GROUP                   #
  #                                               #
  #################################################

  room_group:
    template:
      - base
    variables:
      light_entity: ''
      circle_input: >
        [[[ return entity === undefined || Math.round(entity.attributes.brightness / 2.54); ]]]
    state_display: >
      [[[
        if (variables.state == 'no') {
          return 'Off';
        }
        else if (variables.state == 'yes') {
          return 'On';
        }
      ]]]
    hold_action:
      action: call-service
      service: light.toggle
      service_data:
        entity_id: '[[[ return variables.light_entity; ]]]'
    double_tap_action:
      action: fire-dom-event
      browser_mod:
        service: browser_mod.popup
        data:
          title: >
            [[[
              return states[variables.light_entity].attributes.friendly_name;
            ]]]
          style: >
            --popup-background-color: transparent;
          content:
            type: custom:mod-card
            card_mod:
              style: |
                #states {
                  padding-top: 0.5em;
                }
            card:
              type: custom:light-popup-card
              entity: >
                [[[ return variables.light_entity; ]]]
              icon: none
              fullscreen: false
              brightnessWidth: 130px
              brightnessHeight: 360px
              borderRadius: 1.7em
              sliderColor: '#c7c7c7'
              sliderTrackColor: rgba(25, 25, 25, 0.9)
              displayType: slider
              actionSize: 4.5em
              actionsInARow: 2



  #################################################
  #                                               #
  #                    BLINDS                     #
  #                                               #
  #################################################

  blinds:
    template:
      - base
      - circle
    variables:
      circle_input: >
        [[[
          if (entity) {
            let pos = states[entity.entity_id].attributes.current_position;
            return pos;
          }
        ]]]
      circle_input_unit: '%'
    tap_action:
      action: fire-dom-event
      browser_mod:
        service: browser_mod.popup
        data:
          title: >
            [[[ return entity.attributes.friendly_name; ]]]
          style: >
            --popup-background-color: transparent;
          card_mod:
            style:
              .: |
                ha-header-bar {
                  display: none !important;
                }
                @media screen and (max-width: 800px) {
                  ha-header-bar {
                    display: block !important;
                  }
                }
          content:
            type: custom:mod-card
            card:
              type: custom:cover-popup-card
              entity: >
                [[[ return entity.entity_id ]]]
              icon: none
              fullscreen: false
              sliderWidth: 130px
              sliderHeight: 360px
              borderRadius: 1.7em
              sliderColor: '#c7c7c7'
              sliderTrackColor: rgba(25, 25, 25, 0.9)
              displayType: slider
              sliderService: cover.set_cover_position
              actionsInARow: 3
              actions:
                - service: cover.open_cover
                  service_data:
                    entity_id: >
                      [[[ return entity.entity_id ]]]
                  #name: open
                  icon: mdi:arrow-up
                - service: cover.stop_cover
                  service_data:
                    entity_id: >
                      [[[ return entity.entity_id ]]]
                  #name: stop
                  icon: mdi:stop
                - service: cover.close_cover
                  service_data:
                    entity_id: >
                      [[[ return entity.entity_id ]]]
                  #name: close
                  icon: mdi:arrow-down


  #################################################
  #                                               #
  #                   SENSORS                     #
  #                                               #
  #################################################

  sensors:
    state_display: >
      [[[
        if (variables.state == 'off') {
          return 'Clear';
        }
        else {
          return 'Detection';
        }
      ]]]

  sensors_popup:
    show_state: true
    show_name: false
    show_icon: false
    styles:
      state:
        - text-align: left
        - justify-self: left
        - white-space: normal
      card:
        - cursor: default
        - padding: 0.2em 0 0 0.6em
        - letter-spacing: var(--mdc-typography-body1-letter-spacing)
    tap_action:
      href:
    extra_styles: |
      #ripple {
        display: none;
      }
      ha-icon {
        width: 1.4em;
        vertical-align: 12%;
        opacity: 0.5;
        padding-right: 2px;
      }
      .title {
        font-size: 1.3em;
        font-weight: 500;
      }
      a {
        color: var(--primary-color);
      }
      ul {
        margin-top: -0.6em;
        font-size: 0.88em;
        letter-spacing: 0.5px;
        line-height: 1.6em;
      }
      code {
        background-color: var(--secondary-background-color);
      }

  contact_sensors:
    template:
      - sensors
      - sensors_popup
      - settings
    state_display: |
      [[[
        if (entity) {
          return `
            <ha-icon icon="custom:contact-sensor"></ha-icon> <span class="title">Contact Sensors</span><br>
          `;
        }
      ]]]

  motion_sensors:
    template:
      - sensors
      - sensors_popup
      - settings
    state_display: |
      [[[
        if (entity) {
          return `
            <ha-icon icon="custom:motion-sensor"></ha-icon> <span class="title">Motion Sensors</span><br>
          `;
        }
      ]]]

  running_processes:
    template:
      - sensors
      - sensors_popup
      - settings
    state_display: |
      [[[
        if (entity) {
          return `
            <ha-icon icon="custom:ai"></ha-icon> <span class="title">Running Processes</span><br>
          `;
        }
      ]]]

  favorite_automations:
    template:
      - sensors
      - sensors_popup
      - settings
    state_display: |
      [[[
        if (entity) {
          return `
            <ha-icon icon="mdi:robot-excited"></ha-icon> <span class="title">Automations</span><br>
          `;
        }
      ]]]


  #################################################
  #                                               #
  #                  SECURITY                     #
  #                                               #
  #################################################

  # ALARM
  alarm:
    template:
      - base
    variables:
      state_on: >
        [[[ return ['on'].indexOf(entity === undefined || entity.state) !== -1; ]]]
    state_display: >
      [[[
        if (entity.state == 'on') {
          return 'Armed';
        }
        else {
          return 'Disarmed';
        }
      ]]]
    styles:
      state:
        - color: >
            [[[
              return variables.state_on
                ? 'rgb(139, 51, 51)'
                : 'rgba(255, 255, 255, 0.3)';
            ]]]

  # DOORS
  doors:
    template:
      - base
    variables:
      state_on: >
        [[[ return ['open', 'unlocked'].indexOf(entity === undefined || entity.state) !== -1; ]]]
    name: >
      [[[
        if (entity.state == 'open') {
          let num = entity.attributes.doors_open.length;
          if (num == '1') {
            return entity.attributes.doors_open;
          }
          else {
            return num === '0'
            ? 'Door'
            : num + ' Doors'
          }
        }
        else {
          return 'Doors';
        }
      ]]]
    styles:
      state:
        - color: >
            [[[
              return variables.state_on
                ? 'rgba(185, 61, 71, 0.8)'
                : 'rgba(255, 255, 255, 0.3)';
            ]]]


  #################################################
  #                                               #
  #                   SYSTEMS                     #
  #                                               #
  #################################################

  systems:
    template:
      - base
    state_display: >
      [[[
        if (variables.state == '0' || variables.state == 'on' || variables.state == 'healthy') {
          return 'Online';
        }
        else {
          return 'Offline';
        }
      ]]]


  #################################################
  #                                               #
  #                   FORECAST                    #
  #                                               #
  #################################################

  weather_forecast:
    variables:
      temp_min: ''
      temp_max: ''
      current_weather: ''
    aspect_ratio: 1/1
    show_icon: false
    show_entity_picture: true
    show_name: true
    show_state: false
    show_label: true 
    tap_action:
      action: more-info
    styles:
      grid:
        - grid-template-areas: |
            "n"
            "temp"
            "i"
            "s"
            "l"
        - grid-template-columns: 1fr
        - grid-template-rows: min-content repeat(2, 1fr) repeat(2, min-content)
        - gap: 0%
      card:
        - color: > #rgba(157, 160, 162, 1) #rgba(84, 85, 85, 1) #rgba(85, 86, 86, 1)
            [[[
              if (states['sun.sun'].state == 'below_horizon'){
                return 'rgba(157, 160, 162, 1)';
              } else
                return 'rgba(71, 71, 71, 1)';
            ]]]  
        - background: > # else linear-gradient(to top, rgba(123,168,197,0.8) 0%, rgba(61,132,176,0.8) 100%)
            [[[
              if (states['sun.sun'].state == 'below_horizon'){
                return 'linear-gradient(to top, rgba(53,59,83,0.8) 0%, rgba(10,14,34,0.8) 100%)';
              } else
                return 'linear-gradient(to top, rgb(123 168 197) 0%, rgba(61,132,176,0.8) 100%)';
            ]]]
          # return 'linear-gradient(to top, rgb(123 168 197) 0%, #b0c5d3 100%)'; --- rgb(213, 215, 216)
      name:
        - place-self: start
        - text-transform: uppercase
        - font-weight: 400
      img_cell:
        - justify-content: start
      icon:
        - width: 35%
        #- width: 37%
      label:
        - place-self: start
        - margin-left: -5px
      custom_fields:
        temp:
          - place-self: start
          #- margin-top: -10px
    label: >   
      [[[
        return `
          <ha-icon icon="mdi:arrow-up-thin" style="width: 1.1em; height: 1.1em; margin-right: -0.3em;"></ha-icon>
          <span> ${states[variables.temp_max].state}°</span>
          <ha-icon icon="mdi:arrow-down-thin" style="width: 1.1em; height: 1.1em; margin-right: -0.3em;"></ha-icon>
          <span> ${states[variables.temp_min].state}°</span>
        `
      ]]]
    custom_fields:
      temp: >
        [[[ return entity.attributes.temperature + "°"; ]]]
    entity_picture: |
      [[[
        let weather = states[variables.current_weather].state.toLowerCase();
        if ((weather == 'sunny') && (states['sun.sun'].state == 'above_horizon'))
          return "/local/svg/weather/animated/clear-day.svg";
          if ((weather == 'sunny') || (weather == 'clear-night') && (states['sun.sun'].state == 'below_horizon'))
            return "/local/svg/weather/animated/clear-night.svg";
              if (weather == 'fog')
                return "/local/svg/weather/animated/fog.svg";
                  if ((weather == 'partlycloudy') && (states['sun.sun'].state == 'above_horizon'))
                    return "/local/svg/weather/animated/partly-cloudy-day.svg";
                      if ((weather == 'partlycloudy') && (states['sun.sun'].state == 'below_horizon'))
                        return "/local/svg/weather/animated/partly-cloudy-night.svg";
                          if (weather == 'rainy')
                            return "/local/svg/weather/animated/rain.svg";
                              if (weather == 'sleet')
                                return "/local/svg/weather/animated/sleet.svg";
                                  if (weather == 'snow')
                                    return "/local/svg/weather/animated/snow.svg";
                                      if (weather == 'cloudy')
                                        return "/local/svg/weather/animated/cloudy.svg";
        else (weather == 'wind')
          return "/local/svg/weather/animated/wind.svg";
      ]]]
    extra_styles: |
      [[[
        return `
          #name {
            font-size: 0.7vw;
          }
          #temp {
            font-size: 1.7vw;
          }
          #state {
            font-size: 0.8vw;
          }  
          #label {
            font-size: 0.7vw;
          }                    
          /* portrait */
          @media screen and (max-width: 2000px) {
            #name {
              font-size: 0.7vw !important;
            }
            #temp {
              font-size: 1.8vw !important;
            }
            #state {
              font-size: 0.7vw !important;
            }  
            #label {
              font-size: 0.7vw !important;
            }  
          }
          /* phone */
          @media screen and (max-width: 800px) {
            #name {
              font-size: 2vw !important;
            }              
            #temp {
              font-size: 4.5vw !important;
            }    
            #state {
              font-size: 2vw !important;
            }   
            #label {
              font-size: 2vw !important;
            }                        
          }
          @keyframes card_bounce {
            0% {
              transform: scale(1);
            }
            15% {
              transform: scale(0.9);
            }
            25% {
              transform: scale(1);
            }
            30% {
              transform: scale(0.98);
            }
            100% {
              transform: scale(1);
            }
          }
        `
      ]]]


  #################################################
  #                                               #
  #                    PERSON                     #
  #                                               #
  #################################################

  person:
    template:
      - base
      - circle
    state_display: >
      [[[
        if (variables.state === 'home') {
          return 'Home';
        }
        if (variables.state === 'not_home') {
          return 'Away';
        }
        return variables.state;
      ]]]
    triggers_update: sensor.time
    styles:
      custom_fields:
        icon:
          - clip-path: circle()
          - width: 79%
          - pointer-events: none
          - display: grid
    custom_fields:
      icon: >
        [[[ return entity === undefined ? null : `<img src="${states[entity.entity_id].attributes.entity_picture}" width="100%">`; ]]]



  #################################################
  #                                               #
  #                 CIRCLE STATE                  #
  #                                               #
  #################################################

  circle_state:
    template:
      - base
      - circle
    triggers_update: sensor.time
    custom_fields:
      circle: >
        [[[
          if (entity.state === "open" || entity.state === "on") {
            let time = c => {
              let s = (c/1e3), m = (c/6e4), h = (c/36e5), d = (c/864e5);
              return s < 60 ? parseInt(s) + 's' : m < 60 ? parseInt(m) + 'm' : h < 24 ? parseInt(h) + 'h' : parseInt(d) + 'd';
            };
            let last_changed = states[variables.retain] == null || states[variables.retain].state == 'unavailable'
                ? time(Date.now() - Date.parse(states[entity.entity_id].last_changed))
                : time(Date.now() - Date.parse(states[variables.retain].state)),
              stroke = variables.state === 'open' || variables.state === 'on' ? '#b2b2b2' : 'none',
              fill = variables.state === 'closed' || variables.state === 'off' ? 'rgba(255,255,255,0.04)' : 'none';
            return `
              <svg viewBox="0 0 50 50">
                <circle cx="25" cy="25" r="20.5" stroke="${stroke}" stroke-width="2.5" fill="${fill}" />
                <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${last_changed}</text>
              </svg>
            `;
          }
        ]]]

        
  #################################################
  #                                               #
  #                  BASE MEDIA                   #
  #                                               #
  #################################################

  base_media:
    variables:
      media_on: >
        [[[ return !entity || ['on', 'playing', 'paused', 'idle'].indexOf(entity.state) !== -1; ]]]
      media_off: >
        [[[ return !entity || ['off', 'standby', 'unknown', 'unavailable'].indexOf(entity.state) !== -1; ]]]
    tap_action:
      action: call-service
      service: >
        [[[
          return variables.media_on
              ? 'media_player.media_play_pause'
              : 'media_player.toggle';
        ]]]
      service_data:
        entity_id: >
          [[[
            return variables.entity_id;
          ]]]
    double_tap_action:
      action: more-info
    hold_action:
      action: call-service
      service: media_player.turn_off
      service_data:
        entity_id: >
          [[[
            return variables.entity_id;
          ]]]
    styles:
      card:
        - color: >
            [[[
              let entity_picture = entity === undefined || entity.attributes.entity_picture;
              if (variables.state === 'off' || variables.state === 'idle' || variables.state === 'standby' ||
                variables.state === 'unknown' || variables.state === 'unavailable' || entity === undefined) {
                return 'rgba(255, 255, 255, 0.3)';
              }
              return (variables.state != 'off' && variables.state != 'idle' && variables.state != 'standby') && (entity_picture == null) ? 'rgba(0, 0, 0, 0.6)' : '#efefef';
            ]]]
        - text-shadow: >
            [[[
              let entity_picture = entity === undefined ? null : entity.attributes.entity_picture;
              if (variables.state === 'off' || variables.state === 'idle' || variables.state === 'standby' || variables.state === 'unknown' || variables.state === 'unavailable') {
                return entity_picture == null ? 'none' : '1px 1px 5px rgba(18, 22, 23, 0)';
              }
              return entity_picture == null ? 'none' : '1px 1px 5px rgba(18, 22, 23, 0.9)';
            ]]]


  #################################################
  #                                               #
  #                     MEDIA                     #
  #                                               #
  #################################################

  media:
    template:
      - base
      - base_media
    styles:
      custom_fields:
        icon:
          - width: 70%
          - margin-left: 2%
          - fill: '#9da0a2'
          - display: >
              [[[
                return variables.media_off || variables.entity_picture === undefined
                    ? 'initial'
                    : 'none';
              ]]]
      card:
        - background-color: none
        - background-size: cover
        - background-position: center
        - background-image: >
            [[[
              let entity_picture = entity === undefined || entity.attributes.entity_picture;
              if (variables.state === 'off' || variables.state === 'idle' || variables.state === 'standby' ||
                variables.state === 'unknown' || variables.state === 'unavailable' || entity === undefined) {
                return 'linear-gradient(0deg, rgba(115, 115, 115, 0.2) 0%, rgba(115, 115, 115, 0.2) 100%)';
              }
              return (variables.state != 'off' && variables.state != 'idle' && variables.state != 'standby') && (entity_picture == null) ? 
                'linear-gradient(0deg, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0.8) 100%)' : 
                'linear-gradient(0deg, rgba(0,0,0,.8) 0%, rgba(0,0,0,0) 100%), url(' + entity_picture + ')';
            ]]]


  # APPLE TV
  atv:
    variables:
      media_on: >
        [[[ return !entity || ['playing', 'paused', 'idle'].indexOf(entity.state) !== -1; ]]]
      media_off: >
        [[[ return !entity || ['off', 'standby', 'unknown', 'unavailable'].indexOf(entity.state) !== -1; ]]]
    state_display: >
      [[[ 
        if (entity.state === 'standby') {
          return 'Off';
        }
      ]]]

  # SONOS
  sonos:
    template:
      - base
      - base_media
    variables:
      media_on: >
        [[[ return !entity || ['playing'].indexOf(entity.state) !== -1; ]]]
      media_off: >
        [[[ return !entity || ['paused', 'off', 'idle', 'standby', 'unknown', 'unavailable'].indexOf(entity.state) !== -1; ]]]
    tap_action:
      action: >
        [[[
          return !(variables.state === 'off' || variables.state === 'idle' || variables.state === 'standby') ? 'call-service' : 'none';
        ]]]
      service: media_player.media_play_pause
      service_data:
        entity_id: >
          [[[ return entity === undefined || entity.entity_id; ]]]
    state_display: >
      [[[ 
        if (entity.state === 'idle' || entity.state === 'standby' || entity.state === 'paused') {
          return 'Off';
        }
      ]]]
    styles:
      custom_fields:
        icon:
          - width: 70%
          - fill: '#9da0a2'
          - opacity: >
              [[[
                let entity_picture = entity === undefined ? null : entity.attributes.entity_picture;
                if (entity.state !== 'paused' && entity.state !== 'idle' && entity.state !== 'unavailable' && entity.state !== 'standby') {
                  return entity_picture == null ? 1 : 0;
                }
              ]]]
      card:
        - color: >
            [[[
              let entity_picture = entity === undefined || entity.attributes.entity_picture;
              if (variables.state === 'off' || variables.state === 'idle' || variables.state === 'standby' || variables.state === 'paused' ||
                variables.state === 'unknown' || variables.state === 'unavailable' || entity === undefined) {
                return 'rgba(255, 255, 255, 0.3)';
              }
              return (variables.state != 'off' && variables.state != 'idle' && variables.state != 'standby') && (entity_picture == null) ? 'rgba(0, 0, 0, 0.6)' : '#efefef';
            ]]]
        - text-shadow: >
            [[[
              let entity_picture = entity === undefined ? null : entity.attributes.entity_picture;
              if (variables.state === 'off' || variables.state === 'standby' || variables.state === 'paused' || variables.state === 'unknown' || variables.state === 'unavailable') {
                return entity_picture == null ? 'none' : '1px 1px 5px rgba(18, 22, 23, 0)';
              }
              return entity_picture == null ? 'none' : '1px 1px 5px rgba(18, 22, 23, 0.9)';
            ]]]
        - background-color: none
        - background-size: cover
        - background-image: >
            [[[
              let entity_picture = entity === undefined || entity.attributes.entity_picture;
              if (variables.state === 'off' || variables.state === 'idle' || variables.state === 'standby' || variables.state === 'paused' ||
                variables.state === 'unknown' || variables.state === 'unavailable' || entity === undefined) {
                return 'linear-gradient(0deg, rgba(115, 115, 115, 0.2) 0%, rgba(115, 115, 115, 0.2) 100%)';
              }
              return (variables.state != 'off' && variables.state != 'idle' && variables.state != 'standby') && (entity_picture == null) ? 
                'linear-gradient(0deg, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0.8) 100%)' : 
                'linear-gradient(0deg, rgba(0,0,0,.8) 0%, rgba(0,0,0,0) 100%), url(' + entity_picture + ')';
            ]]]


  #################################################
  #                                               #
  #                 MEDIA VOLUME                  #
  #                                               #
  #################################################

  media_volume:
    variables:
      media_on: >
        [[[ return !entity || ['on', 'playing', 'paused', 'idle'].indexOf(entity.state) !== -1; ]]]
      media_off: >
        [[[ return !entity || ['off', 'standby', 'unknown', 'unavailable'].indexOf(entity.state) !== -1; ]]]
      volume_control: '[[[ return entity.entity_id; ]]]'
      player: '[[[ return entity.entity_id; ]]]'
    tap_action:
      action: >
        [[[
          return variables.media_on
              ? 'fire-dom-event'
              : 'call-service';
        ]]]
      service: >
        [[[
          return variables.media_on
              ? 'none'
              : 'media_player.turn_on';
        ]]]
      service_data:
        entity_id: >
          [[[
            return variables.entity_id;
          ]]]
      browser_mod:
        service: >
          [[[
            return variables.media_on
                ? 'browser_mod.popup'
                : 'none';
          ]]]
        data:
          title: >
            [[[ return entity.attributes.friendly_name; ]]]
          style: >
            --popup-background-color: transparent;
          content:
            type: custom:mod-card
            card:
              type: custom:media_player-popup-card
              #entity: media_player.denon_receiver
              entity: '[[[ return variables.volume_control; ]]]' # IF something, then receiver, else current entity
              icon: none
              fullscreen: false
              sliderWidth: 130px
              sliderHeight: 360px
              borderRadius: 1.7em
              sliderColor: '#c7c7c7'
              sliderTrackColor: rgba(25, 25, 25, 0.9)
              displayType: slider
              actionsInARow: 3
              actions:
                - service: media_player.media_previous_track
                  service_data:
                    entity_id: '[[[ return variables.player; ]]]'
                  #name: previous
                  icon: mdi:skip-previous
                - service: media_player.media_play_pause
                  service_data:
                    entity_id: '[[[ return variables.player; ]]]'
                  #name: play/pause
                  icon: mdi:play-pause
                - service: media_player.media_next_track
                  service_data:
                    entity_id: '[[[ return variables.player; ]]]'
                  #name: next
                  icon: mdi:skip-next


  #################################################
  #                                               #
  #                 PROGRESS BAR                  #
  #                                               #
  #################################################

  progress_bar:
    styles:
      custom_fields:
        progress:
          - background-color: var(--progress-bar-background-color)
          - position: absolute
          - left: 0%
          - top: 73.4%
          - height: var(--progress-bar-height)
          - width: 100%
        bar:
          - background-color: var(--progress-bar-color)
          - position: absolute
          - left: 0%
          - top: 73.4%
          - height: var(--progress-bar-height)
          - z-index: 1
    custom_fields:
      bar: >
        [[[
          if (entity.attributes.media_position !== undefined) {
          setTimeout(() => {
            let elt = this.shadowRoot,
                card = elt.getElementById('card'),
                container = elt.getElementById('container'),
                bar = elt.getElementById('bar');
          
            if (elt && card && container && bar) {
                card.insertBefore(bar, container);
                  function update() {
                      let mediaPositionUpdatedAt = entity.attributes.media_position_updated_at;
                      let mediaPosition = entity.attributes.media_position;
                      let mediaDuration = entity.attributes.media_duration;
                  
                      let percentage = entity.state === 'playing'
                        ? (((Date.now() / 1000) - (new Date(mediaPositionUpdatedAt).getTime() / 1000) + mediaPosition) / mediaDuration * 100)
                        : entity.state === 'paused'
                          ? (mediaPosition / mediaDuration * 100)
                          : 0;
          
                      bar.style.width = percentage.toFixed(1) + '%';
                      requestAnimationFrame(update);
                  }
                  requestAnimationFrame(update);
            }
          }, 0);
          return ' ';}
        ]]]
      progress: >
        [[[
          if (entity.attributes.media_position !== undefined) {
          setTimeout(() => {
              let elt = this.shadowRoot,
                  card = elt.getElementById('card'),
                  container = elt.getElementById('container'),
                  progress = elt.getElementById('progress');
              if (elt && card && container && progress) {
                  card.insertBefore(progress, container);
              }
            }, 0);
          return ' ';}
        ]]]
        

  #################################################
  #                                               #
  #               CONDITIONAL MEDIA               #
  #                                               #
  #################################################

  conditional_media:
    aspect_ratio: 1000/996
    template:
      - base
      - base_media
      - icon_play_pause
    variables:
      entity_picture: ''
      i: >
        [[[
          if (entity) {
            let data = entity.attributes.data;
            return data === undefined || Math.floor(Math.random() * (data.length - 1)) + 1;
          }
        ]]]
    state_display: >
      [[[
        let horizontalStack = this.getRootNode().host,
            swipeCard = horizontalStack.getRootNode().host,
            gridTitle = swipeCard.getRootNode().querySelector("h1");
        swipeCard.swiper.on("slideChange", () => {
            if (swipeCard.swiper.realIndex === 0) {
                gridTitle.textContent = "Media";
            }
            else if (swipeCard.swiper.realIndex === 1) {
                gridTitle.textContent = "Players";
            }
        });

        if (entity) {
          let elt = this.shadowRoot,
              await = setTimeout(marquee, 100),
              data = entity.attributes.data,
              title = entity.attributes.title,
              poster = entity.attributes.poster,
              fanart = entity.attributes.fanart,
              s_e = entity.attributes.number,
              media_artist = entity.attributes.media_artist,
              media_title = entity.attributes.media_title;
            if (entity.state === "Active") {
              var number = s_e === undefined && title !== undefined
                  ? ' '
                  : '· ' + s_e,
              output = `${title} ${number}`;
            }
            else if (data !== undefined) {
              var number = data[variables.i].number === undefined && data[variables.i].aired !== undefined
                  ? `(${data[variables.i].aired.split("-")[0]})`
                  : data[variables.i].number === undefined && data[variables.i].aired === undefined
                      ? ' '
                      : '· ' + data[variables.i].number,
              output = `${data[variables.i].title} ${number}`;
            } else {
              var output = media_artist === undefined && media_title !== undefined
                  ? media_title
                  : media_title === undefined && media_artist !== undefined
                      ? media_artist
                      : media_title !== undefined && media_artist !== undefined
                          ? `${media_artist} - ${media_title}`
                          : variables.translate_idle;
            }

            function marquee() {
                let state = elt.getElementById("state"),
                    container = elt.getElementById("container");
                if (state && container) {
                    state.innerHTML = output;
                    let ro = new ResizeObserver(entries => {
                        let spacer = "&nbsp;".repeat(3),
                            s = entries[0],
                            c = entries[1],
                            r = s && s.contentRect &&
                                c && c.contentRect &&
                                s.contentRect.width !== 0 &&
                                c.contentRect.width !== 0;
                        if (r && s.contentRect.width < c.contentRect.width) {
                            state.classList.remove("marquee");
                        }
                        else if (r && s.contentRect.width >= c.contentRect.width) {
                            state.innerHTML = `${output} ${spacer} ${output} ${spacer}&nbsp;`;
                            state.classList.add("marquee");
                        }
                    });
                    ro.observe(state);
                    ro.observe(container);
                }
            }
            return output;
        }
        return variables.translate_unknown;
      ]]]
    styles:
      grid:
        - gap: 0.65%
      name:
        - padding: 0.2vw
        - margin: -0.2vw
      state:
        - padding-bottom: 5.25%
        - max-width: unset
        - overflow: visible
      card:
        - padding: 5.75% 5.25% 0 5.75%
        - border-radius: calc(var(--button-card-border-radius) / 2)
        - background: rgba(115, 115, 115, 0.2) center center/cover no-repeat
        - background-image: &media_background_image >
            [[[
              if (entity) {
                if (entity.state === "Active") {
                  return entity.attributes.data !== undefined
                    ? `url("${entity.attributes.fanart}"), url("${entity.attributes.poster}")`
                    : `url("${states[variables.entity_picture].attributes.entity_picture}")`;
                }
                else {
                  return entity.attributes.data !== undefined
                    ? `url("${entity.attributes.data[variables.i].fanart}"), url("${entity.attributes.data[variables.i].poster}")`
                    : `url("${states[variables.entity_picture].attributes.entity_picture}")`;
                }
              }
            ]]]
        - color: >
            [[[
              if (entity.state === "Active") {
                return entity === undefined
                    ? '#97989c'
                    : 'rgba(239, 239, 239, 0.5)';
              }
              else {
                return entity === undefined
                    ? '#97989c'
                    : '#efefef';
              }
            ]]]
        - text-shadow: >
            [[[
              return entity === undefined
                  ? 'none'
                  : '1px 1px 5px rgba(18, 22, 23, 0.9)';
            ]]]
      custom_fields:
        icon:
          - width: 30%
          - fill: >
              [[[
                return entity && variables.media_on
                    ? 'rgba(255, 255, 255, 0.8)'
                    : '#9da0a2';
              ]]]
        blur_overlay:
          - display: block
          - position: absolute
          - width: 102.9%
          - height: 103.1%
          - filter: var(--blur-intensity)
          - clip-path: >
              inset(74.5% 1.45% 1.45% 1.45% round 0 0 calc(var(--button-card-border-radius) / 2) calc(var(--button-card-border-radius) / 2))
          - background: center center/cover no-repeat
          - background-image: *media_background_image
          - left: -1.5%
          - bottom: -1.6%
    custom_fields:
      blur_overlay: >
        [[[
          setTimeout(() => {
              let elt = this.shadowRoot,
                  card = elt.getElementById('card'),
                  container = elt.getElementById('container'),
                  blur_overlay = elt.getElementById('blur_overlay');
              if (elt && card && container && blur_overlay) {
                  card.insertBefore(blur_overlay, container);
              }
            }, 0);
          return ' ';
        ]]]


  #################################################
  #                                               #
  #                  BASE CAMERA                  #
  #                                               #
  #################################################

  base_camera:
    tap_action:
      action: >
        [[[
          return !(variables.state === 'off' || variables.state === 'standby') ? 'call-service' : 'none';
        ]]]
      service: media_player.media_play_pause
      service_data:
        entity_id: >
          [[[ return entity === undefined || entity.entity_id; ]]]
    double_tap_action:
      action: call-service
      service: >
        [[[ return variables.state === 'off' || variables.state === 'standby' ? 'media_player.turn_on' : 'media_player.turn_off'; ]]]
      service_data:
        entity_id: >
          [[[ return entity === undefined || entity.entity_id; ]]]
    styles:
      card:
        - color: >
            [[[
              let entity_picture = entity === undefined || entity.attributes.entity_picture;
              if (variables.state === 'off' || variables.state === 'standby' ||
                variables.state === 'unknown' || variables.state === 'unavailable' || entity === undefined) {
                return 'rgba(255, 255, 255, 0.3)';
              }
              return (variables.state != 'off' && variables.state != 'standby') && (entity_picture == null) ? 'rgba(0, 0, 0, 0.6)' : '#efefef';
            ]]]
        - text-shadow: >
            [[[
              let entity_picture = entity === undefined ? null : entity.attributes.entity_picture;
              return entity_picture == null ? 'none' : '1px 1px 5px rgba(18, 22, 23, 0.9)';
            ]]]


  #################################################
  #                                               #
  #                    CAMERA                     #
  #                                               #
  #################################################

  camera:
    template:
      - base
      - base_camera
    state_display: >
        [[[ if (variables.state == 'idle' || variables.state == 'recording') return ' '; ]]]
    styles:
      custom_fields:
        icon:
          - width: 70%
          - fill: '#9da0a2'
          - opacity: >
              [[[
                let entity_picture = entity === undefined ? null : entity.attributes.entity_picture;
                if (entity.state !== 'unavailable' && entity.state !== 'standby') {
                  return entity_picture == null ? 1 : 0;
                }
              ]]]
      card:
        #- align-self: middle
        - background-color: none
        - background-size: cover #137% 101%
        - background-position: center
        - background-repeat: no-repeat
        - background-image: >
            [[[
              let entity_picture = entity === undefined || entity.attributes.entity_picture;
              if (variables.state === 'off' || variables.state === 'standby' ||
                variables.state === 'unknown' || variables.state === 'unavailable' || entity === undefined) {
                return 'linear-gradient(0deg, rgba(115, 115, 115, 0.2) 0%, rgba(115, 115, 115, 0.2) 100%)';
              }
              return (variables.state != 'off' && variables.state != 'standby') && (entity_picture == null) ? 
                'linear-gradient(0deg, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0.8) 100%)' : 
                'linear-gradient(0deg, rgba(0,0,0,.1) 0%, rgba(0,0,0,0) 100%), url(' + entity_picture + ')';
            ]]]


  #################################################
  #                                               #
  #               CONDITIONAL CAMERA              #
  #                                               #
  #################################################

  conditional_camera:
    aspect_ratio: 1000/996
    template:
      - camera
    variables:
      i: >
        [[[
          let data = entity.attributes.data;
          if (entity && data) {
            return Math.floor(Math.random() * (data.length - 1)) + 1;
          }
        ]]]
    state_display: >
      [[[
        if (entity.attributes.online === 'false') {
          return 'No cameras online';
        }
        return entity.attributes.online === 'true' && variables.state === 'recording' ? 'No title' : entity.attributes.last_tripped_time;
      ]]]
    tap_action:
      action: none
    styles:
      grid:
        - gap: 0.65%
      name:
        - padding: 0.2vw
        - margin: -0.2vw
        - width: 100%
      state:
        - padding-bottom: 5.25%
        - max-width: unset
        - overflow: visible
      card:
        - padding: 5.75% 5.25% 0 5.75%
        - border-radius: calc(var(--custom-button-card-border-radius) / 2)
        - color: >
            [[[
              return entity === undefined
                ? 'rgba(255, 255, 255, 0.3)'
                : '#efefef';
            ]]]
        - text-shadow: >
            [[[
              return entity === undefined
                ? 'none'
                : '1px 1px 5px rgba(18, 22, 23, 0.9)';
            ]]]
      custom_fields:
        media_image:
          - z-index: 1
          - top: 0
          - left: 0
          - width: 100%
          - height: 100%
          - position: absolute
          - background-size: cover
          - background-position: center
          - background-repeat: no-repeat
          - background-image: >
              [[[
                return entity.attributes.entity_picture === undefined ? 'none' : `url(${entity.attributes.entity_picture})`;
              ]]]

    custom_fields:
      blur_overlay: >
        [[[
          setTimeout(() => {
            let elt = this.shadowRoot,
              card = elt.getElementById('card'),
              container = elt.getElementById('container'),
              blur_overlay = elt.getElementById('blur_overlay');

            if (elt && card && container && blur_overlay) {
              card.insertBefore(blur_overlay, container);
            }
          }, 0);
          return ' ';
        ]]]


  #################################################
  #                                               #
  #                 COMPUTER LOCK                 #
  #                                               #
  #################################################

  lock:
    tap_action:
      loader: |
        [[[
          let elt = this.shadowRoot;
          if (states["lock.pc"].state === "locked" && entity.state === "on") {
            elt.getElementById("lock").classList.add("locked");
            window.setTimeout(() => {
              elt.getElementById("lock").classList.remove("locked");
            }, 1100);
          } else {

            // duplicate of "loader" template
            let loader = (id, style, timeout) => {
                elt.getElementById(id) && (elt.getElementById(id).style.display = style,
                  window.setTimeout(() => {
                    elt.getElementById(id).style.display = timeout
                  }, 20000))
            };
            loader('circle', 'none', 'initial'),
            loader('loader', 'initial', 'none');
          }
        ]]]
    custom_fields:
      circle: >
        [[[
          if (states['script.home_leave']) {
            let state = states['script.home_leave'].state === 'on' ? 'locked' : null;
            if (states['lock.pc'].state === 'locked') {
              return `
                <svg viewBox="0 0 50 50">
                  <style>
                    @keyframes locked {
                      from,
                      to {
                        transform: translateX(0);
                      }
                      10%,
                      30%,
                      50%,
                      70%,
                      90% {
                        transform: translateX(-8%);
                      }
                      20%,
                      40%,
                      60%,
                      80% {
                        transform: translateX(8%);
                      }
                    }
                    .locked {
                      animation: locked 1.1s;
                    }
                  </style>
                  <path id="lock" class="${state}" d="M8.2 22.6h2.4v-7.2C10.6 7.5 17.1 1 25 1s14.4 6.4 14.4 14.4v7.2h2.4V49H8.2m26.4-26.4v-7.2c0-5.3-4.3-9.6-9.6-9.6s-9.6 4.3-9.6 9.6v7.2"/>
                </svg>
              `;
            }
          }
        ]]]
    styles:
      custom_fields:
        circle:
          - width: 45%
          - fill: var(--state-icon-color)
          - margin: 1% 2% 0 0
          - justify-self: end
          - opacity: 1
          - display: grid

  #################################################
  #                                               #
  #                    LAUNDRY                    #
  #                                               #
  #################################################

  laundry:
    show_icon: false
    show_name: false
    show_state: true
    tap_action:
      services: >
        [[[
          hass.callService('timer', 'cancel', {
            entity_id: entity.entity_id
          });
          hass.callService('timer', 'start', {
            entity_id: entity.entity_id
          });
        ]]]
    hold_action:
      services: >
        [[[
          hass.callService('timer', 'cancel', {
            entity_id: entity.entity_id
          });
          hass.callService('input_boolean', 'turn_off', {
            entity_id: 'input_boolean.laundry_display'
          });
        ]]]
    styles:
      card:
        - background: '#202a2f30'
        - border-radius: 0.7vw
        - border: '0.2vw solid #292c2e'
      state:
        - font-size: 2.7vw
        - font-family: var(--primary-font-family)
        - opacity: 0.65
        - padding: 0.55vw 1.2vw 0.5vw 1.2vw

  #################################################
  #                                               #
  #                 POPUP BUTTONS                 #
  #                                               #
  #################################################

  icon_name:
    size: 1.4em
    color: '#9da0a2'
    styles:
      grid:
        - grid-template-areas: '"i n"'
        - grid-column-gap: 0.3em
      name:
        - font-size: 1.06em
        - letter-spacing: 0.015em
      card:
        - color: '#9da0a2'
        - border-radius: 0.6em
        - padding: 1em 1.4em 1em 1.2em
        - width: max-content
        - font-size: 1.06em
        - font-weight: 500
        - letter-spacing: 0.015em
        - background: '#FFFFFF10'

  icon_only:
    show_name: false
    color: '#9da0a2'
    styles:
      card:
        - color: '#9da0a2'
        - border-radius: 0.6em
        - width: 4em
        - height: 3.7em
        #- background: '#FFFFFF10'


  #################################################
  #                                               #
  #                     ICONS                     #
  #                                               #
  #################################################

  icon_ai:
    styles:
      custom_fields:
        icon:
          - width: 80%
          #- margin-left: -5%
          - margin-top: -10%
          - fill: >
              [[[
                return variables.state === 'on' ? '#616161' : '#9da0a2';
              ]]]
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M20.664 7.805a1.821 1.821 0 0 0-1.713 1.92 1.821 1.821 0 1 0 1.713-1.92zm12.308 1.021a3.301 3.301 0 0 0-5.942 2.526c-.761 1.108-1.809 1.776-3.053 2.136l-.017.009a2.539 2.539 0 0 0-1.159-.208 2.548 2.548 0 1 0 2.681 2.396v-.009c.8-1.259 1.845-1.932 3.062-2.154a3.301 3.301 0 0 0 4.429-4.697zm-18.605 1.661a3.323 3.323 0 0 0-3.131 3.503 3.323 3.323 0 1 0 3.131-3.503zm23.908 1.963a2.548 2.548 0 0 0-2.405 2.69l.009.035a6.871 6.871 0 0 1-3.339 2.301l-.017.009a3.242 3.242 0 0 0-1.86-.458 3.258 3.258 0 1 0 3.382 2.621c.855-1.163 1.941-1.974 3.33-2.301l.017-.017a2.548 2.548 0 1 0 .882-4.878zM6.807 14.82a2.743 2.743 0 0 0-2.586 2.898 2.743 2.743 0 1 0 2.586-2.898zm37.262 2.777a1.821 1.821 0 0 0-1.713 1.929 1.821 1.821 0 1 0 1.713-1.929zm-24.669 2.95a3.55 3.55 0 0 0 4.031 5.691l.035.026a11.827 11.827 0 0 1 3.624 3.192 3.517 3.517 0 0 0 3.391 4.991l.346-.035a10.104 10.104 0 0 1 1.739 3.572 2.861 2.861 0 1 0 2.162-1.124 9.387 9.387 0 0 1-1.963-3.434 3.521 3.521 0 0 0 .813-3.711c1.309-1.437 2.788-2.666 4.55-3.538l.017-.017a2.663 2.663 0 1 0-1.73-2.353 2.707 2.707 0 0 0 .035.294 12.703 12.703 0 0 1-4.316 3.849 3.52 3.52 0 0 0-3.477-.13c-1.394-.947-2.554-2.079-3.373-3.494l-.017-.017a3.55 3.55 0 0 0-5.864-3.763zm-8.978 1.444a3.299 3.299 0 0 0 3.443 5.458c1.357.712 2.421 1.659 2.932 3.027v.017a2.964 2.964 0 1 0 2.638-1.998 2.963 2.963 0 0 0-.709.13l-.043-.026a6.146 6.146 0 0 1-2.915-2.993 3.299 3.299 0 0 0-5.345-3.616zM4.8 23.167a2.743 2.743 0 0 0-2.586 2.898A2.743 2.743 0 1 0 4.8 23.167zm40.904 1.289a2.047 2.047 0 0 0-2.033 2.015l-.017.009c-.673 1.447-1.973 2.481-3.806 3.157l-.017.017a2.517 2.517 0 0 0-.951-.121 2.527 2.527 0 1 0 2.673 2.379c-.004-.067-.017-.133-.026-.199l.009-.009a8.182 8.182 0 0 1 3.832-3.174l.009-.009a2.076 2.076 0 0 0 .458.026 2.047 2.047 0 0 0-.13-4.091zm-34.036 4.956a1.821 1.821 0 0 0-1.713 1.92 1.821 1.821 0 1 0 1.713-1.92z"/>
        </svg>

  icon_plex:
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M7.7.3h34.6c4.1 0 7.4 3.3 7.4 7.4v34.6c0 4.1-3.3 7.4-7.4 7.4H7.7c-4.1 0-7.4-3.3-7.4-7.4V7.7C.3 3.6 3.6.3 7.7.3z" fill="#282a2d"/>
          <path d="M25,7.1H14.6L25,25L14.6,42.9H25L35.4,25L25,7.1z" fill="#e5a00d"/>
        </svg>

  icon_plex_box:
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M27.5.301L11 .4c-.5 0-.9 0-1.4.1-1.8.3-3.399 1.099-4.799 2.199C1.901 4.999.5 7.9.4 11.5v26.699l.299 3C1.399 43.799 3 45.8 5 47.4c1.9 1.4 4.1 2.199 6.5 2.199l13.699.1 13.4-.199c.7 0 1.3-.099 1.9-.199 2.8-.6 5.101-2.2 6.801-4.4 1.3-1.7 2.099-3.7 2.199-5.9l.1-6.699-.1-20.5-.199-2.4c-.5-2.7-2.101-4.9-4.201-6.6C43.2 1.201 41 .4 38.4.4l-10.9-.1zM15.24 9h9.287L34.76 25 24.527 41H15.24l10.238-16L15.24 9z"/>
        </svg>

  icon_plex_service:
    styles:
      custom_fields:
        icon:
          - width: 75%
          #- margin-left: 1%
          #- margin-top: -5%
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path fill="#9da0a2" d="M27.5.301L11 .4c-.5 0-.9 0-1.4.1-1.8.3-3.399 1.099-4.799 2.199C1.901 4.999.5 7.9.4 11.5v26.699l.299 3C1.399 43.799 3 45.8 5 47.4c1.9 1.4 4.1 2.199 6.5 2.199l13.699.1 13.4-.199c.7 0 1.3-.099 1.9-.199 2.8-.6 5.101-2.2 6.801-4.4 1.3-1.7 2.099-3.7 2.199-5.9l.1-6.699-.1-20.5-.199-2.4c-.5-2.7-2.101-4.9-4.201-6.6C43.2 1.201 41 .4 38.4.4l-10.9-.1zM15.24 9h9.287L34.76 25 24.527 41H15.24l10.238-16L15.24 9z"/>
        </svg>

  icon_apple_tv:
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M25.2 49.7l-13.7-.1c-2.4 0-4.6-.8-6.5-2.2-2-1.6-3.6-3.6-4.3-6.2-.2-1-.2-1.9-.3-3V11.5C.5 7.9 1.9 5 4.8 2.7 6.2 1.6 7.8.8 9.6.5c.5-.1.9-.1 1.4-.1L27.5.3l10.9.1c2.6 0 4.8.8 6.7 2.4 2.1 1.7 3.7 3.9 4.2 6.6l.2 2.4.1 20.5-.1 6.7c-.1 2.2-.9 4.2-2.2 5.9-1.7 2.2-4 3.8-6.8 4.4-.6.1-1.2.2-1.9.2-.1.1-13.4.2-13.4.2zm-4-27.8c-.9-1.2-2.2-1.6-3.7-1.2-.4.1-.8.2-1.2.4-.3.1-.6.1-.8 0-.4-.1-.8-.3-1.2-.4-.3-.1-.7-.1-1-.1-1.5.2-2.4 1.1-3 2.6-.4 1.1-.3 2.2 0 3.5.4 1.5 1 2.9 2.1 4 .5.6 1.2.9 2 .6 1.1-.5 2.2-.5 3.4 0 .8.3 1.5 0 2.1-.6.7-.8 1.1-1.8 1.6-2.8v-.2c-1-.6-1.7-1.4-1.8-2.7-.2-1.4.5-2.4 1.5-3.1zm9.9-1.4c.1.2.1.3.1.4l3.6 9.5c.1.3.3.4.6.4h.7c.6 0 .6 0 .9-.6l3.7-9.4c.1-.1.1-.3.2-.5H39l-2.9 8.3-3.1-8.3-1.9.2zM27.3 18l-1.3.4c-.5.2-.5.2-.6.7v1.4h-1.6l.1 1.4h1.5v5c0 .7.1 1.4.2 2.1.1.5.3 1 .8 1.4.8.6 2.6.7 3.5.2l-.1-1.2h-1.3c-.5 0-.9-.3-1-.8-.1-.3-.2-.6-.2-1v-5.8H30c0-.5.1-1 0-1.4h-2.7V18zm-8.8-.9c-1.9.3-3 2-2.7 3.2 1.4.2 2.9-1.7 2.7-3.2z"/>
        </svg>

  icon_nvidia_shield:
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M19.317 9.631v4.237l.819-.05c10.458-.359 17.287 8.576 17.287 8.576s-7.831 9.53-15.984 9.53c-.71 0-1.435-.066-2.123-.183v-2.153c.71.234 1.479.352 2.24.352 5.716 0 11.037-7.391 11.037-7.391s-4.934-6.718-12.457-6.477c-.272 0-.537.021-.802.029v-2.233c-9.224.746-17.194 8.546-17.194 8.546s4.511 13.056 17.177 14.243v-2.37c.571.066 1.186.117 1.757.117 7.604 0 13.1-3.879 18.421-8.461.886.71 4.494 2.423 5.24 3.169-5.057 4.237-16.841 7.642-23.522 7.642a17.86 17.86 0 0 1-1.895-.096v3.711H47.86V9.631zm0 6.478v2.743c.505-.044 1.017-.088 1.529-.066 4.808 0 7.677 3.748 7.677 3.748l-3.915 3.293c-1.749-2.935-2.364-4.231-5.292-4.583v8.342c-3.951-1.339-5.256-5.969-5.256-5.969s2.306-2.746 5.239-2.39h.017v-2.374c-5.596.61-8.97 4.341-8.97 4.341s1.95 7.308 8.97 8.562v2.526C10.026 33.13 6.854 22.889 6.854 22.889s4.149-6.128 12.463-6.78z"/>
        </svg>

  icon_sonos:
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M27.5.301L11 .4c-.5 0-.9 0-1.4.1-1.8.3-3.399 1.099-4.799 2.199C1.901 4.999.5 7.9.4 11.5v26.699l.299 3C1.399 43.799 3 45.8 5 47.4c1.9 1.4 4.1 2.199 6.5 2.199l13.699.1 13.4-.199c.7 0 1.3-.099 1.9-.199 2.8-.6 5.101-2.2 6.801-4.4 1.3-1.7 2.099-3.7 2.199-5.9l.1-6.699-.1-20.5-.199-2.4c-.5-2.7-2.101-4.9-4.201-6.6C43.2 1.201 41 .4 38.4.4l-10.9-.1zM15.021 20.793v.002A4.145 4.145 0 0 1 19.229 25a4.145 4.145 0 0 1-4.207 4.207c-2.266 0-4.205-1.942-4.205-4.207a4.145 4.145 0 0 1 4.205-4.207zm-8.736.002a3.7 3.7 0 0 1 2.588 1.076l.107.109-1.186.863-.107-.107c-.216-.108-.754-.434-1.402-.434-.755 0-1.295.433-1.295.865 0 .214-.001.646 1.51 1.078.753.214 1.294.43 1.727.754.541.539.865 1.078.865 1.727s-.325 1.294-.865 1.727-1.294.646-2.051.646c-1.618 0-2.588-1.078-2.588-1.078l-.107-.107 1.186-.863.107.107c.216.106.755.432 1.402.432.755 0 1.295-.433 1.295-.863 0-.216.001-.645-1.51-1.076-.755-.216-1.292-.433-1.725-.758-.539-.431-.863-1.076-.863-1.725s.323-1.294.863-1.727 1.294-.646 2.049-.646zm28.693 0A4.212 4.212 0 0 1 39.184 25a4.145 4.145 0 0 1-4.205 4.207A4.212 4.212 0 0 1 30.771 25a4.145 4.145 0 0 1 4.207-4.205zm-13.268.107l5.07 4.748v-4.426h1.508v7.98l-5.07-4.744v4.424h-1.508v-7.982zm22.113 0a3.7 3.7 0 0 1 2.588 1.078l.107.107-1.186.863-.107-.107c-.216-.106-.755-.432-1.402-.432-.755 0-1.295.431-1.295.861 0 .216-.001.647 1.51 1.078.755.216 1.292.433 1.725.758.539.431.863 1.076.863 1.725s-.324 1.296-.863 1.727-1.294.646-2.049.646c-1.618 0-2.588-1.078-2.588-1.078l-.107-.107 1.186-.863h.107c.216.106.754.432 1.402.432.755 0 1.295-.433 1.295-.863 0-.216.001-.645-1.51-1.076-.753-.216-1.294-.434-1.727-.758h-.002c-.648-.431-.97-.971-.863-1.619 0-.647.325-1.292.865-1.725s1.294-.646 2.051-.646zm-28.803 1.402c-1.51 0-2.695 1.185-2.695 2.695a2.671 2.671 0 0 0 2.695 2.697A2.67 2.67 0 0 0 17.719 25a2.67 2.67 0 0 0-2.697-2.695zm19.957 0A2.67 2.67 0 0 0 32.281 25a2.671 2.671 0 0 0 2.697 2.697c1.402 0 2.695-1.187 2.695-2.697s-1.185-2.695-2.695-2.695z"/>
        </svg>

  icon_sonos_arc:
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M9.924 4.252c-.277-.001-1.11.065-2.031.196-.999.143-1.635.662-1.635.662s-.753.454-1.22 1.778.389 2.881.389 2.881l26.998 32.879c-.154-.619-.285-1.49-.094-2.33.345-1.515 1.417-2.509 1.417-2.509s.942-1.135 3.104-1.667c0 0 2.313-.412 4.408-.301.392.021 1.02.22 1.348.324L12.902 5.072c-.104-.247-1.064-.701-1.583-.766s-1.142-.039-1.337-.052l-.058-.002zm31.169 32.251h-.055c-2.362.026-3.919.337-3.919.337-1.899.457-2.726 1.433-2.726 1.433s-.973.899-1.276 2.202-.055 2.303-.055 2.303.229.863.505 1.257.578.661 1.184 1.129 1.918.606 2.689.578 2.184-.193 2.45-.202a11.17 11.17 0 0 0 2.248-.514c.78-.284 1.6-1.14 1.6-1.14s1.064-.895 1.324-2.803-.805-3.115-.805-3.115-.843-1.469-3.163-1.467z"/>
        </svg>

  icon_spotify:
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M25 .3C11.4.3.3 11.4.3 25S11.4 49.7 25 49.7 49.7 38.6 49.7 25 38.6.3 25 .3zm11.3 35.6c-.4.7-1.4 1-2.1.5-5.8-3.5-13.1-4.3-21.7-2.4-.8.2-1.7-.3-1.8-1.2-.2-.8.3-1.7 1.2-1.8 9.4-2.2 17.5-1.2 24 2.8.6.5.9 1.4.4 2.1zm3.1-6.7c-.6.9-1.7 1.2-2.6.6-6.6-4.1-16.8-5.3-24.6-2.9a1.96 1.96 0 0 1-2.4-1.3 1.96 1.96 0 0 1 1.3-2.4c9-2.7 20.1-1.4 27.7 3.3.8.6 1.1 1.8.6 2.7h0zm.2-7c-8-4.7-21.1-5.2-28.7-2.9-1.2.4-2.5-.3-2.9-1.5s.3-2.5 1.5-2.9c8.7-2.6 23.2-2.1 32.4 3.3 1.1.7 1.5 2.1.8 3.2-.6 1.1-2 1.4-3.1.8h0z"/>
        </svg>

  icon_denon:
    styles:
      card:
        - border-radius: 0.6em
        - width: max-content
        - height: 8em
      custom_fields:
        icon:
          - width: 50%
          #- margin-left: -15%
          #- margin-top: -15%
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M19.534 23.384l7.041 7.015V19.817h-1.616v6.597l-7.055-6.853v10.597h1.616v-6.705zm-7.715 2.09v3.069h.003 4.143v1.614h-5.762v-10.34h5.789v1.613l-4.174.001v2.428l3.231-.001v1.613h-3.231zm30.99-2.066l-.007-.04 7.092 6.99V19.817h-1.615v6.678l-.01-.031-7.098-6.91v10.602h1.639z"/>
          <path fill="#020202" d="M.107 19.817v10.339H3.54s4.847-.403 4.847-5.21c0-4.954-4.86-5.13-4.86-5.13H.107zm1.615 8.806v-7.311h1.427s3.642-.068 3.642 3.696c0 3.437-3.305 3.615-3.305 3.615z"/>
          <path d="M29.961 25.041c0-2.166 1.739-3.922 3.884-3.922s3.965 1.499 3.965 3.922c0 2.166-1.82 3.922-3.965 3.922s-3.884-1.755-3.884-3.922m3.884 5.478c3.177.041 5.64-2.74 5.64-5.29 0-2.746-1.979-5.748-5.56-5.748-2.666 0-5.613 2.167-5.613 5.56 0 2.55 1.946 5.432 5.533 5.479"/>
        </svg>


  icon_denon_pma:
    styles:
      custom_fields:
        icon:
          - width: 90%
          - margin-top: -15%
          - fill: >
              [[[
                return variables.state === 'on' ? '#2a2a2a' : '#9da0a2';
              ]]]
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M2.158 17.725v9.26 9.258H3.43h1.271v.484c0 .25.016.296.127.383l-.002.002c.125.097.171.1 2.666.1h2.537l.119-.119c.097-.097.117-.165.117-.383v-.467h14.727 14.729v.471c0 .219.022.286.119.383l.117.119h2.547 2.547l.119-.119c.097-.097.117-.165.117-.383v-.471h1.271 1.27v-9.258-9.26H24.994zm31.023 2.646a1.15 1.15 0 0 1 1.148 1.148 1.15 1.15 0 0 1-1.148 1.148 1.15 1.15 0 0 1-1.146-1.148 1.15 1.15 0 0 1 1.146-1.148zm-8.213.664c3.339 0 6.045 2.706 6.045 6.045s-2.706 6.045-6.045 6.045-6.045-2.706-6.045-6.045 2.706-6.045 6.045-6.045zM7.275 25.363c2.229 0 2.229 3.344 0 3.344s-2.229-3.344 0-3.344zm34.852.254a1.52 1.52 0 0 1 .596.111 1.72 1.72 0 0 1 .748.729c.16.307.16.933.002 1.254a1.57 1.57 0 0 1-.697.697v-.002a1.73 1.73 0 0 1-1.174.082 1.8 1.8 0 0 1-.83-.797c-.155-.351-.154-.873 0-1.223a1.61 1.61 0 0 1 .76-.742 1.51 1.51 0 0 1 .596-.109zm-8.986 6.188c1.467 0 1.467 2.2 0 2.2s-1.467-2.2 0-2.2z"/>
        </svg>


  icon_blinds:
    styles:
      custom_fields:
        icon:
          - width: 80%
          - margin-top: -4%
    custom_fields:
      icon: >
        [[[
          if (states[entity.entity_id].attributes.current_position === 100) {
          return `
            <svg viewBox="0 0 50 50" fill="#9da0a2">
              <path d="M4 3.547c-.259 0-.474.188-.474.42v3.557H46.44V3.968c0-.232-.21-.42-.474-.42zM3.826 8.37l2.149.629h38.052l2.19-.629zm2.31.819l-2.413.622H46.27l-2.413-.622zm-2.44.813l2.297.591h38.011l2.297-.591zm40.259.781H6.038l-2.315.597H46.27zM3.7 11.57l2.293.591h38.006l2.293-.591zm2.338.781l-2.467.637c-.112.028-.13.068-.054.1s.241.054.424.054h42.114c.179 0 .344-.021.425-.054s.058-.072-.054-.1l-2.472-.637zm-.032 1.73v31.95a.42.42 0 0 0 .42.42h37.225a.42.42 0 0 0 .42-.42v-31.95h-4.112v28.335H10.038V14.082z"/>
            </svg>
          `;
          }

          return states[entity.entity_id].attributes.current_position === 0 ? `
            <svg viewBox="0 0 50 50" fill="#9da0a2">
              <path d="M4.033 3.547c-.259 0-.474.188-.474.42v3.557h42.914V3.968c0-.232-.21-.42-.474-.42zM3.86 8.37l2.31 3.62-2.417 3.127 2.342 3.455-2.315 2.641 2.342 3.455-2.315 2.641h-.058l2.342 3.455-2.315 2.641h-.058l2.342 3.455-2.315 2.641H3.7l2.338 3.455-2.467 2.816c-.112.125-.13.3-.054.442s.241.237.424.237h42.114c.179 0 .344-.094.425-.237a.38.38 0 0 0-.054-.442l-2.472-2.816 2.337-3.455-2.315-2.642 2.346-3.455-2.315-2.642 2.346-3.455-2.315-2.642 2.346-3.455h-.058l-2.315-2.642 2.346-3.455h0 0 0L43.89 11.99l2.361-3.62z"/>
            </svg>
          ` : `
            <svg viewBox="0 0 50 50" fill="#9da0a2">
              <path d="M3.723 14.738l2.413-2.749h37.721l2.413 2.749zm-.027.845l2.297 2.615h38.011l2.297-2.615zm.004 6.936l2.293 2.615h38.007l2.293-2.615zM46.44 7.525V3.968c0-.232-.21-.42-.474-.42H4c-.259 0-.474.188-.474.42v3.557zm-2.485 18.449H6.038L3.571 28.79c-.112.125-.13.3-.054.442s.241.237.424.237h42.114c.179 0 .344-.094.425-.237a.38.38 0 0 0-.054-.442zM6.038 19.038l-2.315 2.641h42.548l-2.315-2.641zm-.063-7.888h38.052l2.19-2.78H3.826zm33.984 20.693v10.575H10.038V31.843H6.006v14.19a.42.42 0 0 0 .42.42h37.225a.42.42 0 0 0 .42-.42v-14.19z"/>
            </svg>
          `;
        ]]]


  icon_coat_stand:
    styles:
      custom_fields:
        icon:
          - width: 87%
          - margin-left: -20%
          - margin-top: -5%
          - fill: >
              [[[
                return variables.state === 'on' ? '#616161' : '#9da0a2';
              ]]]
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="m 23.042041,1.4594809 c -0.145115,0 -0.269199,0.1324962 -0.269199,0.2944361 V 7.213605 L 20.484652,6.067407 C 20.244897,5.9475295 20.015658,5.9243952 19.967286,6.0211385 l -0.0652,0.1240838 c -0.05047,0.096743 0.10095,0.273405 0.340705,0.3932826 l 2.530048,1.2723849 V 9.7520655 L 22.110361,8.9907377 c -0.08623,-0.098847 -0.241858,-0.1114652 -0.347014,-0.03365 l -0.130393,0.098846 c -0.105156,0.079918 -0.119878,0.2208272 -0.03365,0.3217767 l 1.12096,1.2976226 c 0.01472,0.01682 0.03575,0.02734 0.05258,0.03996 v 6.017013 l -2.018991,-1.11465 c -0.233446,-0.12829 -0.471098,-0.155631 -0.523675,-0.05889 l -0.0652,0.117774 c -0.05258,0.09464 0.09464,0.277611 0.328086,0.4059 l 2.28188,1.257664 v 21.840855 l -4.851887,3.409151 c -0.180868,0.12829 -0.250271,0.340704 -0.151425,0.485819 l 0.235549,0.340705 c 0.10095,0.143012 0.33019,0.159837 0.511057,0.03365 l 4.34714,-3.045311 -0.09254,0.325983 -1.934866,7.211583 c -0.05678,0.214518 0.03365,0.420623 0.204002,0.464788 l 0.45217,0.124084 c 0.168249,0.04627 0.355426,-0.08833 0.412211,-0.300745 l 1.697214,-6.338791 0.498438,-1.703523 0.117775,0.07151 7.230511,4.391305 c 0.18928,0.115671 0.382767,0.149321 0.426932,0.07782 l 0.386974,-0.64145 c 0.04416,-0.07151 -0.07361,-0.218724 -0.26289,-0.334395 L 24.327045,39.090527 24.221889,39.03164 V 23.420213 l 2.201962,-1.37754 c 0.227136,-0.140909 0.365942,-0.332292 0.309158,-0.426933 l -0.07151,-0.117774 c -0.05678,-0.09254 -0.283921,-0.05678 -0.511057,0.08623 l -1.926454,1.207188 v -2.51112 l 1.442737,-0.923268 c 0.111465,-0.07151 0.149321,-0.225033 0.08623,-0.340704 l -0.07781,-0.145115 c -0.06309,-0.115672 -0.204003,-0.149322 -0.315468,-0.07782 l -1.133579,0.727678 v -5.447069 l 2.189343,-1.369128 c 0.227137,-0.140909 0.365942,-0.332293 0.309158,-0.426933 l -0.07151,-0.111465 c -0.05678,-0.09254 -0.28392,-0.05678 -0.511057,0.08623 l -1.913835,1.198776 V 4.3575741 l 1.015805,-1.1335793 c 0.08833,-0.098846 0.08623,-0.2523739 -0.0063,-0.3470141 L 25.119919,2.7592063 c -0.09254,-0.09464 -0.233446,-0.092537 -0.321777,0.00631 L 24.228198,3.4006565 V 1.753917 c 0,-0.1619399 -0.115671,-0.2944361 -0.262889,-0.2944361 z"/>
        </svg>


  # STAIRS
  icon_staircase:
    styles:
      custom_fields:
        icon:
          - width: 75%
          - margin-left: -2%
          - margin-top: -2%
          - fill: >
              [[[
                return variables.state === 'on' ? '#616161' : '#9da0a2';
              ]]]
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M5.698 46.057h27.35L3.943 16.953v27.35c0 .97.784 1.755 1.755 1.755zm7.019-42.114H3.943v8.047L38.01 46.057h8.047v-8.774c0-.97-.784-1.755-1.755-1.755h-8.774v-8.774c0-.97-.784-1.755-1.755-1.755H25v-8.774c0-.97-.784-1.755-1.755-1.755h-8.774V5.698c0-.97-.784-1.755-1.755-1.755z"/>
        </svg>

  icon_stairs_up:
    styles:
      custom_fields:
        icon:
          - width: 75%
          - margin-left: -2%
          - margin-top: -2%
          - fill: >
              [[[
                return variables.state === 'on' ? '#616161' : '#9da0a2';
              ]]]
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M 3.9433594 3.9433594 L 3.9433594 11.990234 L 38.009766 46.056641 L 46.056641 46.056641 L 46.056641 37.283203 C 46.056641 36.313203 45.273734 35.527344 44.302734 35.527344 L 35.527344 35.527344 L 35.527344 26.753906 C 35.527344 25.783906 34.744438 24.998047 33.773438 24.998047 L 25 24.998047 L 25 16.224609 C 25 15.254609 24.215141 14.470703 23.244141 14.470703 L 14.470703 14.470703 L 14.470703 5.6972656 C 14.470703 4.7272656 13.687797 3.9433594 12.716797 3.9433594 L 3.9433594 3.9433594 z M 3.9433594 16.953125 L 3.9433594 44.302734 C 3.9433594 45.272734 4.7262656 46.058594 5.6972656 46.058594 L 5.6972656 46.056641 L 33.048828 46.056641 L 3.9433594 16.953125 z M 8.9863281 34.429688 L 14.929688 34.429688 C 15.217099 34.429688 15.450748 34.661383 15.449219 34.947266 L 15.449219 35.626953 C 15.449218 35.917422 15.208404 36.150611 14.917969 36.144531 L 11.320312 36.058594 L 15.714844 40.451172 C 15.918173 40.654501 15.918172 40.982219 15.714844 41.185547 L 15.226562 41.675781 C 15.023234 41.879109 14.695518 41.87911 14.492188 41.675781 L 10.097656 37.28125 L 10.185547 40.878906 C 10.193147 41.170905 9.9580476 41.409766 9.6660156 41.408203 L 8.9882812 41.408203 C 8.7008702 41.408202 8.4691751 41.176508 8.4707031 40.890625 L 8.46875 34.947266 C 8.468749 34.659854 8.7004441 34.428157 8.9863281 34.429688 z"/>
        </svg>

  icon_stairs_down:
    styles:
      custom_fields:
        icon:
          - width: 75%
          - margin-left: -2%
          - margin-top: -2%
          - fill: >
              [[[
                return variables.state === 'on' ? '#616161' : '#9da0a2';
              ]]]
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M 3.9433594 3.9433594 L 3.9433594 11.990234 L 38.009766 46.056641 L 46.056641 46.056641 L 46.056641 37.283203 C 46.056641 36.313203 45.273734 35.527344 44.302734 35.527344 L 35.527344 35.527344 L 35.527344 26.753906 C 35.527344 25.783906 34.744438 24.998047 33.773438 24.998047 L 25 24.998047 L 25 16.224609 C 25 15.254609 24.215141 14.470703 23.244141 14.470703 L 14.470703 14.470703 L 14.470703 5.6972656 C 14.470703 4.7272656 13.687797 3.9433594 12.716797 3.9433594 L 3.9433594 3.9433594 z M 3.9433594 16.953125 L 3.9433594 44.302734 C 3.9433594 45.272734 4.7262656 46.058594 5.6972656 46.058594 L 5.6972656 46.056641 L 33.048828 46.056641 L 3.9433594 16.953125 z M 9.4765625 34.429688 C 9.6091847 34.429688 9.7420854 34.480367 9.84375 34.582031 L 14.238281 38.976562 L 14.150391 35.378906 C 14.142791 35.086907 14.375937 34.846093 14.667969 34.847656 L 15.347656 34.847656 C 15.635067 34.847657 15.866762 35.081305 15.865234 35.367188 L 15.867188 41.308594 C 15.867188 41.596006 15.635493 41.829655 15.349609 41.828125 L 9.4042969 41.828125 C 9.1168847 41.828125 8.8851898 41.594477 8.8867188 41.308594 L 8.8867188 40.630859 C 8.8867194 40.34039 9.1275339 40.105248 9.4179688 40.111328 L 13.013672 40.199219 L 8.6210938 35.804688 C 8.4177644 35.601359 8.4177652 35.275594 8.6210938 35.072266 L 9.109375 34.582031 C 9.2110393 34.480367 9.3439403 34.429687 9.4765625 34.429688 z"/>
        </svg>


  icon_superman:
    styles:
      custom_fields:
        icon:
          - width: 87%
          - margin-left: -1%
          - margin-top: -5%
          - fill: >
              [[[
                return variables.state === 'on' ? '#616161' : '#9da0a2';
              ]]]
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes backlight {
                0% {
                  transform: scale(0.5);
                }
                40% {
                  transform: scale(0.6);
                }
                49% {
                  transform: scale(0.7);
                }
                63% {
                  transform: scale(0.8);
                }
                77% {
                  transform: scale(0.9);
                }
                100% {
                  transform: scale(1);
                }
              }
              .backlight {
                animation: backlight 0.5s;
                transform-origin: center;
              }
            </style>
          `,
            paths = `
              <filter id="C" x="-.311" y="-.889" width="1.623" height="2.778" color-interpolation-filters="sRGB"><feGaussianBlur stdDeviation="2.834"/></filter></defs><path class="backlight" d="M11.314 16.44s2.137 3.063 3.426 3.269c3.211.512 11.607.881 16.692 1.771 3.696.647 5.691 1.767 5.691 1.767.844 2.432-.371 1.575-2.607 3.094l-18.822-2.135-5.001-1.267-1.588-2.167" fill="none" stroke="#f4da90" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" filter="url(#C)"/>
              <path class="symbol" fill="#a3a7a7" d="M20.368 10.351l-8.627.404-1.984.15-.688.418c-1.68 1.028-2.916 1.869-4.292 3.024C3.148 15.714.894 17.963.965 18.156c.052.131 2.357 3.165 3.057 4.02 1.071 1.305 1.878 2.188 3.381 3.686l5.123 4.771 3.428 2.818c1.395 1.104 3.226 2.4 6.105 4.316l2.958 1.925c.052 0 .352-.193 2.019-1.301l8.002-5.767 5.546-4.701c1.334-1.212 3.395-3.367 4.959-5.184l2.606-3.193c.751-.986.888-1.193.888-1.315 0-.254-2.292-2.663-3.592-3.785-1.827-1.568-2.85-2.282-4.766-3.329l-.545-.296-1.099-.099-4.179-.282c-2.029-.094-12.07-.145-14.488-.089zm12.069.912l5.94.301.85.047c.169 0 .174 0 .277.333.15.456.15 1.057.005 1.385-.127.282-.254.423-.493.545-.169.085-.243.079-1.004.055l-.848-.104-.971-.21-1.62-.502-1.197-.376a39.02 39.02 0 0 0-1.174-.352c-.935-.258-3.921-1.188-3.921-1.221 0-.023 2.184.023 4.156.099zm-20.127.554c-.009.014-.366.169-.794.352-1.155.498-2.395 1.24-3.212 1.925-.672.568-1.442 1.395-1.742 1.883-.338.545-.945 1.722-1.044 2.075-.13.588-.165.608-.207 1.068-.075.784-.021.948.054 1.455a14.1 14.1 0 0 0 .361 1.625c.023.085.019.089-.056.023-.183-.15-1.921-2.198-2.62-3.085l-.277-.348.484-.643a28.11 28.11 0 0 1 5.734-5.682l.831-.615.578-.019c1.108-.028 1.93-.033 1.911-.014zm11.322.545c1.977.061 2.526.122 4.931.568 1.601.296 3.184.639 3.992.864 1.39.39 2.775.869 3.804 1.315l.676.291c.798.333 2.31 1.155 3.268 1.775 1.465.944 2.658 1.836 3.569 2.658l1.16 1.08.244.254-.859.963c-.474.531-1.296 1.404-1.827 1.949-.949.977-.963.986-.996.845a9.19 9.19 0 0 0-.564-1.644c-.596-1.268-1.719-2.348-3.212-3.099-2.231-1.113-4.635-1.597-9.843-1.972-4.316-.31-8.495-.822-9.979-1.221-.526-.141-1.329-.413-1.686-.573a4.71 4.71 0 0 1-1.282-.902c-.301-.319-.39-.568-.357-.986.033-.446.333-.78 1.071-1.169.601-.324 1.324-.54 2.442-.733.878-.15 1.075-.169 2.371-.239 1.437-.075 1.334-.075 3.076-.023zm19.146 1.54c.718.615 1.503 1.32 1.747 1.564.69.686 1.719 1.954 2.442 3.01l.249.362-.183.23-.643.812-.479.601c-.028.038-.629-.479-.963-.826-.366-.385-1.47-1.747-1.836-2.268a12.76 12.76 0 0 1-1.362-2.771c-.164-.531-.376-1.831-.296-1.831a52.96 52.96 0 0 1 1.324 1.118zM10.873 26.637c2.949.676 4.236.855 7.57 1.057 1.263.075 6.311.526 7.701.681 2.287.263 4.02.686 5.189 1.259.643.319.949.587 1.033.902.108.394-.066.69-.648 1.118-.441.324-.7.446-1.423.657-1.432.427-2.155.526-4.137.559-2.742.047-4.597-.155-6.941-.751-.803-.207-2.202-.78-3.484-1.428a25.55 25.55 0 0 1-3.583-2.278c-.69-.535-2.231-1.963-2.118-1.963.019 0 .394.085.841.188zm13.182 7.438c2.226.235 2.93.249 4.827.099l1.23-.099.399-.028-.446.31a17.36 17.36 0 0 1-1.01.648l-.733.441c-.409.254-1.498.836-2.357 1.254l-.93.451-.996-.465c-1.305-.601-2.813-1.395-2.93-1.54-.094-.117-.07-.423.042-.629.122-.216.404-.399.7-.456.329-.066 1.517-.056 2.202.014z"/>
            `;
          if (variables.state === 'on' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50">
              ${style}
              ${paths}
            </svg>
          `;
          }

          return variables.state === 'on' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50">
              ${paths}
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              <path fill="#9da0a2" d="M20.368 10.351l-8.627.404-1.984.15-.688.418c-1.68 1.028-2.916 1.869-4.292 3.024C3.148 15.714.894 17.963.965 18.156c.052.131 2.357 3.165 3.057 4.02 1.071 1.305 1.878 2.188 3.381 3.686l5.123 4.771 3.428 2.818c1.395 1.104 3.226 2.4 6.105 4.316l2.958 1.925c.052 0 .352-.193 2.019-1.301l8.002-5.767 5.546-4.701c1.334-1.212 3.395-3.367 4.959-5.184l2.606-3.193c.751-.986.888-1.193.888-1.315 0-.254-2.292-2.663-3.592-3.785-1.827-1.568-2.85-2.282-4.766-3.329l-.545-.296-1.099-.099-4.179-.282c-2.029-.094-12.07-.145-14.488-.089zm12.069.912l5.94.301.85.047c.169 0 .174 0 .277.333.15.456.15 1.057.005 1.385-.127.282-.254.423-.493.545-.169.085-.243.079-1.004.055l-.848-.104-.971-.21-1.62-.502-1.197-.376a39.02 39.02 0 0 0-1.174-.352c-.935-.258-3.921-1.188-3.921-1.221 0-.023 2.184.023 4.156.099zm-20.127.554c-.009.014-.366.169-.794.352-1.155.498-2.395 1.24-3.212 1.925-.672.568-1.442 1.395-1.742 1.883-.338.545-.945 1.722-1.044 2.075-.13.588-.165.608-.207 1.068-.075.784-.021.948.054 1.455a14.1 14.1 0 0 0 .361 1.625c.023.085.019.089-.056.023-.183-.15-1.921-2.198-2.62-3.085l-.277-.348.484-.643a28.11 28.11 0 0 1 5.734-5.682l.831-.615.578-.019c1.108-.028 1.93-.033 1.911-.014zm11.322.545c1.977.061 2.526.122 4.931.568 1.601.296 3.184.639 3.992.864 1.39.39 2.775.869 3.804 1.315l.676.291c.798.333 2.31 1.155 3.268 1.775 1.465.944 2.658 1.836 3.569 2.658l1.16 1.08.244.254-.859.963c-.474.531-1.296 1.404-1.827 1.949-.949.977-.963.986-.996.845a9.19 9.19 0 0 0-.564-1.644c-.596-1.268-1.719-2.348-3.212-3.099-2.231-1.113-4.635-1.597-9.843-1.972-4.316-.31-8.495-.822-9.979-1.221-.526-.141-1.329-.413-1.686-.573a4.71 4.71 0 0 1-1.282-.902c-.301-.319-.39-.568-.357-.986.033-.446.333-.78 1.071-1.169.601-.324 1.324-.54 2.442-.733.878-.15 1.075-.169 2.371-.239 1.437-.075 1.334-.075 3.076-.023zm19.146 1.54c.718.615 1.503 1.32 1.747 1.564.69.686 1.719 1.954 2.442 3.01l.249.362-.183.23-.643.812-.479.601c-.028.038-.629-.479-.963-.826-.366-.385-1.47-1.747-1.836-2.268a12.76 12.76 0 0 1-1.362-2.771c-.164-.531-.376-1.831-.296-1.831a52.96 52.96 0 0 1 1.324 1.118zM10.873 26.637c2.949.676 4.236.855 7.57 1.057 1.263.075 6.311.526 7.701.681 2.287.263 4.02.686 5.189 1.259.643.319.949.587 1.033.902.108.394-.066.69-.648 1.118-.441.324-.7.446-1.423.657-1.432.427-2.155.526-4.137.559-2.742.047-4.597-.155-6.941-.751-.803-.207-2.202-.78-3.484-1.428a25.55 25.55 0 0 1-3.583-2.278c-.69-.535-2.231-1.963-2.118-1.963.019 0 .394.085.841.188zm13.182 7.438c2.226.235 2.93.249 4.827.099l1.23-.099.399-.028-.446.31a17.36 17.36 0 0 1-1.01.648l-.733.441c-.409.254-1.498.836-2.357 1.254l-.93.451-.996-.465c-1.305-.601-2.813-1.395-2.93-1.54-.094-.117-.07-.423.042-.629.122-.216.404-.399.7-.456.329-.066 1.517-.056 2.202.014z"/>
            </svg>
          `;
        ]]]


  icon_lg_tv:
    styles:
      custom_fields:
        icon:
          - width: 95%
          - margin-left: 1%
          - margin-top: -5%
    variables:
      tv_screen: ''
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes backlight {
                0% {
                  transform: scale(0.5);
                }
                40% {
                  transform: scale(0.6);
                }
                49% {
                  transform: scale(0.7);
                }
                63% {
                  transform: scale(0.8);
                }
                77% {
                  transform: scale(0.9);
                }
                100% {
                  transform: scale(1);
                }
              }
              .backlight {
                animation: backlight 0.5s;
                transform-origin: center;
              }
            </style>
          `,
            paths = `
              <path fill="#9da0a2" d="M.303 11.082c-.063 0-.113.05-.113.111v27.615c0 .062.051.109.113.109h49.395c.063 0 .113-.047.113-.109V11.193c0-.062-.051-.111-.113-.111zm25.098 4.18c.241-.008.44.186.439.428v.846c0 .231-.183.42-.414.426l-.697.02c-.74.02-1.173.082-1.85.262-2.563.682-4.673 2.67-5.52 5.205-.301.9-.414 1.595-.414 2.578 0 1.401.307 2.625.945 3.799a8.09 8.09 0 0 0 6.227 4.191 12.45 12.45 0 0 0 2.244-.068c3.091-.549 5.599-2.842 6.396-5.84.097-.365.178-.864.223-1.25H27.67c-.235-.001-.426-.191-.426-.426v-.406-.406c0-.235.191-.425.426-.426h6.639c.241-.001.436.198.428.439l-.021.66c-.054 1.704-.496 3.245-1.34 4.658-1.621 2.714-4.379 4.463-7.5 4.752a10.84 10.84 0 0 1-1.92-.016c-3.83-.419-7.042-3.023-8.232-6.674-.155-.476-.277-.997-.363-1.547-.118-.749-.129-2.074-.018-2.793.179-1.154.5-2.155 1.006-3.127 1.191-2.289 3.202-3.992 5.664-4.797.884-.289 1.732-.434 2.727-.467zm-.834 4.453h.848c.236 0 .426.192.426.428V28.6h1.795c.236 0 .426.192.426.428v.846c0 .236-.19.428-.426.428h-3.068c-.236 0-.426-.192-.426-.428v-9.73c0-.236.19-.428.426-.428zm-3.129.004c.958 0 1.734.777 1.734 1.734s-.777 1.734-1.734 1.734-1.734-.777-1.734-1.734.777-1.734 1.734-1.734z"/>
            `;
          if (variables.state === 'on' && states[variables.tv_screen].state === 'on' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50" >
              ${style}
              ${paths}
              <path fill="#ff0101" d="M25 13.861c-6.162 0-11.148 4.986-11.148 11.141A11.14 11.14 0 0 0 25 36.139c6.153 0 11.148-4.982 11.148-11.137A11.15 11.15 0 0 0 25 13.861zm.4 1.4c.241-.008.44.186.439.428v.846c0 .231-.183.42-.414.426l-.697.02c-.74.02-1.173.082-1.85.262-2.563.682-4.673 2.67-5.52 5.205-.301.9-.414 1.595-.414 2.578 0 1.401.307 2.625.945 3.799a8.09 8.09 0 0 0 6.227 4.191 12.45 12.45 0 0 0 2.244-.07c3.091-.549 5.599-2.84 6.396-5.838.097-.365.178-.864.223-1.25H27.67c-.235-.001-.426-.191-.426-.426v-.812c0-.235.191-.425.426-.426h6.639c.241-.001.436.198.428.439l-.021.66c-.054 1.704-.496 3.245-1.34 4.658-1.621 2.714-4.379 4.463-7.5 4.752a10.84 10.84 0 0 1-1.92-.016c-3.83-.419-7.042-3.023-8.232-6.674a10.04 10.04 0 0 1-.363-1.547c-.118-.749-.129-2.074-.018-2.793.179-1.154.5-2.155 1.006-3.127 1.191-2.289 3.202-3.992 5.664-4.797.884-.289 1.732-.434 2.727-.467zm-.834 4.453h.848c.236 0 .426.192.426.428V28.6h1.795c.236 0 .426.192.426.428v.846c0 .236-.19.428-.426.428h-3.068c-.236 0-.426-.192-.426-.428v-9.73c0-.236.19-.428.426-.428zm-3.129.004c.958 0 1.734.777 1.734 1.734s-.777 1.734-1.734 1.734-1.734-.777-1.734-1.734.777-1.734 1.734-1.734z"/>
            </svg>
          `;
          }
          return variables.state === 'on' && states[variables.tv_screen].state === 'on' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50">
              ${paths}
              <path fill="#ff0101" d="M25 13.861c-6.162 0-11.148 4.986-11.148 11.141A11.14 11.14 0 0 0 25 36.139c6.153 0 11.148-4.982 11.148-11.137A11.15 11.15 0 0 0 25 13.861zm.4 1.4c.241-.008.44.186.439.428v.846c0 .231-.183.42-.414.426l-.697.02c-.74.02-1.173.082-1.85.262-2.563.682-4.673 2.67-5.52 5.205-.301.9-.414 1.595-.414 2.578 0 1.401.307 2.625.945 3.799a8.09 8.09 0 0 0 6.227 4.191 12.45 12.45 0 0 0 2.244-.07c3.091-.549 5.599-2.84 6.396-5.838.097-.365.178-.864.223-1.25H27.67c-.235-.001-.426-.191-.426-.426v-.812c0-.235.191-.425.426-.426h6.639c.241-.001.436.198.428.439l-.021.66c-.054 1.704-.496 3.245-1.34 4.658-1.621 2.714-4.379 4.463-7.5 4.752a10.84 10.84 0 0 1-1.92-.016c-3.83-.419-7.042-3.023-8.232-6.674a10.04 10.04 0 0 1-.363-1.547c-.118-.749-.129-2.074-.018-2.793.179-1.154.5-2.155 1.006-3.127 1.191-2.289 3.202-3.992 5.664-4.797.884-.289 1.732-.434 2.727-.467zm-.834 4.453h.848c.236 0 .426.192.426.428V28.6h1.795c.236 0 .426.192.426.428v.846c0 .236-.19.428-.426.428h-3.068c-.236 0-.426-.192-.426-.428v-9.73c0-.236.19-.428.426-.428zm-3.129.004c.958 0 1.734.777 1.734 1.734s-.777 1.734-1.734 1.734-1.734-.777-1.734-1.734.777-1.734 1.734-1.734z"/>
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              ${paths}
            </svg>
          `;
        ]]]


  icon_receiver:
    styles:
      custom_fields:
        icon:
          - width: 95%
          - margin-left: 1%
          - margin-top: -15%
          - fill: >
              [[[
                return variables.state === 'on' ? '#2a2a2a' : '#9da0a2';
              ]]]
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M1.871 16.521c-.138 0-.248.111-.248.25v15.363a.25.25 0 0 0 .248.252h2.174v1.123a.45.45 0 0 0 .449.451h5.139a.45.45 0 0 0 .451-.451v-1.123h29.725v1.123a.45.45 0 0 0 .451.451h5.139a.45.45 0 0 0 .451-.451v-1.123h2.275a.25.25 0 0 0 .248-.252V16.771c0-.139-.111-.25-.248-.25H1.871zm10.66 3.008h24.938c.138 0 .25.129.25.287v5.268c0 .159-.112.285-.25.285H12.531c-.138 0-.25-.127-.25-.285v-5.268c0-.159.112-.287.25-.287zm30.432.092c4.276 0 4.276 6.414 0 6.414s-4.276-6.414 0-6.414zm-35.967.619c3.325 0 3.325 4.988 0 4.988s-3.325-4.988 0-4.988z"/>
        </svg>


  icon_amp:
    styles:
      custom_fields:
        icon:
          - width: 90%
          - margin-left: 1%
          - margin-top: -10%
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes backlight {
                0% {
                  transform: scale(0.5);
                }
                40% {
                  transform: scale(0.6);
                }
                49% {
                  transform: scale(0.7);
                }
                63% {
                  transform: scale(0.8);
                }
                77% {
                  transform: scale(0.9);
                }
                100% {
                  transform: scale(1);
                }
              }
              .backlight {
                animation: backlight 0.5s;
                transform-origin: center;
              }
            </style>
          `,
            paths = `
              <path fill="#9da0a2" d="m 8.6627055,12.980639 -6.5081892,4.73265 v 18.565734 h 2.5222415 v 0.411535 c 0,0.182433 0.1463706,0.328803 0.3288036,0.328803 h 4.9447813 c 0.1824333,0 0.3309253,-0.14637 0.3309253,-0.328803 v -0.411535 h 29.420494 v 0.411535 c 0,0.182433 0.146371,0.328803 0.328803,0.328803 h 4.946903 c 0.182433,0 0.328804,-0.14637 0.328804,-0.328803 v -0.411535 h 2.539212 V 17.713289 l -6.090291,-4.73265 z m 24.5160175,7.4946 a 1.0606567,1.0606567 0 0 1 1.060657,1.060656 1.0606567,1.0606567 0 0 1 -1.060657,1.060657 1.0606567,1.0606567 0 0 1 -1.060656,-1.060657 1.0606567,1.0606567 0 0 1 1.060656,-1.060656 z m -8.224331,0.636394 a 5.9821035,5.9821035 0 0 1 5.977861,5.977861 5.9821035,5.9821035 0 0 1 -5.977861,5.977861 5.9821035,5.9821035 0 0 1 -5.97574,-5.977861 5.9821035,5.9821035 0 0 1 5.97574,-5.977861 z M 7.2796092,25.436991 a 1.6121981,1.6121981 0 0 1 1.6121982,1.610076 1.6121981,1.6121981 0 0 1 -1.6121982,1.612198 1.6121981,1.6121981 0 0 1 -1.6121981,-1.612198 1.6121981,1.6121981 0 0 1 1.6121981,-1.610076 z m 34.8446928,0.21001 a 1.4424931,1.4424931 0 0 1 1.440371,1.440371 1.4424931,1.4424931 0 0 1 -1.440371,1.440372 1.4424931,1.4424931 0 0 1 -1.440372,-1.440372 1.4424931,1.4424931 0 0 1 1.440372,-1.440371 z m -8.988005,6.189992 a 1.0606567,1.0606567 0 0 1 1.060657,1.060656 1.0606567,1.0606567 0 0 1 -1.060657,1.060657 1.0606567,1.0606567 0 0 1 -1.060656,-1.060657 1.0606567,1.0606567 0 0 1 1.060656,-1.060656 z"/>
            `;
          if (variables.state === 'on' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50" >
              ${style}
              ${paths}
            </svg>
          `;
          }

          return variables.state === 'on' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50">
              ${paths}
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              ${paths}
            </svg>
          `;
        ]]]


  icon_light_recessed:
    styles:
      custom_fields:
        icon:
          - width: 95%
          - margin-left: -12%
          - margin-top: -20%
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes on {
                from {
                  transform: scaleY(0);
                }
                to {
                  transform: scaleY(1);
                }
              }
              .on {
                animation: on 0.1s;
                transform-origin: -100% 46%;
                animation-fill-mode: forwards;
              }
              @keyframes off {
                from {
                  transform: scaleY(1);
                }
                to {
                  transform: scaleY(0);
                }
              }
              .off {
                animation: off 0.1s;
                transform-origin: -100% 46%;
                animation-fill-mode: forwards;
              }
            </style>
          `,
            path = `
              <path fill="#9da0a2" d="M25 15.618c-9.382 0-17.058 4.196-17.058 9.382S15.618 34.382 25 34.382 42.058 30.186 42.058 25 34.382 15.618 25 15.618m8.18 4.77c0 .682-3.233 2.975-8.18 2.975s-7.783-2.35-7.725-3.131l.623-.213c1.979-.58 4.441-.989 7.102-.989s5.015.358 6.994.938M25 30.97c-8.325 0-13.647-3.531-13.647-5.97 0-1.177 1.955-2.783 4.173-3.994l1.146-.53c.296.95 3.374 3.293 8.343 3.319 4.808.025 8.464-2.256 8.701-3.213l1.12.491c2.218 1.211 3.811 2.749 3.811 3.926 0 2.439-5.322 5.97-13.647 5.97z"/>
            `,
            gradient = `
              <radialGradient id="lsource" cx="25.165" cy="13.615" fx="25.165" fy="13.615" r="7.941" 
                gradientTransform="matrix(-0.00353534,0.70731769,-1.7278701,-0.00863629,48.77824,1.4653142)" 
                gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e6deb3"/><stop offset="1" stop-color="#e6deb3" stop-opacity="0"/>
              </radialGradient>
              <radialGradient id="dlcup" cx="24.933" cy="10.064" fx="24.933" fy="10.064" r="13.627" 
                gradientTransform="matrix(-1.3891264,0.01690265,-0.01282326,-1.0538672,59.802527,28.064254)" 
                gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e6deb3"/><stop offset="1" stop-color="#e6deb3" stop-opacity="0"/>
              </radialGradient>
            `;
          if (variables.state === 'on') {
            return `
              <svg viewBox="0 0 50 50"> ${style} ${gradient} 
                <path d="M24.207 23.332c-1.704-.092-3.315-.477-4.653-1.112-1.091-.518-1.964-1.207-2.209-1.741-.101-.221-.095-.228.276-.353 1.064-.357 2.666-.7 4.099-.878 1.078-.134 1.773-.18 2.95-.194 1.526-.018 2.747.053 4.066.238 1.49.208 2.704.491 3.84.895l.594.209c.003 0-.008.041-.026.091-.16.454-1.226 1.213-2.442 1.739-1.916.829-4.256 1.227-6.496 1.107z" fill="url(#lsource)" paint-order="fill markers stroke"/>
                <path d="M23.975 30.944c-3.988-.158-7.549-1.114-10.046-2.696-1.863-1.18-2.845-2.635-2.484-3.678.295-.852 1.455-1.956 3.172-3.019.549-.34.856-.505 1.464-.788.562-.262.588-.272.6-.225.047.187.466.668.853.978 1.576 1.264 3.975 2.086 6.594 2.259a20.24 20.24 0 0 0 1.905 0c2.442-.162 4.841-.898 6.519-2.001.577-.379 1.047-.829 1.138-1.089.013-.038.036-.068.05-.068.058 0 1.139.492 1.367.623.615.352 1.202.748 1.72 1.16.387.308 1.021.942 1.255 1.256.211.283.442.725.503.964a1.97 1.97 0 0 1-.01.846c-.388 1.435-2.257 2.947-4.953 4.007-2.011.79-4.343 1.272-6.983 1.443a61.05 61.05 0 0 1-2.663.03z" fill="url(#dlcup)" paint-order="fill markers stroke"/>
                ${path}
              </svg>
            `;
          }
          if (variables.state === 'off') {
            return `
              <svg viewBox="0 0 50 50"> ${style}
                ${path}
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50"> ${style} 
                ${path}
              </svg>
            `;
          }
        ]]]


  icon_light_flush:
    styles:
      custom_fields:
        icon:
          - width: 95%
          - margin-left: -12%
          - margin-top: -22%
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes on {
                from {
                  transform: scaleY(0);
                }
                to {
                  transform: scaleY(1);
                }
              }
              .on {
                animation: on 0.1s;
                transform-origin: -100% 46%;
                animation-fill-mode: forwards;
              }
              @keyframes off {
                from {
                  transform: scaleY(1);
                }
                to {
                  transform: scaleY(0);
                }
              }
              .off {
                animation: off 0.1s;
                transform-origin: -100% 46%;
                animation-fill-mode: forwards;
              }
            </style>
          `,
            path = `
              <g id="body">
                <path id="body-inside" fill="#9da0a2" opacity="0.8" d="M18.847 21.388C16.243 22.079 14.512 23.149 13.885 24.375C13.793 24.556 13.583 25.038 13.549 25.299C13.435 26.19 14.126 27.242 15.273 28.108C17.273 29.617 20.416 30.441 24.42 30.631L27.42 30.588C32.361 30.176 35.876 28.468 36.452 26.2C36.569 25.739 36.524 25.408 36.27 24.878C36.009 24.33 35.623 23.865 35.053 23.405C33.617 22.248 31.402 21.45 28.355 20.843C25.612 20.19 21.712 20.642 18.847 21.388V21.388ZM25.183 21.886C25.183 21.886 28.625 21.868 30.593 23.093C31.524 23.672 32.515 24.307 32.437 25.249C32.34 26.42 30.406 27.343 30.406 27.343C28.229 28.29 25.312 28.281 25.312 28.281C22.792 28.344 20.794 27.535 20.794 27.535C18.24 26.593 18.062 25.281 18.062 25.281C18.134 24.175 19.037 23.562 19.843 23.062C21.391 22.101 25.183 21.886 25.183 21.886V21.886Z"/>
                <path id="body-outside" fill="#9da0a2" d="M25.243 17.913C15.653 17.809 8.131 21.052 7.733 25C7.315 29.148 16.07 32.922 25.452 32.922C34.834 32.922 43.112 28.716 42.336 25.07C41.622 21.715 34.903 18.087 25.243 17.913V17.913ZM25.417 30.866C16.78 30.771 12.541 27.226 13.405 24.828C13.791 23.847 15.401 21.415 22.459 20.58C26.249 20.248 27.413 20.489 29.761 21.022C36.964 22.661 36.752 25.989 36.752 25.989C36.301 29.257 30.348 30.939 25.418 30.867L25.417 30.866Z"/>
              </g>
              <path id="top-edge" fill="#707070" d="M42.316 25.012C41.603 23.019 40.277 22.207 40.277 22.207C36.714 19.347 31.883 18.661 28.947 18.224C25.505 17.712 21.478 18.057 21.478 18.057C15.227 18.68 12.928 19.952 10.795 21.096C10.795 21.096 8.371 23.11 7.808 24.606C7.808 24.606 8.205 22.474 8.531 21.871C9.048 20.912 10.53 19.862 11.002 19.572C16.034 17.047 19.435 16.678 23.652 16.585C24.911 16.557 26.971 16.634 26.971 16.634C31.712 16.954 33.768 17.631 36.597 18.675C36.597 18.675 39.671 20.146 40.678 21.183C41.125 21.643 41.752 22.321 41.956 22.929C42.111 23.459 42.266 24.473 42.316 25.012Z"/>
            `,
            gradient = `
              <defs>
                <radialGradient id="paint0_radial_spot_flush" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(25.0983 22.8101) rotate(178.618) scale(35.0284 17.4212)">
                  <stop stop-color="#FFF9C3"/>
                  <stop offset="1" stop-color="#FFF9C3" stop-opacity="0"/>
                </radialGradient>
                <radialGradient id="paint1_radial_spot_flush" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(25.3508 23.0243) scale(1.55698 0.992516)">
                  <stop stop-color="#FFF9C3"/>
                  <stop offset="1" stop-color="#FFF9C3" stop-opacity="0"/>
                </radialGradient>
              </defs>
            `;
          if (variables.state === 'on') {
            return `
              <svg viewBox="0 0 50 50"> ${style} ${gradient}
                ${path}
                <path id="light-fade" opacity="0.875" d="M22.413 22.141C22.413 22.141 16.999 22.946 16.242 25.456C16.242 25.456 15.874 27.586 19.976 28.969C19.976 28.969 22.927 29.685 25.213 29.654C28.288 29.613 30.582 28.904 30.582 28.904C33.865 28.036 33.963 26.03 33.963 26.03C33.882 23.684 30.008 22.583 30.008 22.583C26.164 21.611 24.51 21.844 22.413 22.141V22.141Z" fill="url(#paint0_radial_spot_flush)"/>
                <path id="light-center" d="M25.351 24.016C26.2104 24.016 26.907 23.5719 26.907 23.024C26.907 22.4761 26.2104 22.032 25.351 22.032C24.4916 22.032 23.795 22.4761 23.795 23.024C23.795 23.5719 24.4916 24.016 25.351 24.016Z" fill="url(#paint1_radial_spot_flush)"/>
              </svg>
            `;
          }
          if (variables.state === 'off') {
            return `
              <svg viewBox="0 0 50 50"> ${style}
                ${path}
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50"> ${style} 
                ${path}
              </svg>
            `;
          }
        ]]]


  icon_downlight_kitchen:
    styles:
      custom_fields:
        icon:
          - width: 95%
          - margin-left: -12%
          - margin-top: -22%
    custom_fields:
      icon: >
        [[[
          let path = `
              <path id="frame-ring" fill="#9da0a2" d="M25.2422 17.9121C15.6522 17.8081 8.13042 21.052 7.73242 25C7.31442 29.148 16.0692 32.9219 25.4512 32.9219C34.8332 32.9219 43.1119 28.7163 42.3359 25.0703C41.6219 21.7153 34.9022 18.0861 25.2422 17.9121ZM25.1836 21.8867C25.1836 21.8867 28.6258 21.8687 30.5938 23.0937C31.5248 23.6727 33.0912 24.9776 33.0132 25.9196C32.9162 27.0906 31.2458 27.9434 31.2458 27.9434C29.0688 28.8904 25.3125 29.0488 25.3125 29.0488C22.7925 29.1118 19.7875 28.1348 19.7875 28.1348C17.2335 27.1928 17.151 25.5931 17.151 25.5931C17.223 24.4871 19.0378 23.5625 19.8438 23.0625C21.3918 22.1015 25.1836 21.8867 25.1836 21.8867Z"/>
              <path id="top-edge" fill="#707070"d="M42.316 25.012C41.603 23.019 40.277 22.207 40.277 22.207C36.714 19.347 31.883 18.661 28.947 18.224C25.505 17.712 21.478 18.057 21.478 18.057C15.227 18.68 12.928 19.952 10.795 21.096C10.795 21.096 8.371 23.11 7.808 24.606C7.808 24.606 8.205 22.474 8.531 21.871C9.048 20.912 10.53 19.862 11.002 19.572C16.034 17.047 19.435 16.678 23.652 16.585C24.911 16.557 26.971 16.634 26.971 16.634C31.712 16.954 33.768 17.631 36.597 18.675C36.597 18.675 39.671 20.146 40.678 21.183C41.125 21.643 41.752 22.321 41.956 22.929C42.111 23.459 42.266 24.473 42.316 25.012Z"/>
            `,
            gradient = `
              <defs>
                <radialGradient id="paint0_downlight_kitchen" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(25.0983 22.8101) rotate(178.618) scale(35.0284 17.4212)">
                  <stop stop-color="#FFF9C3"/>
                  <stop offset="1" stop-color="#FFF9C3" stop-opacity="0"/>
                </radialGradient>
                <radialGradient id="paint1_downlight_kitchen" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(25.3508 23.0243) scale(1.55698 0.992516)">
                  <stop stop-color="#FFF9C3"/>
                  <stop offset="1" stop-color="#FFF9C3" stop-opacity="0"/>
                </radialGradient>
              </defs>
            `;
          if (variables.state === 'on') {
            return `
              <svg viewBox="0 0 50 50"> ${gradient}
                ${path}
                <path id="light-cup" fill="url(#paint0_downlight_kitchen)" opacity="0.875" d="M22.413 22.141C22.413 22.141 16.999 22.946 16.242 25.456C16.242 25.456 15.874 27.586 19.976 28.969C19.976 28.969 22.927 29.685 25.213 29.654C28.288 29.613 30.582 28.904 30.582 28.904C33.865 28.036 33.963 26.03 33.963 26.03C33.882 23.684 30.008 22.583 30.008 22.583C28 22 24.51 21.844 22.413 22.141Z"/>
                <path id="light-center" fill="url(#paint1_downlight_kitchen)" d="M25.351 24.016C26.2104 24.016 26.907 23.5719 26.907 23.024C26.907 22.4761 26.2104 22.032 25.351 22.032C24.4916 22.032 23.795 22.4761 23.795 23.024C23.795 23.5719 24.4916 24.016 25.351 24.016Z"/>
              </svg>
            `;
          }
          if (variables.state === 'off') {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
              </svg>
            `;
          }
        ]]]


  icon_hue_fair:
    styles:
      custom_fields:
        icon:
          - width: 90%
          - margin-top: -7%
          - margin-left: -3%
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes speaker {
                0% {
                  transform: scale(1);
                }
                40% {
                  transform: scale(1);
                }
                49% {
                  transform: scale(0.95);
                }
                63% {
                  transform: scale(1);
                }
                77% {
                  transform: scale(0.95);
                }
                100% {
                  transform: scale(1);
                }
              }
              .speaker {
                animation: speaker 1.1s;
                transform-origin: center;
              }
            </style>
          `,
            paths = `              
              <defs>
                <radialGradient id="FairLight" cx="25.009" cy="30.117" fx="25.009" fy="30.117" r="19.185" gradientTransform="matrix(1.5463854,0.01186063,-0.00322901,0.42099978,-13.570878,16.264069)" gradientUnits="userSpaceOnUse">
                  <stop offset="0" stop-color="var(--light-color)" stop-opacity="0"/>
                  <stop offset="1" stop-color="var(--light-color)"/>
                </radialGradient>
              </defs>
              <path class="frame" fill="#373737" d="M46.11 27.803v-6.539c0-4.328-13.795-5.472-21.089-5.472S3.934 16.936 3.934 21.264v6.362a2.41 2.41 0 0 0 .072 1.467c.755 4.027 13.932 5.115 21.016 5.115 7.131 0 20.44-1.102 21.033-5.195.013-.027.024-.054.034-.082.071-.372.078-.753.022-1.128zM25.021 32.36c-12.45 0-19.241-2.394-19.241-3.625 0-.954 4.096-2.602 11.727-3.297 3.562-.3 6.069-.523 10.109-.356 10.744.311 16.646 2.514 16.646 3.653 0 1.23-6.791 3.625-19.242 3.625zm.045-4.665c-.408 0-3.981.041-3.981 1.458s3.573 1.458 3.981 1.458 3.982-.041 3.982-1.458-3.574-1.458-3.982-1.458z"/>
              <path class="light" fill="url(#FairLight)" paint-order="fill markers stroke" d="M21.523 32.267c-3.658-.16-6.94-.518-9.631-1.049-3.106-.613-5.504-1.517-5.989-2.257-.108-.165-.109-.199-.009-.408.554-1.162 5.662-2.527 11.457-3.061 4.992-.46 7.335-.523 11.752-.314 6.881.326 13.135 1.624 14.774 3.067.594.523.37.906-.891 1.518-2.481 1.206-7.076 2.059-13.118 2.436-1.574.098-6.691.139-8.345.067zm5.424-1.781c.844-.142 1.398-.342 1.727-.624.709-.607.461-1.344-.591-1.758-.728-.286-1.499-.387-2.979-.389-1.429-.002-2.031.065-2.857.319-1.12.344-1.523 1.145-.886 1.764.744.723 3.422 1.053 5.586.689z"/>
            `;
          if (variables.state === 'on' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50">
              ${style}
              ${paths}
            </svg>
          `;
          }

          return variables.state === 'on' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50">
              ${paths}
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              <path fill="#9da0a2" d="M46.11 27.803v-6.539c0-4.328-13.795-5.472-21.089-5.472S3.934 16.936 3.934 21.264v6.362c-.129.485-.104.997.072 1.467.755 4.027 13.932 5.115 21.016 5.115 7.131 0 20.44-1.102 21.033-5.195.013-.027.024-.054.034-.082.071-.372.078-.753.022-1.128zM25.021 32.36c-12.45 0-19.241-2.394-19.241-3.625 0-.954 4.096-2.602 11.727-3.297 3.562-.3 6.069-.523 10.109-.356 10.744.311 16.646 2.514 16.646 3.653 0 1.23-6.791 3.625-19.242 3.625zm.045-4.665c-.408 0-3.981.041-3.981 1.458s3.573 1.458 3.981 1.458 3.982-.041 3.982-1.458-3.574-1.458-3.982-1.458z"/>
            </svg>
          `;
        ]]]


  icon_hue_play:
    styles:
      custom_fields:
        icon:
          - width: 80%
          - margin-top: -1%
          - margin-left: 1%
    custom_fields:
      icon: >
        [[[
          let path = `
              <path fill="#9da0a2" d="M45.532 28.619c-3.361 1.662-6.663.427-8.872-.443-1.826-.719-32.321-13.293-32.321-13.293s-2.814-1.256.258-2.372c3.789-1.379 6.847-.234 10.384 1.186l29.74 11.941s4.171 1.319.811 2.981zm3.183-1.404c-.027-.765-.422-2.124-2.679-3.052L13.492 11.097c-1.377-.566-3.54-.921-5.635-.921-1.081 0-2.628.099-3.869.577-2.188.842-2.63 2.095-2.683 2.846l-.012-.003-.012 8.982.009.002c.044.722.436 1.869 2.305 2.668L37.008 38.99c1.254.534 2.908.835 4.644.835s3.381-.304 4.621-.851c2.139-.946 2.443-2.313 2.436-3.043l.01-8.714z"/>
            `,
            gradient = `
              <defs>
                <radialGradient id="fill_hue_play" cx="15.172" cy="5.716" fx="15.172" fy="5.716" r="10.864" gradientTransform="matrix(3.5959517,1.4151214,-0.11406875,0.24526771,-29.521479,-6.7223487)" gradientUnits="userSpaceOnUse">
                  <stop offset="0" stop-color="var(--light-color)"/>
                  <stop offset="1" stop-color="var(--light-color)" stop-opacity=".827"/>
                </radialGradient>
              </defs>
            `;
          if (variables.state === 'on') {
            return `
              <svg viewBox="0 0 50 50"> ${gradient} 
                ${path}
                <path d="M12.298 8.384l32.604 13.096c.882.337 1.214.899 1.214.899.767 1.021-1.202 1.816-1.202 1.816-2.465 1.333-5.269.732-6.542.37l-2.454-.883-32.04-13.18c-2.092-.861-1.26-1.827-.594-2.137 1.367-.637 1.928-.681 2.895-.852.786-.14 1.965-.072 1.965-.072.53-.021 3.026.491 4.154.944z" fill="url(#fill_hue_play)" transform="translate(.576 4.441)"/>
              </svg>
            `;
          }
          if (variables.state === 'off') {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
              </svg>
            `;
          }
        ]]]


  icon_hue_resonate:
    styles:
      custom_fields:
        icon:
          - width: 70%
          - margin-left: -10%
          - color: >
              [[[ return variables.state === 'on' ? '#000000' : '#9da0a2'; ]]]
    custom_fields:
      icon: >
        <ha-icon icon="hue:wall-resonate"></ha-icon>


  icon_hue:
    styles:
      custom_fields:
        icon:
          - width: 77%
          - margin-left: -14%
          - margin-top: 1%
    custom_fields:
      icon: >
        [[[
          let state = variables.state === 'on' && variables.timeout < 2000 ? 'on' : null;
          return `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes on {
                  0% {
                    transform: scale(0.85);
                  }
                  20% {
                    transform: scale(1.1);
                  }
                  40% {
                    transform: scale(0.95);
                  }
                  60% {
                    transform: scale(1.03);
                  }
                  80% {
                    transform: scale(0.97);
                  }
                  100% {
                    transform: scale(1);
                  }
                }
                .on {
                  animation: on 0.8s;
                  transform-origin: center;
                }
              </style>
              <path fill="#9da0a2" d="M27.4 47.3h-4.9s-.7.1-.7.8.4.9.7.9h4.9c.3 0 .7-.1.7-.9s-.7-.8-.7-.8zm3.3-2.9H19.3s-.8 0-.8.8.6.9.8.9h11.5c.2 0 .8-.1.8-.9-.1-.8-.9-.8-.9-.8zm0-3H19.3s-.8 0-.8.8.6.9.8.9h11.5c.2 0 .8-.1.8-.9-.1-.8-.9-.8-.9-.8zm0-2.9H19.3s-.8 0-.8.8.6.9.8.9h11.5c.2 0 .8-.1.8-.9s-.9-.8-.9-.8zm5.2-23.2c-3.3-5.3-7-5.6-10.9-5.6-3.8 0-8.4.4-10.9 5.6-.1.1-.1.3.1.7.4.8 3.3 7.2 3.2 18.8 0 1.1-.1 1.6 0 1.7 0 .1 0 .7 1.1.7h13c1 0 1-.5 1.1-.7v-1.7c-.1-11.6 2.8-18 3.2-18.8.1-.4.1-.5.1-.7"/>
              <path class="${state}" fill="var(--light-color)" d="M14.1 15.3c3.4-.3 7-.4 10.9-.4 3.8 0 7.5.2 10.9.4.4-.4.7-.8.9-1.1C39 8.5 38.9 6.5 38.9 6c-.2-4.4-8.4-5-12.1-5h0-3.4c-3.7 0-12 .5-12.1 5 0 .5-.1 2.5 2.1 8.2 0 .3.3.8.7 1.1z"/>
            </svg>
          `;
        ]]]


  icon_dining:
    styles:
      custom_fields:
        icon:
          - width: 77%
          - margin-top: 3%
          - margin-left: -10%
    custom_fields:
      icon: >
        [[[
          let path = `
              <path fill="#9da0a2" d="M31.854.714s.006 16.117-.551 24.1c-.3 4.297-1.672 8.463-1.467 12.73.194 4.038-.386 11.805 2.536 11.86.704.013 2.299.234 2.765-.15 2.387-1.971 1.926-7.447 2.034-10.864.099-3.12-1.028-6.483-1.615-8.419-.296-.975-.3-1.874-.3-1.874-.065-1.838 1.524-3.447 2.901-4.98.853-.95 1.748-2.33 1.748-2.33.228-.487 1.014-2.254 1.008-2.982l-.039-5.223C40.85 9.231 40.067.565 31.854.714zM15.081 49.361c.62.444 2.621.067 2.621.067 2.341-1.776 2.252-6.822 2.252-6.822.246-1.16.254-5.433-.149-8.105-1.859-12.325-1.386-12.255-1.386-12.255-.063-.562 3.541-2.867 3.541-2.867 1.943-1.893 1.904-4.224 1.904-4.224.101-4.733-.517-14.221-.517-14.221L20.512.559l-.075 11.574c-.47 1.032-1.935.946-2.387-.05L17.964.572 14.83.557l-.012 11.476c-.749 1.148-2.009.899-2.437-.05L12.309.541 9.526.892c-.196 4.189-.75 10.696-.324 15.723 0 0 .728 2.183 2.022 3.034 2.839 1.866 3.047 2.38 3.047 2.38.569.449-.508 6.702-1.243 12.63 0 0-.485 5.887-.149 8.802.18 1.559.283 4.523 2.202 5.9z"/>
            `;
          if (variables.state === 'on') {
            return `
              <svg viewBox="0 0 50 50">
                <path fill="#898a85" d="M31.854.714s.006 16.117-.551 24.1c-.3 4.297-1.672 8.463-1.467 12.73.194 4.038-.386 11.805 2.536 11.86.704.013 2.299.234 2.765-.15 2.387-1.971 1.926-7.447 2.034-10.864.099-3.12-1.028-6.483-1.615-8.419-.296-.975-.3-1.874-.3-1.874-.065-1.838 1.524-3.447 2.901-4.98.853-.95 1.748-2.33 1.748-2.33.228-.487 1.014-2.254 1.008-2.982l-.039-5.223C40.85 9.231 40.067.565 31.854.714zM15.081 49.361c.62.444 2.621.067 2.621.067 2.341-1.776 2.252-6.822 2.252-6.822.246-1.16.254-5.433-.149-8.105-1.859-12.325-1.386-12.255-1.386-12.255-.063-.562 3.541-2.867 3.541-2.867 1.943-1.893 1.904-4.224 1.904-4.224.101-4.733-.517-14.221-.517-14.221L20.512.559l-.075 11.574c-.47 1.032-1.935.946-2.387-.05L17.964.572 14.83.557l-.012 11.476c-.749 1.148-2.009.899-2.437-.05L12.309.541 9.526.892c-.196 4.189-.75 10.696-.324 15.723 0 0 .728 2.183 2.022 3.034 2.839 1.866 3.047 2.38 3.047 2.38.569.449-.508 6.702-1.243 12.63 0 0-.485 5.887-.149 8.802.18 1.559.283 4.523 2.202 5.9z"/>
              </svg>
            `;
          }
          if (variables.state === 'off') {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
              </svg>
            `;
          }
        ]]]


  icon_ceiling_dining:
    styles:
      custom_fields:
        icon:
          - width: 95%
          #- margin-left: -8%
          - margin-top: -22%
    custom_fields:
      icon: >
        [[[
          let path = `
            <path id="wire-l" fill="#9DA0A2" d="M6.99886 16.7116C6.94735 16.7116 6.90701 16.8103 6.90701 16.9334V20.9232C7.02245 20.9139 7.134 20.9075 7.22288 20.9076C7.31278 20.9076 7.43084 20.9157 7.5522 20.9255V16.9334C7.5522 16.8103 7.50962 16.7116 7.45811 16.7116L6.99886 16.7116Z"/>
            <path id="wire-r" fill="#9DA0A2" d="M42.5401 16.7116C42.4886 16.7116 42.4483 16.8103 42.4483 16.9334V20.9232C42.5637 20.9139 42.6753 20.9075 42.7641 20.9076C42.854 20.9076 42.9721 20.9157 43.0935 20.9255V16.9334C43.0935 16.8103 43.0509 16.7116 42.9994 16.7116L42.5401 16.7116Z"/>
            `,
            gradient = `
              <defs>
              <linearGradient id="paint0_ceiling_dining_linear_1_2" x1="7.13895" y1="35.927" x2="7.12901" y2="28.3893" gradientUnits="userSpaceOnUse">
              <stop/>
              <stop offset="1" stop-color="#FFEE7B"/>
              </linearGradient>
              <linearGradient id="paint1_ceiling_dining_linear_1_2" x1="25.574" y1="35.927" x2="25.5641" y2="28.3893" gradientUnits="userSpaceOnUse">
              <stop/>
              <stop offset="1" stop-color="#FFEE7B"/>
              </linearGradient>
              <linearGradient id="paint2_ceiling_dining_linear_1_2" x1="42.6807" y1="35.927" x2="42.6707" y2="28.3893" gradientUnits="userSpaceOnUse">
              <stop/>
              <stop offset="1" stop-color="#FFEE7B"/>
              </linearGradient>
              </defs>
            `;
          if (variables.state === 'off') {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
                <path id="right-pendant" fill="#9DA0A2" d="M38.1095 32.9603C38.1095 32.9603 38.0433 32.5567 42.8662 32.5722C47.453 32.5868 47.4323 32.9207 47.4323 32.9207C47.4323 32.9207 46.9905 33.2589 42.8851 33.2691C38.5209 33.28 38.1095 32.9603 38.1095 32.9603V32.9603ZM41.8809 21.3771C41.8809 21.3771 42.4634 21.3007 42.7655 21.301C43.0625 21.3012 43.6701 21.3771 43.6701 21.3771C43.7532 21.3852 43.8207 21.4371 43.8207 21.5118V28.1321C43.8207 28.2066 43.7536 28.2667 43.6701 28.2667H41.8809C41.7975 28.2667 41.7303 28.2066 41.7303 28.1321V21.5118C41.7303 21.4371 41.7975 21.3771 41.8809 21.3771ZM38.1095 32.9603C38.1316 30.2396 40.2258 28.0307 42.7934 28.0198C45.3609 28.0089 47.4351 30.2002 47.4323 32.9207C47.4323 32.9207 47.0375 33.2737 42.7508 33.2781C38.557 33.2823 38.1095 32.9603 38.1095 32.9603V32.9603Z"/>
                <path id="center-pendant" fill="#9DA0A2" d="M21.0028 32.9603C21.0028 32.9603 20.9366 32.5567 25.7596 32.5722C30.3463 32.5868 30.3257 32.9207 30.3257 32.9207C30.3257 32.9207 29.8838 33.2589 25.7785 33.2691C21.4143 33.28 21.0028 32.9603 21.0028 32.9603V32.9603ZM24.7743 21.3771C24.7743 21.3771 25.3567 21.3007 25.6589 21.301C25.9558 21.3012 26.5635 21.3771 26.5635 21.3771C26.6465 21.3852 26.7141 21.4371 26.7141 21.5118V28.1321C26.7141 28.2066 26.647 28.2667 26.5635 28.2667H24.7743C24.6909 28.2667 24.6237 28.2066 24.6237 28.1321V21.5118C24.6237 21.4371 24.6909 21.3771 24.7743 21.3771ZM21.0028 32.9603C21.025 30.2396 23.1192 28.0307 25.6867 28.0198C28.2543 28.0089 30.3284 30.2002 30.3257 32.9207C30.3257 32.9207 29.9309 33.2737 25.6442 33.2781C21.4504 33.2823 21.0028 32.9603 21.0028 32.9603V32.9603Z"/>
                <path id="left-pendant" fill="#9DA0A2" d="M2.56774 32.9603C2.56774 32.9603 2.50155 32.5567 7.32448 32.5722C11.9112 32.5868 11.8906 32.9207 11.8906 32.9207C11.8906 32.9207 11.4488 33.2589 7.3434 33.2691C2.97917 33.28 2.56774 32.9603 2.56774 32.9603V32.9603ZM6.3392 21.3771C6.3392 21.3771 6.92165 21.3007 7.22377 21.301C7.52073 21.3012 8.12841 21.3771 8.12841 21.3771C8.21145 21.3852 8.27901 21.4371 8.27901 21.5118V28.1321C8.27901 28.2066 8.21191 28.2667 8.12841 28.2667H6.3392C6.25581 28.2667 6.1886 28.2066 6.1886 28.1321V21.5118C6.1886 21.4371 6.25581 21.3771 6.3392 21.3771ZM2.56774 32.9603C2.58987 30.2396 4.68407 28.0307 7.25164 28.0198C9.81921 28.0089 11.8933 30.2002 11.8906 32.9207C11.8906 32.9207 11.4958 33.2737 7.20909 33.2781C3.0153 33.2823 2.56774 32.9603 2.56774 32.9603V32.9603Z"/>
                <path id="goldrod" fill="#565656" d="M41.6643 25.8626C41.6643 25.8626 42.4373 25.7864 42.8216 25.7864C43.1954 25.7864 43.9387 25.8626 43.9387 25.8626C44.0024 25.8626 44.0537 25.9212 44.0537 25.994V27.2725C44.0537 27.3452 44.0024 27.4039 43.9387 27.4039C43.9387 27.4039 43.1924 27.3142 42.8171 27.3142C42.4344 27.3142 41.6643 27.4039 41.6643 27.4039C41.6005 27.4039 41.5491 27.3452 41.5491 27.2725V25.994C41.5491 25.9212 41.6005 25.8626 41.6643 25.8626ZM24.5427 25.9768C24.5427 25.9768 25.3158 25.9007 25.7 25.9007C26.0738 25.9007 26.8171 25.9768 26.8171 25.9768C26.8809 25.9768 26.9321 26.0355 26.9321 26.1083V27.3866C26.9321 27.4595 26.8809 27.5181 26.8171 27.5181C26.8171 27.5181 26.0709 27.4285 25.6956 27.4285C25.3128 27.4285 24.5427 27.5181 24.5427 27.5181C24.4789 27.5181 24.4275 27.4595 24.4275 27.3866V26.1083C24.4275 26.0355 24.4789 25.9768 24.5427 25.9768V25.9768ZM6.09123 25.9197C6.09123 25.9197 6.86427 25.8436 7.24856 25.8436C7.62239 25.8436 8.36559 25.9197 8.36559 25.9197C8.42936 25.9197 8.48075 25.9783 8.48075 26.0512V27.3295C8.48075 27.4023 8.42936 27.4609 8.36559 27.4609C8.36559 27.4609 7.61941 27.3714 7.24408 27.3714C6.86129 27.3714 6.09123 27.4609 6.09123 27.4609C6.02744 27.4609 5.9761 27.4023 5.9761 27.3295V26.0512C5.9761 25.9783 6.02744 25.9197 6.09123 25.9197ZM8.50289 26.4572H41.5119C41.5344 26.4572 41.5525 26.4705 41.5525 26.4869V26.937C41.5525 26.9534 41.5344 26.9667 41.5119 26.9667H8.50289C8.4804 26.9667 8.46228 26.9534 8.46228 26.937V26.4869C8.46228 26.4705 8.4804 26.4572 8.50289 26.4572Z"/>
              </svg>
            `;
          }
          if (variables.state === 'on') {
            return `
              <svg viewBox="0 0 50 50"> ${gradient}
                <path id="wire-l" fill="black" d="M6.99886 16.7116C6.94735 16.7116 6.90701 16.8103 6.90701 16.9334V20.9232C7.02245 20.9139 7.134 20.9075 7.22288 20.9076C7.31278 20.9076 7.43084 20.9157 7.5522 20.9255V16.9334C7.5522 16.8103 7.50962 16.7116 7.45811 16.7116L6.99886 16.7116Z"/>
                <path id="wire-r" fill="black" d="M42.5401 16.7116C42.4886 16.7116 42.4483 16.8103 42.4483 16.9334V20.9232C42.5637 20.9139 42.6753 20.9075 42.7641 20.9076C42.854 20.9076 42.9721 20.9157 43.0935 20.9255V16.9334C43.0935 16.8103 43.0509 16.7116 42.9994 16.7116L42.5401 16.7116Z"/>
                <path id="right-pendant" fill="black" d="M38.1095 32.9603C38.1095 32.9603 38.0433 32.5567 42.8662 32.5722C47.453 32.5868 47.4323 32.9207 47.4323 32.9207C47.4323 32.9207 46.9905 33.2589 42.8851 33.2691C38.5209 33.28 38.1095 32.9603 38.1095 32.9603V32.9603ZM41.8809 21.3771C41.8809 21.3771 42.4634 21.3007 42.7655 21.301C43.0625 21.3012 43.6701 21.3771 43.6701 21.3771C43.7532 21.3852 43.8207 21.4371 43.8207 21.5118V28.1321C43.8207 28.2066 43.7536 28.2667 43.6701 28.2667H41.8809C41.7975 28.2667 41.7303 28.2066 41.7303 28.1321V21.5118C41.7303 21.4371 41.7975 21.3771 41.8809 21.3771ZM38.1095 32.9603C38.1316 30.2396 40.2258 28.0307 42.7934 28.0198C45.3609 28.0089 47.4351 30.2002 47.4323 32.9207C47.4323 32.9207 47.0375 33.2737 42.7508 33.2781C38.557 33.2823 38.1095 32.9603 38.1095 32.9603V32.9603Z"/>
                <path id="center-pendant" fill="black" d="M21.0028 32.9603C21.0028 32.9603 20.9366 32.5567 25.7596 32.5722C30.3463 32.5868 30.3257 32.9207 30.3257 32.9207C30.3257 32.9207 29.8838 33.2589 25.7785 33.2691C21.4143 33.28 21.0028 32.9603 21.0028 32.9603V32.9603ZM24.7743 21.3771C24.7743 21.3771 25.3567 21.3007 25.6589 21.301C25.9558 21.3012 26.5635 21.3771 26.5635 21.3771C26.6465 21.3852 26.7141 21.4371 26.7141 21.5118V28.1321C26.7141 28.2066 26.647 28.2667 26.5635 28.2667H24.7743C24.6909 28.2667 24.6237 28.2066 24.6237 28.1321V21.5118C24.6237 21.4371 24.6909 21.3771 24.7743 21.3771ZM21.0028 32.9603C21.025 30.2396 23.1192 28.0307 25.6867 28.0198C28.2543 28.0089 30.3284 30.2002 30.3257 32.9207C30.3257 32.9207 29.9309 33.2737 25.6442 33.2781C21.4504 33.2823 21.0028 32.9603 21.0028 32.9603V32.9603Z"/>
                <path id="left-pendant" fill="black" d="M2.56774 32.9603C2.56774 32.9603 2.50155 32.5567 7.32448 32.5722C11.9112 32.5868 11.8906 32.9207 11.8906 32.9207C11.8906 32.9207 11.4488 33.2589 7.3434 33.2691C2.97917 33.28 2.56774 32.9603 2.56774 32.9603V32.9603ZM6.3392 21.3771C6.3392 21.3771 6.92165 21.3007 7.22377 21.301C7.52073 21.3012 8.12841 21.3771 8.12841 21.3771C8.21145 21.3852 8.27901 21.4371 8.27901 21.5118V28.1321C8.27901 28.2066 8.21191 28.2667 8.12841 28.2667H6.3392C6.25581 28.2667 6.1886 28.2066 6.1886 28.1321V21.5118C6.1886 21.4371 6.25581 21.3771 6.3392 21.3771ZM2.56774 32.9603C2.58987 30.2396 4.68407 28.0307 7.25164 28.0198C9.81921 28.0089 11.8933 30.2002 11.8906 32.9207C11.8906 32.9207 11.4958 33.2737 7.20909 33.2781C3.0153 33.2823 2.56774 32.9603 2.56774 32.9603V32.9603Z"/>
                <path id="goldrod" fill="#565656" d="M41.6643 25.8626C41.6643 25.8626 42.4373 25.7864 42.8216 25.7864C43.1954 25.7864 43.9387 25.8626 43.9387 25.8626C44.0024 25.8626 44.0537 25.9212 44.0537 25.994V27.2725C44.0537 27.3452 44.0024 27.4039 43.9387 27.4039C43.9387 27.4039 43.1924 27.3142 42.8171 27.3142C42.4344 27.3142 41.6643 27.4039 41.6643 27.4039C41.6005 27.4039 41.5491 27.3452 41.5491 27.2725V25.994C41.5491 25.9212 41.6005 25.8626 41.6643 25.8626ZM24.5427 25.9768C24.5427 25.9768 25.3158 25.9007 25.7 25.9007C26.0738 25.9007 26.8171 25.9768 26.8171 25.9768C26.8809 25.9768 26.9321 26.0355 26.9321 26.1083V27.3866C26.9321 27.4595 26.8809 27.5181 26.8171 27.5181C26.8171 27.5181 26.0709 27.4285 25.6956 27.4285C25.3128 27.4285 24.5427 27.5181 24.5427 27.5181C24.4789 27.5181 24.4275 27.4595 24.4275 27.3866V26.1083C24.4275 26.0355 24.4789 25.9768 24.5427 25.9768V25.9768ZM6.09123 25.9197C6.09123 25.9197 6.86427 25.8436 7.24856 25.8436C7.62239 25.8436 8.36559 25.9197 8.36559 25.9197C8.42936 25.9197 8.48075 25.9783 8.48075 26.0512V27.3295C8.48075 27.4023 8.42936 27.4609 8.36559 27.4609C8.36559 27.4609 7.61941 27.3714 7.24408 27.3714C6.86129 27.3714 6.09123 27.4609 6.09123 27.4609C6.02744 27.4609 5.9761 27.4023 5.9761 27.3295V26.0512C5.9761 25.9783 6.02744 25.9197 6.09123 25.9197ZM8.50289 26.4572H41.5119C41.5344 26.4572 41.5525 26.4705 41.5525 26.4869V26.937C41.5525 26.9534 41.5344 26.9667 41.5119 26.9667H8.50289C8.4804 26.9667 8.46228 26.9534 8.46228 26.937V26.4869C8.46228 26.4705 8.4804 26.4572 8.50289 26.4572Z"/>
                <path id="left-light" d="M2.56774 32.9603C2.56774 32.9603 2.50155 32.5568 7.32447 32.5722C11.9112 32.5868 11.8906 32.9207 11.8906 32.9207C11.8906 32.9207 11.6009 33.259 7.31817 33.2882C2.95394 33.2991 2.56774 32.9603 2.56774 32.9603V32.9603Z" fill="url(#paint0_ceiling_dining_linear_1_2)"/>
                <path id="center-light" d="M21.0028 32.9603C21.0028 32.9603 20.9366 32.5568 25.7596 32.5722C30.3463 32.5868 30.3257 32.9207 30.3257 32.9207C30.3257 32.9207 30.036 33.259 25.7533 33.2882C21.389 33.2991 21.0028 32.9603 21.0028 32.9603V32.9603Z" fill="url(#paint1_ceiling_dining_linear_1_2)"/>
                <path id="right-light" d="M38.1095 32.9603C38.1095 32.9603 38.0433 32.5568 42.8662 32.5722C47.453 32.5868 47.4323 32.9207 47.4323 32.9207C47.4323 32.9207 47.1427 33.259 42.8599 33.2882C38.4957 33.2991 38.1095 32.9603 38.1095 32.9603Z" fill="url(#paint2_ceiling_dining_linear_1_2)"/>
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
                <path id="right-pendant" fill="#9DA0A2" d="M38.1095 32.9603C38.1095 32.9603 38.0433 32.5567 42.8662 32.5722C47.453 32.5868 47.4323 32.9207 47.4323 32.9207C47.4323 32.9207 46.9905 33.2589 42.8851 33.2691C38.5209 33.28 38.1095 32.9603 38.1095 32.9603V32.9603ZM41.8809 21.3771C41.8809 21.3771 42.4634 21.3007 42.7655 21.301C43.0625 21.3012 43.6701 21.3771 43.6701 21.3771C43.7532 21.3852 43.8207 21.4371 43.8207 21.5118V28.1321C43.8207 28.2066 43.7536 28.2667 43.6701 28.2667H41.8809C41.7975 28.2667 41.7303 28.2066 41.7303 28.1321V21.5118C41.7303 21.4371 41.7975 21.3771 41.8809 21.3771ZM38.1095 32.9603C38.1316 30.2396 40.2258 28.0307 42.7934 28.0198C45.3609 28.0089 47.4351 30.2002 47.4323 32.9207C47.4323 32.9207 47.0375 33.2737 42.7508 33.2781C38.557 33.2823 38.1095 32.9603 38.1095 32.9603V32.9603Z"/>
                <path id="center-pendant" fill="#9DA0A2" d="M21.0028 32.9603C21.0028 32.9603 20.9366 32.5567 25.7596 32.5722C30.3463 32.5868 30.3257 32.9207 30.3257 32.9207C30.3257 32.9207 29.8838 33.2589 25.7785 33.2691C21.4143 33.28 21.0028 32.9603 21.0028 32.9603V32.9603ZM24.7743 21.3771C24.7743 21.3771 25.3567 21.3007 25.6589 21.301C25.9558 21.3012 26.5635 21.3771 26.5635 21.3771C26.6465 21.3852 26.7141 21.4371 26.7141 21.5118V28.1321C26.7141 28.2066 26.647 28.2667 26.5635 28.2667H24.7743C24.6909 28.2667 24.6237 28.2066 24.6237 28.1321V21.5118C24.6237 21.4371 24.6909 21.3771 24.7743 21.3771ZM21.0028 32.9603C21.025 30.2396 23.1192 28.0307 25.6867 28.0198C28.2543 28.0089 30.3284 30.2002 30.3257 32.9207C30.3257 32.9207 29.9309 33.2737 25.6442 33.2781C21.4504 33.2823 21.0028 32.9603 21.0028 32.9603V32.9603Z"/>
                <path id="left-pendant" fill="#9DA0A2" d="M2.56774 32.9603C2.56774 32.9603 2.50155 32.5567 7.32448 32.5722C11.9112 32.5868 11.8906 32.9207 11.8906 32.9207C11.8906 32.9207 11.4488 33.2589 7.3434 33.2691C2.97917 33.28 2.56774 32.9603 2.56774 32.9603V32.9603ZM6.3392 21.3771C6.3392 21.3771 6.92165 21.3007 7.22377 21.301C7.52073 21.3012 8.12841 21.3771 8.12841 21.3771C8.21145 21.3852 8.27901 21.4371 8.27901 21.5118V28.1321C8.27901 28.2066 8.21191 28.2667 8.12841 28.2667H6.3392C6.25581 28.2667 6.1886 28.2066 6.1886 28.1321V21.5118C6.1886 21.4371 6.25581 21.3771 6.3392 21.3771ZM2.56774 32.9603C2.58987 30.2396 4.68407 28.0307 7.25164 28.0198C9.81921 28.0089 11.8933 30.2002 11.8906 32.9207C11.8906 32.9207 11.4958 33.2737 7.20909 33.2781C3.0153 33.2823 2.56774 32.9603 2.56774 32.9603V32.9603Z"/>
                <path id="goldrod" fill="#565656" d="M41.6643 25.8626C41.6643 25.8626 42.4373 25.7864 42.8216 25.7864C43.1954 25.7864 43.9387 25.8626 43.9387 25.8626C44.0024 25.8626 44.0537 25.9212 44.0537 25.994V27.2725C44.0537 27.3452 44.0024 27.4039 43.9387 27.4039C43.9387 27.4039 43.1924 27.3142 42.8171 27.3142C42.4344 27.3142 41.6643 27.4039 41.6643 27.4039C41.6005 27.4039 41.5491 27.3452 41.5491 27.2725V25.994C41.5491 25.9212 41.6005 25.8626 41.6643 25.8626ZM24.5427 25.9768C24.5427 25.9768 25.3158 25.9007 25.7 25.9007C26.0738 25.9007 26.8171 25.9768 26.8171 25.9768C26.8809 25.9768 26.9321 26.0355 26.9321 26.1083V27.3866C26.9321 27.4595 26.8809 27.5181 26.8171 27.5181C26.8171 27.5181 26.0709 27.4285 25.6956 27.4285C25.3128 27.4285 24.5427 27.5181 24.5427 27.5181C24.4789 27.5181 24.4275 27.4595 24.4275 27.3866V26.1083C24.4275 26.0355 24.4789 25.9768 24.5427 25.9768V25.9768ZM6.09123 25.9197C6.09123 25.9197 6.86427 25.8436 7.24856 25.8436C7.62239 25.8436 8.36559 25.9197 8.36559 25.9197C8.42936 25.9197 8.48075 25.9783 8.48075 26.0512V27.3295C8.48075 27.4023 8.42936 27.4609 8.36559 27.4609C8.36559 27.4609 7.61941 27.3714 7.24408 27.3714C6.86129 27.3714 6.09123 27.4609 6.09123 27.4609C6.02744 27.4609 5.9761 27.4023 5.9761 27.3295V26.0512C5.9761 25.9783 6.02744 25.9197 6.09123 25.9197ZM8.50289 26.4572H41.5119C41.5344 26.4572 41.5525 26.4705 41.5525 26.4869V26.937C41.5525 26.9534 41.5344 26.9667 41.5119 26.9667H8.50289C8.4804 26.9667 8.46228 26.9534 8.46228 26.937V26.4869C8.46228 26.4705 8.4804 26.4572 8.50289 26.4572Z"/>
              </svg>
            `;
          }
        ]]]


  icon_hallway:
    styles:
      custom_fields:
        icon:
          - width: 70%
          - margin-top: 1%
          - margin-left: 5%
    custom_fields:
      icon: >
        [[[
          let paths = `              
              <path d="M.69.556C.68.603.386 6.72.386 25.68L.66 49.596l24.255.281 24.562-.318.137-23.477L49.303.556C35.853.144 37.787.182 24.946.123zm26.441 
              1.982c.087.087.02.193-.318.493-.965.226-1.194.319-1.786.338-.818-.083-.604-.465-.868-.888.164-.125.415-.145 1.526-.106.868.03 1.37.087 1.449.164zm-6.787 
              1.351c-1.43 1.691-1.284-.113.223-1.063.526.379-.007.697-.223 1.063zm11.526.077c.232.84.213.986-.125.986-1.469-.526-1.57-2.556.125-.986zm-3.389-.454c-.255 
              1.308.165 2.155.763 2.849.415.29.434.327.493.868-2.608.187-2.101.221-2.221-3.446.199-1.105.612-.171.965-.27zm-5.059 2.453c-1.265 1.486-1.833 1.961-2.103 1.786-.098-.057-.115-.202-.057-.54.743-1.314 1.372-2.376 
              1.707-4 1.109.874.826 1.953.455 2.754zM17.872 3.59c.057.098-.223 1.67-.309 1.766-.038.038-.386-.057-.773-.223-.386-.155-.773-.28-.84-.28-.183 0-.242-.125-.183-.357.057-.223.58-.54 
              1.322-.811.57-.202.715-.223.782-.098zm15.631 2.016l-.106-.608c-.145-.773-.145-1.081.01-1.138 2.513.799 1.948 1.478.096 1.746zm-19.752.802c-.601-.162-1.428.564-.223-.782 1.868-.502 
              1.844.646.223.782zm22.126.068c-.098-.173-.077-.232.115-.377 2.224-.271 1.776.571-.115.377zM18.289 8.811c-.278-.053-.265-.147-.348-.193-.009-.226-.028-.451-.057-.675.079-1.912 2.269.364.405.868zm-1.817-.89c-.156.378-.627.426-.695.465s-.272-.73-.048-.89c.356-.112.986-.173.743.425zm16.617-.557c.368 1.205-.119 1.381-.502 1.902-.919-.494-.43-.008-.52-1.343.125-.183.686-.627.811-.648.02-.01.115.03.213.087zm-17.89 1.882c.348-.068.434-.038.743.202.193.155.348.327.348.395 0 
              .318-.85.405-2.103.232a22.84 22.84 0 0 0-1.197-.155c-1.816-2.726 1.636-.766 2.21-.675zm-4.334-.551c-.48 1.027-.924 1.234-1.681 1.661-.52 0-.801-.173-.656-.405 1.236-3.046 2.238-1.259 2.337-1.256zm28.016-.086c-.149 
              1.114-.737 1.408-1.303 1.777-.798.133-1.608.131-2.403.125-.483-.068-.54-.098-.54-.3 0-.155.125-.3.454-.512 1.199-.25 2.176-.384 3.081-1.477.715-.25.715-.25.715.386zm-12.28.259c.03.173-.048.183-1.149.183-.695-.009-1.197-.048-1.215-.106-.057-.173.213-.434.598-.57 1.01-.333 1.21.107 1.766.493zm-3.571.115c-.77.559-2.351.7-2.876.705 0-.106.03-.202.077-.202.317-.733.661-.537 1.227-.781a1.69 1.69 0 0 0 .82-.164c.867-.659.475.28.751.443zm5.638-.365c.223.135.493.193.898.202h.58l.377.58c-.281 1.243-1.765.115-2.531-.618.125-.405.232-.434.675-.164zm13.534 1.719c-.411 2.039-1.236 3.794-1.477 5.222-.425.502-.733.627-.811.318-.164-.57-.155-.927.03-1.621.106-.415.193-.936.193-1.168.978-1.107 1.275-1.567.58-2.732-1.461-2.291.137-1.686 1.486-.02zm-25.669 1.565c-.115.183-.52.098-.773-.164-.357-.395-.318-.57.155-.656 1.736-1.269 2.952-.874.618.82zm18.273-.523c.415.077.531.183.618.473.087.338.098.338-.405.445-.377.087-.425.068-.743-.202-2.301-.988-1.23-2.102.531-.715zm-10.785.454c-.3.077-.425.057-.859-.164-.85-.434-.638-.733.705-.975 3.946-1.104 3.86 2.311.155 1.139zm-9.972-.695c1.014 1.658.13.911-.878.57-.261 0-.445-.038-.415-.087-.433-.533.355-.648.376-.686a2.31 2.31 0 0 1 
              .918.202zm-3.484 1.168c.077.125.25 1.081.368 2.056.068.52-.407.987-.64.987-.135 0-.761-.736-.761-.881.369-1.486-.334-1.884-.908-2.596-.098-.386.087-.57.512-.531.541.346.89.727 1.43.965zm9.681-.068c.201.6-.801 1.653-1.138 2.365-.493.445-.52.445-.715.213-.145-.164-.386-1.496-.309-1.699.048-.115.705-.55 1.265-.831.454-.232.898-.25.898-.048zm-13.322.048c.692 1.92-.299 1.626-.551 2.026-.087-.223-.183-.357-.213-.3-.03.048-.068-.155-.077-.445-.02-.52.077-.782.434-1.215.173-.193.173-.193.405-.068zm24.434.106c.638.318 1.343.868 1.343 1.033 0 
              .087-.048.512-.115.956-.106.705-.135.801-.318.801-.99-.759-1.302-1.961-1.64-2.914.155-.115.318-.087.733.125zm-8.152 2.088c-1.192-.249-1.009-1.156-1.144-1.907.145-.261.202-.29.454-.25.902.409.785 1.436.69 2.157zm5.402-.602c.087.213-.24.715-.502.782-.183.048-.327-.009-.598-.223-.473-.386-.483-.54-.087-.793.261-.155.348-.29.395-.58.023-.228.138-.438.318-.58.928.155.988.085.474 1.392zm-13.826-1.245c.3.115.145.386-.57 1.043-.608.54-.752.638-.868.54-.173-.145-.183-.57-.03-.908.057-.145.318-.348.598-.493.512-.25.618-.28.868-.183zm21.905.463a1.25 1.25 0 0 1 
              .82 1.12c.038.434.03.483-.155.483-.106 0-.3-.145-.445-.318-.218-.252-.461-.482-.725-.686-.395-.318-.463-.415-.386-.561.115-.202.454-.223.888-.038zm7.067 1.989c-.29-.27-.309-.493-.048-.725.242-.223.242-.28-.01-.618.914-.214 1.043.699.057 1.343zm-20.976 3.332c-.25.098-.705.3-1.013.463-.695.368-.84.28-.598-.348.145-.395.202-.445.531-.502 1.127-.415 1.268-1.115 1.488-2.124 2.799-2.097.606 1.713-.408 2.51zm3.986-2.81c0 
              .686 0 .686-.28.715-.762-.551-.427-3.277.28-.715zm-9.933-1.168c.363 1.418.139.831-.164 1.863-.057.03-.473.068-.927.068-.801 0-.995-.068-.995-.368 0-.183 1.651-1.786 1.833-1.786.038 0 
              .145.098.25.223zm18.312 1.003c1.13 1.13 1.12 1.207-.193 1.226-.918.02-.995-.03-.995-.656-.35-.604-.104-.732 0-1.265 0-.327.395-.098 1.188.695zm-23.499-.163c.29-.338.29-.338.561-.173.377.223.377.386 0 1.013a24.68 24.68 0 0 0-.54.965c-.27.54-.502.473-.715-.193-.155-.483-.155-.502.057-.811.06-.337.425-.534.638-.801zm-6.767 1.758c-.733.223-.82-.048-.348-1.09 1.05-1.058 2.276.567.348 1.09zm37.998-1.052c-.03.057-.386.261-.793.434-1.023.445-1.081.463-1.081.261s1.023-1.4 1.188-1.4c.401.097.466.455.686.705zm-3.92-.3a4.44 4.44 0 0 0 
              .54.724l.368.415-.223.531c-.115.29-.25.531-.3.531-.077 0-.135-.087-.801-1.245l-.463-.82.28-.223c.357-.29.405-.28.598.087zm7.29 2.132c-.048.03-.318-.038-.608-.135-1.353-.389-1.053-.702-.098-1.728.522.486.593 1.165.706 1.863zm-17.503.27c.561.155.648.223.782.638.193.598.009.598-1.12.03-.936-.473-1.043-.561-1.226-.936-.106-.232-.232-.445-.28-.473-.125-.077-.106-.405.038-.454.651.2 1.053.713 1.806 1.194zm-9.981-.598c.483.338.715.695.715 1.063 0 
              .223-.057.309-.29.415-.427.561-.365-.046-.752-.098-1.369-1.507-1.083-1.433.327-1.381zm14.201.164c.077.223.055.812-.264 1.14.098.395-.724.261-.972.394-.463.038-.473.03-.473-.242.01-.599.358-1.141.898-1.4.318-.135.733-.077.811.106zm-17.86.3c-.057.531-.202.705-.618.705-.575.201-.894.593-1.274.937-.483.309-.686.28-.686-.068 0-.25.656-1.526.918-1.796.223-.223.3-.24.975-.213.7-.488.612.389.684.436zm21.894.03c1.476 2.502.748 2.295-.725 1.023-.309-.038-.512-.125-.561-.232-.125-.242-.213-.763-.145-.831.098-.098 1.149-.068 1.428.038zM5.042 19.186c-.493.057-.512.077-.58.395-.057.309-.82 1.245-.82 1.003 0-.057-.098-.098-.202-.098-.193 0-.202-.038-.155-.415.068-.454.309-1.303.434-1.496.048-.068.368-.164.705-.202 1.886-.225.927.27.618.812zm41.898.618c.145.415.202 1.37.087 1.486-.982-.619-1.117-1.374-2.046-1.796-.048-.386.048-.57.242-.512.894-.035 1.315.408 1.718.823zm-36.687-.289c.03.057-.038.368-.145.686-.136.445-.24.9-.309 1.361-.057.425-.155.84-.223.918-.098.135-.145.115-.425-.145-.504-.968-.386-.775.087-2.076 0-.193.638-.82.84-.831.067.005.13.037.173.087zm14.21.898c-.055.064-.214.229-.309.327-2.062 1.012-2.226-.442-.057-1.197.912-.038.261.617.368.868zm2.646-.705c1.513 1.199.842 1.458.387 1.421l-.87.055-.338-.686c-.649-.449.09-.824.106-.965.125-.009.445.077.715.173zm13.833.618c.27.25.348.395.348.656 0 
              .183.068.54.145.801.164.55.068 1.052-.242 1.215-.395.213-.454.125-.531-.648-.038-.405-.125-.975-.202-1.256-.193-.743-.173-1.09.057-1.09.038 0 
              .232.145.425.318zM7.164 21.957a5.7 5.7 0 0 0-.84.715c-.085.679-.611.206-.743.25-.202-.145-.425-.213-.715-.213-.148-1.986 5.629-3.369 2.299-.752zm10.745-1.158c-.098.27-.434.463-1.09.648-.55.145-.618.135-.743-.135-1.552-.401.531-.659 1.138-.801l.782.03zm.627 1.978c-.489.817-.164 1.507-.106 2.114.03 1.13.02 1.265-.145 1.411-.232.223-.28.213-.55-.02-.339-.159-.567-.372-.588-.83.345-.89.315-1.4.554-2.222.006-1.098 1.615-1.238.833-.452zm13.389-1.428s.381.469.29 1.719c-.338-.173-.445-.29-.531-.608a6.55 6.55 0 0 0-.386-.878c-.327-.58-.28-.859.125-.752.422-.102.374.388.501.52zm2.414-.319a1.65 1.65 0 0 1 
              .098.54c0 .29-.01.29-.357.223-.618-.106-1.381-.502-1.381-.705 0-.28.077-.309.84-.309.675 0 .715.009.801.25zm11.179 2.308c-1.03.27-1.293.118-1.989-.6-.831-.52-1.39-1.168-1.351-1.583 1.6.433 6.03.873 3.339 2.183zm-23.855-1.256c.115.318.202.733.193.918-.155.523-.595.658-.763.82-1.422.558-.773-.918.193-2.346.098.02.25.261.377.608zm7.984-.115c.473.618.84 1.893.618 2.124-.098.115-.202.087-.608-.155-1.013-.598-1.043-.627-.965-1.09a3 3 0 0 1 
              .193-.695c-.064-.388.173-.345.24-.483.223 0 .348.068.52.3zm7.83.405c-.402.54-.989.54-1.631.715-.261-.348-.445-.675-.445-.793 1.575-1.074 1.586-.295 2.076.077zm-25.043.986c-.135.27.03.868.318 1.178.309.318.309.415.038.725-.632 1.542-.069 2.014-1.458 1.553-.125-.405-.115-2.674.009-3.416.955-1.238.494-.601 1.09-.038zm-8.621 1.052c.155 1.588-.69 1.158-.945 1.293-.057-.213-.087-.793-.077-1.275.457-1.671.571-1.467 1.023-.02zm34.832-1.322c.3-.25.377.057.405 1.69.155 2.087.002 2.162-.965 2.52-.106.106-.173-.445-.087-.618-.676-1.33-.156-1.916.223-3.379.091-.207.312-.156.425-.213zm-23.855 1.167c-.223 0-.173-.425.077-.648 1.938-.812 2.102.348-.077.648zm20.891.3c-.632.737-.27.681-.945-.163-.135-.164-.271-.022-.377-.213.239-.905.899-.525 1.322.376zm-3.089 1.862c-1.002-.057-.542-.717-.483-1.766l.01-.811c1.558.252 1.176 1.27.473 2.577zm14.906-1.321c-.283 1.707-.796 2.039-.927.512-.27-.751.161-.909.261-1.303.588-.25.598-.232.665.793zm-38.788 1.6c.057.145.009.173-.28.173-.231-.005-.459-.051-.675-.135-.318-.135-.927-.656-.927-.811 0-.173.242-.588.27-.463.657.303 1.184.84 1.612 1.236zm12.376-.261c.85.608.82.561.588 1.188l-.28.773c-.077.202-.098.213-.357.077-.348-.183-.84-1.168-.936-1.874.261-1.03.361-.996.986-.164zm9.199-.086c0 
              .223-.377 1.283-.638 1.796-.202.395-.28.463-.52.463-.213 0-.29-.048-.29-.173 0-.098-.087-.425-.202-.733-.538-.551.225-.786.3-1.043.657-.321.275-.234 1.351-.309zm-24.057.608c.9.555 1.662 1.664 1.969 2.221-.057.03-.395.038-.752.009-1.417-.953-2.21-1.23-3.541-1.446-.071-.967-.484-.918.743-.859.719-.282 1.193-.026 1.583.077zm11.942.106c.28.115.473.27.502.395.126.337.271.666.434.986.425.868.395 1.003-.183.868-.29-.068-.377-.135-.395-.318-.068-.58-.309-1.013-.695-1.256-.29-.183-.386-.3-.386-.493 0-.434.087-.454.725-.183zm-8.563.115c.048.068.115.425.135.801.03.368.145.995.261 1.39.28.918.164 1.023-.493.473-.357-.309-.445-.445-.405-.608.03-.115-.038-.473-.155-.793-.155-.463-.173-.638-.098-.85.173-.454.55-.656.752-.415zm5.279.945c-.392.236-.866.232-1.303.27-.483.145-1.013.03-.936-.202-.426-.473.119-.256.28-.598.332-.261.734-.288 1.101-.386 1.028-.01.762.258.858.915zm18.045-.908c.135.357.057.52-.327.675-.473.193-.724.531-.82 1.081-.068.425-.28.598-.733.598-.25 0-.232-.213.098-.743.2-.648.694-1.206 1.015-1.565.493-.232.695-.242.773-.048zm12.58.3c2.172.768-.262 1.115-1.245 1.168l-.483-.03c-.052.476-.497.816-.686 1.052-.463.098-.908.068-1.013-.068-.25-.3.483-1.158 1.351-1.593.928-.844.946-.998 2.076-.531zm-8.466 1.352c-.318.048-.434.02-.502-.106-.057-.106-.213-.155-.502-.155-.524-1.921 1.036-.784 1.005.261zm4.19-1.025c.29.348.309.473.098.868-.077.164-.183.54-.232.84-.077.445-.155.608-.434.859-.183.173-.377.318-.425.318-.193 0-.202-.368-.03-.878a9.21 9.21 0 0 0 
              .309-1.197c.135-.782.25-1.111.377-1.111.048 0 .202.135.338.3zm-24.212.677c.415.125.733.425.695.638-.03.145-.145.173-.715.202-.801.03-1.003-.087-1.003-.608 0-.445.173-.483 1.023-.232zM5.478 31.027c0 
              .202-.02.213-.733.155-1.043-.098-1.197-.193-1.4-.878-.24-.82-.27-1.313-.057-1.303 1.018.664 1.461 1.531 2.191 2.026zm18.392-1.874c.087.087.27.395.395.695.232.512.232.54.068.665-.318.232-1.322-.098-1.961-.648-.405-.348-.357-.434.445-.686.724-.223.859-.232 1.052-.03zm3.582.057c.831.29.868.463.202.908-.763.512-1.874.695-1.844.3.02-.261.715-1.428.85-1.428.057 0 
              .415.106.793.223zm18.971 2.434c-.048.02-.463.077-.927.106-.705.362-.736-.248-.773-.261.098-.454.115-.473.463-.483 1.737-1.039 2.258-2.322 1.237.638zm-33.412-1.39c.223.115.434.309.483.415.106.3.28.415.743.493.937.111.495.541.637.781.02.25-.009.28-.318.309-.569.296-.695-.002-1.283-.106-.164-.125-.782-1.381-.888-1.833-.087-.327.077-.348.627-.057zm24.772.318c.03.077-.155.54-.415 1.043l-.463.898-.793.03c-.752.03-.801.02-.801-.173a2.13 2.13 0 0 1 
              .135-.531c.135-.309.173-.338.561-.338.434 0 .656-.125.656-.368 0-.183.223-.386.598-.55.405-.173.454-.173.52-.009zm-18.497.715c-.308 1.189-.567 1.136-1.853 1.158-.125-.193-.125-.24.03-.512a2.58 2.58 0 0 1 1.003-.936c.24-.115.327-.125.561-.009.145.068.261.202.261.3zm2.103-.25c.057.057.463.28.908.502.733.368.811.434 1.081.945.232.425.27.58.183.665s-.28-.02-.831-.463c-.483-.386-.868-.618-1.168-.695-.386-.098-.483-.164-.598-.454-.087-.193-.125-.415-.098-.483.068-.164.368-.173.52-.02zm7.192 1.043c-.473.106-.618.193-1.063.638-.84.868-1.265.57-.531-.386a1.69 1.69 0 0 1 
              .936-.686c.313-.115.617-.254.908-.415.806.6.371.2-.25.849zm3.282-.812c.454.232.724.512.84.868-.437 1.143-.483.978-1.457.098-.173-.29-.25-.927-.115-1.052.106-.115.415-.077.733.087zM11.995 33.77c.115 1.636.067.758-.695.598-.115-.24-.348-.588-.512-.782-.29-.318-.3-.357-.155-.561.087-.115.155-.29.155-.368 0-.164.183-.386.309-.386.326.441.624 1.029.898 1.499zm-6.98-1.051c1.228.952.579 1.04-.463 1.382-.164-.135-.52-1.081-.52-1.39 0-.3.068-.3.986.01zm11.335 2.839c-.155 0-.483-.242-1.013-.763-.733-.695-.793-.782-.763-1.111.02-.368.068-.415.242-.24.057.057.348.087.686.068.318-.01.561 0 .531.038 2.528-.193.881.317.318 2.008zm22.976-2.501c.183.512.155.715-.135 1.033-.276.364-.488.723-.714 1.081-.164 0-.656-.29-.656-.386 0-.173 1.207-2.124 1.293-2.095.048.02.145.183.213.368zm6.671.27c-.077.386-.618 1.553-.715 1.553-.125 0-.25-.115-.648-.618-.473-.588-.415-.705.483-.986.918-.29.945-.29.878.048zM8.364 34.784c-.193 0-.782-.473-.743-.588 2.008-.981 2.487-.87.743.588zm25.632.937c-.357.232-.52.038-.405-.483-.113-1.405-.213-1.247.995-1.408 1.888-.352.004 1.402-.59 1.891zm-23.508.27c-.083.301-.141.608-.173.918l-.057.531c-.594-.104-.85.382-1.061.542-.068.28-.087.29-.512.261-.348-.02-.463-.068-.483-.202-.057-.309.057-.598.29-.695 1.29-.927.934-2.145 1.37-2.925.944-.119.702.246.625 1.571zm29.879-.946c.086 1.486.476 1.982 1.313 3.253 0 
              .348 0 .348-.415.348-.933-.493-1.33-.94-1.631-1.738-.193-1.101-.202-1.477-.068-1.961.135-.493.368-.463.801.098zM6.636 37.148c-.24.213-.357.125-.715-.54-.406-.738.068-1.101.474-1.728.728.509.34 1.609.242 2.269zm12.059-1.863c.363.903.559 1.607 1.178 2.258-.068.232-.125.28-.357.261-.368-.03-1.003-.368-1.486-.773-.6-.786-.284-.757-.145-1.438.173-.752.213-.763.811-.309zm13.572 1.062l.068.638-.415.309c-1.258.643-2.883 1.059-1.293-.231.318-.135.338-.164.338-.638.559-1.421 1.07-1.258 1.302-.079zm-9.316.126c-.232.125-.29.213-.29.483 0 
              .445-.232.656-.618.58-.164-.038-.377-.155-.473-.27-.173-.202-.173-.213.068-.425a.63.63 0 0 0 .25-.52c0-.213.087-.405.261-.588 1.17-.25.607.195.802.74zm21.238.192c-1.225 2.237-.777-.161-.918-.957.761-.034.594.133.918.957zm-30.68-.792c.173.173.493.454.695.638.309.261.357.357.28.483-.135.202-.638.164-1.052-.087-.368-.232-.656-.793-.58-1.12.087-.318.27-.29.656.087zm13.884 1.178c0-.28-.048-.377-.29-.512-.386-.223-.368-.445.068-.743 1.253-.094 1.978 2.321.223 1.256zm-1.962.937c1.791.617 2.28.046 1.795 1.246-.502.202-.733.223-2.103.232-1.593 0-2.346-.125-2.799-.483-.193-.145-.193-.145.077-.386.876-.611 2.087-.525 3.029-.609zm-9.075.252c1.582 1.081 1.589 1.38 0 1.023-.232-.223-.55-.445-.705-.473-.454-.098-.57-.193-.598-.512-.03-.242.009-.3.193-.338.502-.098.656-.048 1.111.3zm18.178.06c0 
              .068.068.183.145.25.25.202.164.357-.27.463-.3.102-.578.259-.82.463-.386.327-.445.348-.868.29-.82-.106-.801-.135.656-1.111.715-.483 1.158-.618 1.158-.357zM9.117 39.334c1.447 1.72 1.289 2.787-.415 1.168-.58-.705-.686-.936-.52-1.13.145-.173.348-.183.936-.038zm30.941 2.501c-.098 0-.309-.483-.309-.725.208-.302.414-.669.581-.918 1.881-.858 1.436.135-.27 1.643zm-24.608-2.066c.463.077.445.25-.098.638-1.242.401-2.382.766-3.473 1.67-.507.293-.182-.259-.318-.452.855-2.092 2.425-1.854 3.889-1.856zm22.512.473l-.03.357c.194.606.244 1.316.221 1.777-.077.03-.327-.01-.55-.077-1.071-1.201-1.501-1.435-2.789-1.294l-.348-.348c-.24-.24-.327-.395-.28-.52 1.058-.285 2.443-.015 3.775.105zm-17.204 1.013c-.357 0-.445-.048-.743-.425-.348-.425-.445-.733-.223-.724.477.149.795.678.965 1.149zm9.579-.965c.038.057-.125.318-.357.58-.377.434-.454.473-.85.483-2.299-.137-1.199-.471.288-.917.715-.261.831-.28.918-.145zm-11.731.967c-.073 1.218-.095.786-.782 1.361-.57.3-.656-.763-.106-1.39.202-.232.752-.223.888.03zm13.593.098c.536.527.42.874.357 1.651-.125.193-.415.068-.811-.338-.52-.531-.648-1.101-.29-1.351.29-.202.357-.193.743.038zm-6.998 2.299c-.3.048-.55.048-.686-.01-1.694.087-1.302-1.689.561-1.37 3.173.157.793.836.125 1.381zm-3.832-1.061c1.612 1.099 1.684 2.738 1.553 3.764-.425.377-.598.415-.82.183.284-2.895-1.497-1.588-1.333-4.209.106-.173.202-.125.598.261zm7.761.155c0 
              .763-.087.918-.733 1.293-.751.928-.618 1.731-.656 2.646-.183.25-.348.213-.752-.183-.719-1.476.519-2.747 1.428-3.689.561-.493.715-.502.715-.068zm-16.265 1.312c-.588-.338-.763-.52-.695-.715 1.77-.23 3.312 1.188.695.715zm23.332.581c-.346.043-.529-.46-.745-.733.223-.145.3-.145.638-.038.368.125.405.115.561-.068 1.972-.467.589.332-.454.839zM17.131 46.29c-.03.087-.309-.01-.927-.309-.817-1.532.901-.459.927.309zm17.54-.984c.155 0 
              .125.057-.145.327-.445.415-1.361.773-1.825.686-.479-.065.024-.504.039-.82.847-1.037.83-.585 1.931-.193zm-14.57 2.316c-.598-.223-1.282-.926-1.446-1.476-.232-.763-.202-.84.24-.84.933.558 1.153 1.758 1.205 2.316zm11.152-1.939c0 
              .135-.087.434-.193.665-.155.338-.28.454-.695.648-.705.327-.793.318-.724-.106.077-.454.223-.618.55-.618.242 0 
              .27-.038.327-.463.057-.463.057-.463.395-.425.29.038.338.077.338.3zm-5.666 1.14c.115.106.202.135.232.068 1.167-.057.449.767-.793.82-1.82-.192-1.97-.057-.868-.859.833-.518.681-.049 1.428-.03z"/>
            `;
          if (variables.state === 'on' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50">
              ${paths}
            </svg>
          `;
          }
          return variables.state === 'on' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50">
              ${paths}
            </svg>
          ` : `
            <svg viewBox="0 0 50 50" fill="#9DA0A2">
              ${paths}
            </svg>
          `;
        ]]]


  icon_ikea_pendant:
    styles:
      custom_fields:
        icon:
          - width: 85%
          #- margin-left: -2%
          - margin-top: -5%
    custom_fields:
      icon: >
        [[[
          let path = `
              <path id="pendant-wire" fill="#9DA0A2" d="M21.7607 0.569C21.5577 0.569 21.394 0.629778 21.394 0.704774V9.48882C21.6318 9.48367 21.858 9.4765 22.1395 9.47685C22.3506 9.4771 22.5131 9.48366 22.6976 9.4875V0.704774C22.6976 0.629778 22.5339 0.569 22.3309 0.569H21.7607Z"/>
            `,
            gradient = `
              <defs>
                <radialGradient id="paint0_ikea_pendant" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(22.2192 36.8116) rotate(-179.702) scale(41.8397 7.02249)">
                  <stop stop-color="#FFD42A"/>
                  <stop offset="1" stop-color="#FFD42A" stop-opacity="0"/>
                </radialGradient>
              </defs>
            `;
          if (variables.state === 'on') {
            return `
              <svg viewBox="0 0 50 50"> ${gradient}
                ${path}
                <path id="pendant-cup" fill="url(#paint0_ikea_pendant)" d="M40.2764 39.992C40.2764 39.992 40.9893 41.0509 22.2572 41.1429C4.1042 41.232 3.70343 40.1292 3.70343 40.1292C3.67575 40.008 4.2856 39.6738 10.7797 39.3808C13.4663 39.2596 16.9988 39.1348 22.1837 39.1313C26.8647 39.1282 30.387 39.2736 32.959 39.3614C39.9008 39.5982 40.2331 39.8737 40.2764 39.992Z"/>
                <path id="pendant-body" fill="#CECBBE" d="M22.1395 10.0306C18.7254 10.0243 18.664 10.6793 18.664 10.6793L18.5311 16.236C18.4979 17.6371 18.0787 19.2864 17.1953 20.3743C17.1953 20.3743 15.7529 22.6386 10.8568 23.9263C10.8568 23.9263 5.16269 25.5002 2.3163 28.5159C2.3163 28.5159 -0.268441 30.9533 0.0577478 34.5381C0.270331 36.8742 0.957657 38.7018 3.10407 40.4574C3.10407 40.4574 5.30567 41.5602 22.3933 41.4184C39.3933 41.2774 41.2253 40.2761 41.2253 40.2761C43.0616 38.6544 44.0917 36.0705 43.9593 33.6999C43.727 29.5389 41.2253 27.8833 41.2253 27.8833C38.865 25.3915 33.4886 24.019 33.4886 24.019C27.3491 22.3063 26.5398 19.9048 26.5398 19.9048C25.6464 18.5242 25.4258 16.5359 25.4235 16.2178L25.3833 10.7055C25.3833 10.7055 25.3579 10.0364 22.1395 10.0306V10.0306ZM22.1838 39.1317C26.8649 39.1286 30.3866 39.2736 32.9587 39.3614C33.8265 39.391 34.5901 39.4217 35.2636 39.4521H35.2657C36.6115 39.5128 37.596 39.5738 38.3139 39.6333C39.0323 39.693 39.4854 39.7504 39.7727 39.8026C39.9163 39.8287 40.0181 39.8541 40.091 39.8772C40.1638 39.9003 40.2073 39.9223 40.2341 39.9417C40.2608 39.961 40.2709 39.9773 40.2764 39.992C40.2764 39.992 40.2874 40.0092 40.2703 40.0383C40.2361 40.0966 40.0897 40.2052 39.5148 40.3325C39.2274 40.3962 38.8325 40.4629 38.2918 40.5319C38.0214 40.5665 37.7136 40.6024 37.365 40.6367C37.017 40.6711 36.6261 40.7043 36.1904 40.7375C35.3181 40.8039 34.2595 40.8687 32.9769 40.9248H32.9749C31.6918 40.981 30.1836 41.0281 28.4114 41.0659H28.4095C26.6362 41.1036 24.5999 41.1309 22.2584 41.1424C19.9893 41.1535 17.9966 41.1459 16.2483 41.1243C14.5001 41.1027 12.9962 41.067 11.701 41.0216C10.4114 40.9763 9.33052 40.9203 8.42306 40.8604C8.41965 40.8602 8.41429 40.8606 8.41089 40.8604H8.40893C8.40315 40.86 8.40057 40.8587 8.39479 40.8583C7.49868 40.7988 6.77329 40.7363 6.18665 40.671C6.18342 40.6707 6.17778 40.6693 6.17456 40.669H6.17254C6.16566 40.6682 6.16327 40.6677 6.15642 40.667C5.57423 40.6016 5.127 40.5358 4.7884 40.4735C4.44582 40.4105 4.21161 40.3513 4.051 40.3002C3.89039 40.2493 3.80326 40.2053 3.75685 40.1753C3.71043 40.1454 3.70446 40.129 3.70446 40.129C3.70136 40.1154 3.71031 40.0993 3.73066 40.0806C3.73274 40.0788 3.73227 40.0765 3.73469 40.0746C3.76169 40.0534 3.80848 40.0284 3.88579 40.0021C4.0405 39.9492 4.31614 39.8863 4.79646 39.8187C5.27641 39.7512 5.9614 39.6794 6.93009 39.6052C7.41513 39.5679 7.97227 39.5298 8.61039 39.4923C9.24851 39.455 9.96854 39.4182 10.7803 39.3815C12.1237 39.321 13.6782 39.2592 15.5452 39.2123C17.4121 39.1654 19.5914 39.1334 22.1838 39.1317V39.1317Z"/>
              </svg>
            `;
          }
          if (variables.state === 'off') {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
                <path id="pendant-body" fill="#9DA0A2" d="M22.1395 10.0306C18.7254 10.0243 18.664 10.6793 18.664 10.6793L18.5311 16.236C18.4979 17.6371 18.0787 19.2864 17.1953 20.3743C17.1953 20.3743 15.7529 22.6386 10.8568 23.9263C10.8568 23.9263 5.16269 25.5002 2.3163 28.5159C2.3163 28.5159 -0.268441 30.9533 0.0577478 34.5381C0.270331 36.8742 0.957657 38.7018 3.10407 40.4574C3.10407 40.4574 5.30567 41.5602 22.3933 41.4184C39.3933 41.2774 41.2253 40.2761 41.2253 40.2761C43.0616 38.6544 44.0917 36.0705 43.9593 33.6999C43.727 29.5389 41.2253 27.8833 41.2253 27.8833C38.865 25.3915 33.4886 24.019 33.4886 24.019C27.3491 22.3063 26.5398 19.9048 26.5398 19.9048C25.6464 18.5242 25.4258 16.5359 25.4235 16.2178L25.3833 10.7055C25.3833 10.7055 25.3579 10.0364 22.1395 10.0306V10.0306ZM22.1838 39.1317C26.8649 39.1286 30.3866 39.2736 32.9587 39.3614C33.8265 39.391 34.5901 39.4217 35.2636 39.4521H35.2657C36.6115 39.5128 37.596 39.5738 38.3139 39.6333C39.0323 39.693 39.4854 39.7504 39.7727 39.8026C39.9163 39.8287 40.0181 39.8541 40.091 39.8772C40.1638 39.9003 40.2073 39.9223 40.2341 39.9417C40.2608 39.961 40.2709 39.9773 40.2764 39.992C40.2764 39.992 40.2874 40.0092 40.2703 40.0383C40.2361 40.0966 40.0897 40.2052 39.5148 40.3325C39.2274 40.3962 38.8325 40.4629 38.2918 40.5319C38.0214 40.5665 37.7136 40.6024 37.365 40.6367C37.017 40.6711 36.6261 40.7043 36.1904 40.7375C35.3181 40.8039 34.2595 40.8687 32.9769 40.9248H32.9749C31.6918 40.981 30.1836 41.0281 28.4114 41.0659H28.4095C26.6362 41.1036 24.5999 41.1309 22.2584 41.1424C19.9893 41.1535 17.9966 41.1459 16.2483 41.1243C14.5001 41.1027 12.9962 41.067 11.701 41.0216C10.4114 40.9763 9.33052 40.9203 8.42306 40.8604C8.41965 40.8602 8.41429 40.8606 8.41089 40.8604H8.40893C8.40315 40.86 8.40057 40.8587 8.39479 40.8583C7.49868 40.7988 6.77329 40.7363 6.18665 40.671C6.18342 40.6707 6.17778 40.6693 6.17456 40.669H6.17254C6.16566 40.6682 6.16327 40.6677 6.15642 40.667C5.57423 40.6016 5.127 40.5358 4.7884 40.4735C4.44582 40.4105 4.21161 40.3513 4.051 40.3002C3.89039 40.2493 3.80326 40.2053 3.75685 40.1753C3.71043 40.1454 3.70446 40.129 3.70446 40.129C3.70136 40.1154 3.71031 40.0993 3.73066 40.0806C3.73274 40.0788 3.73227 40.0765 3.73469 40.0746C3.76169 40.0534 3.80848 40.0284 3.88579 40.0021C4.0405 39.9492 4.31614 39.8863 4.79646 39.8187C5.27641 39.7512 5.9614 39.6794 6.93009 39.6052C7.41513 39.5679 7.97227 39.5298 8.61039 39.4923C9.24851 39.455 9.96854 39.4182 10.7803 39.3815C12.1237 39.321 13.6782 39.2592 15.5452 39.2123C17.4121 39.1654 19.5914 39.1334 22.1838 39.1317V39.1317Z"/>
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
                <path id="pendant-body" fill="#9DA0A2" d="M22.1395 10.0306C18.7254 10.0243 18.664 10.6793 18.664 10.6793L18.5311 16.236C18.4979 17.6371 18.0787 19.2864 17.1953 20.3743C17.1953 20.3743 15.7529 22.6386 10.8568 23.9263C10.8568 23.9263 5.16269 25.5002 2.3163 28.5159C2.3163 28.5159 -0.268441 30.9533 0.0577478 34.5381C0.270331 36.8742 0.957657 38.7018 3.10407 40.4574C3.10407 40.4574 5.30567 41.5602 22.3933 41.4184C39.3933 41.2774 41.2253 40.2761 41.2253 40.2761C43.0616 38.6544 44.0917 36.0705 43.9593 33.6999C43.727 29.5389 41.2253 27.8833 41.2253 27.8833C38.865 25.3915 33.4886 24.019 33.4886 24.019C27.3491 22.3063 26.5398 19.9048 26.5398 19.9048C25.6464 18.5242 25.4258 16.5359 25.4235 16.2178L25.3833 10.7055C25.3833 10.7055 25.3579 10.0364 22.1395 10.0306V10.0306ZM22.1838 39.1317C26.8649 39.1286 30.3866 39.2736 32.9587 39.3614C33.8265 39.391 34.5901 39.4217 35.2636 39.4521H35.2657C36.6115 39.5128 37.596 39.5738 38.3139 39.6333C39.0323 39.693 39.4854 39.7504 39.7727 39.8026C39.9163 39.8287 40.0181 39.8541 40.091 39.8772C40.1638 39.9003 40.2073 39.9223 40.2341 39.9417C40.2608 39.961 40.2709 39.9773 40.2764 39.992C40.2764 39.992 40.2874 40.0092 40.2703 40.0383C40.2361 40.0966 40.0897 40.2052 39.5148 40.3325C39.2274 40.3962 38.8325 40.4629 38.2918 40.5319C38.0214 40.5665 37.7136 40.6024 37.365 40.6367C37.017 40.6711 36.6261 40.7043 36.1904 40.7375C35.3181 40.8039 34.2595 40.8687 32.9769 40.9248H32.9749C31.6918 40.981 30.1836 41.0281 28.4114 41.0659H28.4095C26.6362 41.1036 24.5999 41.1309 22.2584 41.1424C19.9893 41.1535 17.9966 41.1459 16.2483 41.1243C14.5001 41.1027 12.9962 41.067 11.701 41.0216C10.4114 40.9763 9.33052 40.9203 8.42306 40.8604C8.41965 40.8602 8.41429 40.8606 8.41089 40.8604H8.40893C8.40315 40.86 8.40057 40.8587 8.39479 40.8583C7.49868 40.7988 6.77329 40.7363 6.18665 40.671C6.18342 40.6707 6.17778 40.6693 6.17456 40.669H6.17254C6.16566 40.6682 6.16327 40.6677 6.15642 40.667C5.57423 40.6016 5.127 40.5358 4.7884 40.4735C4.44582 40.4105 4.21161 40.3513 4.051 40.3002C3.89039 40.2493 3.80326 40.2053 3.75685 40.1753C3.71043 40.1454 3.70446 40.129 3.70446 40.129C3.70136 40.1154 3.71031 40.0993 3.73066 40.0806C3.73274 40.0788 3.73227 40.0765 3.73469 40.0746C3.76169 40.0534 3.80848 40.0284 3.88579 40.0021C4.0405 39.9492 4.31614 39.8863 4.79646 39.8187C5.27641 39.7512 5.9614 39.6794 6.93009 39.6052C7.41513 39.5679 7.97227 39.5298 8.61039 39.4923C9.24851 39.455 9.96854 39.4182 10.7803 39.3815C12.1237 39.321 13.6782 39.2592 15.5452 39.2123C17.4121 39.1654 19.5914 39.1334 22.1838 39.1317V39.1317Z"/>
              </svg>
            `;
          }
        ]]]


  icon_hue_devote:
    styles:
      custom_fields:
        icon:
          - width: 78%
          - margin-left: -18%
          - color: >
              [[[ return variables.state === 'on' ? '#000000' : '#9da0a2'; ]]]
    custom_fields:
      icon: >
        <ha-icon icon="hue:pendant-devote-solid"></ha-icon>


  icon_shade:
    styles:
      custom_fields:
        icon:
          - width: 77%
          - margin-left: -15%
          - margin-top: 1%
    custom_fields:
      icon: >
        [[[
          let state = variables.state === 'on' && variables.timeout < 2000 ? 'on' : null;
          return `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes on {
                  0% {
                    transform: scale(0.85);
                  }
                  20% {
                    transform: scale(1.1);
                  }
                  40% {
                    transform: scale(0.95);
                  }
                  60% {
                    transform: scale(1.03);
                  }
                  80% {
                    transform: scale(0.97);
                  }
                  100% {
                    transform: scale(1);
                  }
                }
                .on {
                  animation: on 0.8s;
                  transform-origin: center;
                }
              </style>
              <path fill="#9da0a2" d="M26.4 25.6c.6-.3 1.1-.7 1.1-1.3L25 17.9l-2.5 6.4c0 .7.6 1.1 1.1 1.3v20.8h-5.5v2.7h13.7v-2.7h-5.5V25.6z"/>
              <path class="${state}" fill="var(--light-color)" d="M24.6.9l-9.4.5c-.6.1-1.9 0-2.5 2.1s-2.4 9.1-4 16.9c-.2.7-.5 2-.5 2.3s-.4 1.6.9 1.6c.8.1 7.4.3 15.9.3 8.6 0 15.1-.3 15.9-.3 1.3-.1.9-1.3.9-1.6s-.3-1.6-.5-2.3c-1.6-7.8-3.4-14.8-4-16.9s-1.9-2-2.5-2.1c-1.6-.2-6.9-.4-9.4-.5"/>
            </svg>
          `;
        ]]]


  icon_bed:
    styles:
      custom_fields:
        icon:
          - width: 77%
          - margin-top: -4%
    custom_fields:
      icon: >
        [[[
          let path = `
            <path id="back" fill="#9da0a2" d="M3.735 21.368s1.939-1.654 4.589-2.546l.032-3.923c.01-1.218 1.569-2.75 7.743-2.609 0 0 7.636-.459 7.987 2.525l.024 2.068 1.8.008.042-2.05c.015-.718.647-2.912 9.152-2.52 0 0 6.317-.179 6.577 2.526l-.001 3.945c3.079 1.017 4.625 2.552 4.625 2.552l-.013-12.992s-.111-2.362-2.757-2.55l-37.341.025c-.955.007-2.331 1.078-2.461 2.411z"/>
            <rect id="frame" fill="#9da0a2" width="46.298" height="10.179" x="1.859" y="32.647" rx=".246" ry=".247"/>
            `;
          if (variables.state === 'yes') {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
                <path id="mattress" fill="#707070" d="M1.92 30.764c-.006-4.229 1.175-8.174 7.17-10.228 0 0 4.883-1.849 16.145-1.755 11.034.092 15.038 1.565 15.038 1.565 6.481 1.701 7.935 6.212 7.862 10.441"/>
              </svg>
            `;
          }
          if (variables.state === 'no') {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
                <path id="mattress" fill="#9da0a2" d="M1.92 30.764c-.006-4.229 1.175-8.174 7.17-10.228 0 0 4.883-1.849 16.145-1.755 11.034.092 15.038 1.565 15.038 1.565 6.481 1.701 7.935 6.212 7.862 10.441"/>
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
                <path id="mattress" fill="#9da0a2" d="M1.92 30.764c-.006-4.229 1.175-8.174 7.17-10.228 0 0 4.883-1.849 16.145-1.755 11.034.092 15.038 1.565 15.038 1.565 6.481 1.701 7.935 6.212 7.862 10.441"/>
              </svg>
            `;
          }
        ]]]


  icon_sofa:
    styles:
      custom_fields:
        icon:
          - width: 77%
          - margin-top: -8%
          - margin-left: 1%
    custom_fields:
      icon: >
        [[[
          let path = `
              <path id="back" fill="#9da0a2" d="M 12.128906 8.0117188 C 7.510127 8.0117188 4.4082031 10.700165 4.4082031 14.703125 L 4.4082031 18.640625 C 11.147289 18.573765 12.086705 19.589933 12.529297 24.763672 L 24.269531 24.763672 L 24.261719 8.0117188 L 12.128906 8.0117188 z M 25.839844 8.0117188 L 25.839844 24.763672 L 37.421875 24.763672 C 37.654133 20.501188 38.980505 18.157129 45.59375 18.775391 L 45.59375 14.703125 C 45.593658 10.700165 42.489873 8.0117188 37.871094 8.0117188 L 25.839844 8.0117188 z"/>
            `;
          if (variables.state === 'yes') {
            return `
              <svg viewBox="0 0 50 50">
                <path id="back" fill="#968f8f" d="M 12.128906 8.0117188 C 7.510127 8.0117188 4.4082031 10.700165 4.4082031 14.703125 L 4.4082031 18.640625 C 11.147289 18.573765 12.086705 19.589933 12.529297 24.763672 L 24.269531 24.763672 L 24.261719 8.0117188 L 12.128906 8.0117188 z M 25.839844 8.0117188 L 25.839844 24.763672 L 37.421875 24.763672 C 37.654133 20.501188 38.980505 18.157129 45.59375 18.775391 L 45.59375 14.703125 C 45.593658 10.700165 42.489873 8.0117188 37.871094 8.0117188 L 25.839844 8.0117188 z"/>
                <path id="seat" fill="#5d3d35" d="M 5.9511719 20.367188 C 1.3320919 20.319978 1.3183594 22.445051 1.3183594 25 L 1.3183594 32.722656 C 1.3183594 34.425986 2.7029197 35.810547 4.40625 35.810547 L 4.40625 37.345703 C 4.40625 38.198895 5.0979804 38.890625 5.9511719 38.890625 L 12.128906 38.890625 C 12.982097 38.890625 13.673828 38.198895 13.673828 37.345703 L 13.673828 35.810547 L 36.326172 35.810547 L 36.326172 37.345703 C 36.326172 38.198895 37.017903 38.890625 37.871094 38.890625 L 44.048828 38.890625 C 44.90202 38.890625 45.59375 38.198895 45.59375 37.345703 L 45.59375 35.810547 C 47.29708 35.810547 48.681641 34.425986 48.681641 32.722656 L 48.681641 25 C 48.681734 22.445051 48.66819 20.380244 44.048828 20.367188 C 39.405812 20.354067 39.414062 22.445051 39.414062 25 L 39.414062 26.544922 L 10.585938 26.544922 L 10.585938 25 C 10.585938 22.445051 10.594267 20.414645 5.9511719 20.367188 z"/>
              </svg>
            `;
          }
          if (variables.state === 'no') {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
                <path id="seat" fill="#9da0a2" d="M 5.9511719 20.367188 C 1.3320919 20.319978 1.3183594 22.445051 1.3183594 25 L 1.3183594 32.722656 C 1.3183594 34.425986 2.7029197 35.810547 4.40625 35.810547 L 4.40625 37.345703 C 4.40625 38.198895 5.0979804 38.890625 5.9511719 38.890625 L 12.128906 38.890625 C 12.982097 38.890625 13.673828 38.198895 13.673828 37.345703 L 13.673828 35.810547 L 36.326172 35.810547 L 36.326172 37.345703 C 36.326172 38.198895 37.017903 38.890625 37.871094 38.890625 L 44.048828 38.890625 C 44.90202 38.890625 45.59375 38.198895 45.59375 37.345703 L 45.59375 35.810547 C 47.29708 35.810547 48.681641 34.425986 48.681641 32.722656 L 48.681641 25 C 48.681734 22.445051 48.66819 20.380244 44.048828 20.367188 C 39.405812 20.354067 39.414062 22.445051 39.414062 25 L 39.414062 26.544922 L 10.585938 26.544922 L 10.585938 25 C 10.585938 22.445051 10.594267 20.414645 5.9511719 20.367188 z"/>
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
                <path id="seat" fill="#9da0a2" d="M 5.9511719 20.367188 C 1.3320919 20.319978 1.3183594 22.445051 1.3183594 25 L 1.3183594 32.722656 C 1.3183594 34.425986 2.7029197 35.810547 4.40625 35.810547 L 4.40625 37.345703 C 4.40625 38.198895 5.0979804 38.890625 5.9511719 38.890625 L 12.128906 38.890625 C 12.982097 38.890625 13.673828 38.198895 13.673828 37.345703 L 13.673828 35.810547 L 36.326172 35.810547 L 36.326172 37.345703 C 36.326172 38.198895 37.017903 38.890625 37.871094 38.890625 L 44.048828 38.890625 C 44.90202 38.890625 45.59375 38.198895 45.59375 37.345703 L 45.59375 35.810547 C 47.29708 35.810547 48.681641 34.425986 48.681641 32.722656 L 48.681641 25 C 48.681734 22.445051 48.66819 20.380244 44.048828 20.367188 C 39.405812 20.354067 39.414062 22.445051 39.414062 25 L 39.414062 26.544922 L 10.585938 26.544922 L 10.585938 25 C 10.585938 22.445051 10.594267 20.414645 5.9511719 20.367188 z"/>
              </svg>
            `;
          }
        ]]]


  icon_kitchen:
    styles:
      custom_fields:
        icon:
          - width: 77%
          - margin-top: 3%
          - margin-left: -13%
    custom_fields:
      icon: >
        [[[
          let path = `
              <path fill="#9da0a2" d="M31.393.947c-.727.056-1.273.192-1.404.354-.049.056-.06.437-.079 2.688l-.023 2.658.015 5.391-.068 8.2c.188 9.555-.155 19.536.075 28.565.004.158.019.218.056.218.132 0 .994-.331 1.472-.565 2.477-1.209 4.1-3.456 5.177-7.169.67-2.319 1.152-5.395 1.544-9.849l.113-1.28.132-1.555.414-4.921.418-4.096c.015-.128.039-.268-.01-.268l-2.795.109h-1.611c-.167-.414-.235-.856-.309-1.186-.546-2.929-.203-8.008 1.035-15.399l.248-1.465-.098-.083c-.32-.279-2.715-.474-4.303-.35zM18.607 49.056c.727-.056 1.273-.192 1.404-.354.049-.056.06-.437.079-2.688l.023-2.658-.015-5.391.068-8.2c-.188-9.555.155-19.536-.075-28.565-.004-.158-.019-.218-.056-.218-.132 0-.994.331-1.472.565-2.477 1.209-4.1 3.456-5.177 7.169-.67 2.319-1.152 5.395-1.544 9.849l-.113 1.28-.132 1.555-.414 4.921-.418 4.096c-.015.128-.039.268.01.268l2.795-.109h1.611c.167.414.235.856.309 1.186.546 2.929.203 8.008-1.035 15.399l-.248 1.465.098.083c.32.279 2.715.474 4.303.35z"/>
            `;
          if (variables.state === 'on') {
            return `
              <svg viewBox="0 0 50 50">
                <path fill="#898a85" d="M31.393.947c-.727.056-1.273.192-1.404.354-.049.056-.06.437-.079 2.688l-.023 2.658.015 5.391-.068 8.2c.188 9.555-.155 19.536.075 28.565.004.158.019.218.056.218.132 0 .994-.331 1.472-.565 2.477-1.209 4.1-3.456 5.177-7.169.67-2.319 1.152-5.395 1.544-9.849l.113-1.28.132-1.555.414-4.921.418-4.096c.015-.128.039-.268-.01-.268l-2.795.109h-1.611c-.167-.414-.235-.856-.309-1.186-.546-2.929-.203-8.008 1.035-15.399l.248-1.465-.098-.083c-.32-.279-2.715-.474-4.303-.35zM18.607 49.056c.727-.056 1.273-.192 1.404-.354.049-.056.06-.437.079-2.688l.023-2.658-.015-5.391.068-8.2c-.188-9.555.155-19.536-.075-28.565-.004-.158-.019-.218-.056-.218-.132 0-.994.331-1.472.565-2.477 1.209-4.1 3.456-5.177 7.169-.67 2.319-1.152 5.395-1.544 9.849l-.113 1.28-.132 1.555-.414 4.921-.418 4.096c-.015.128-.039.268.01.268l2.795-.109h1.611c.167.414.235.856.309 1.186.546 2.929.203 8.008-1.035 15.399l-.248 1.465.098.083c.32.279 2.715.474 4.303.35z"/>
              </svg>
            `;
          }
          if (variables.state === 'off') {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
              </svg>
            `;
          }
        ]]]


  icon_display_cabinet:
    styles:
      custom_fields:
        icon:
          - width: 98%
          - margin-left: -29%
          - margin-top: -5%
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes on {
                from {
                  transform: scaleY(0);
                }
                to {
                  transform: scaleY(1);
                }
              }
              .on {
                animation: on 0.1s;
                transform-origin: -100% 46%;
                animation-fill-mode: forwards;
              }
              @keyframes off {
                from {
                  transform: scaleY(1);
                }
                to {
                  transform: scaleY(0);
                }
              }
              .off {
                animation: off 0.1s;
                transform-origin: -100% 46%;
                animation-fill-mode: forwards;
              }
            </style>
          `,
            path = `
              <g id="vitrineskap">
                <path id="bottom-list" fill="#9da0a2" d="M16.3284 44.0237L33.7012 44.0182C33.7012 44.0182 33.7104 44.1625 33.7104 44.328V45.263C33.7104 45.5613 33.7133 45.5617 33.3403 45.5617H16.682C16.3168 45.5617 16.3118 45.5613 16.3118 45.263V44.328C16.3118 44.1625 16.3284 44.0237 16.3284 44.0237V44.0237Z"/>
                <path id="cabinet" fill="#6e6e6e" d="M33.3097 4.32158H16.7125C16.4912 4.32158 16.3118 4.50096 16.3118 4.72223V45.161C16.3118 45.3823 16.4912 45.5616 16.7125 45.5616H33.3097C33.531 45.5616 33.7104 45.3823 33.7104 45.161V4.72223C33.7104 4.50096 33.531 4.32158 33.3097 4.32158Z"/>
              <g id="spot-left" filter="url(#filter0_f_1_2)">
                <path d="M20.6711 6.17541C21.2876 6.17541 21.7874 6.07259 21.7874 5.94576C21.7874 5.81893 21.2876 5.71612 20.6711 5.71612C20.0546 5.71612 19.5548 5.81893 19.5548 5.94576C19.5548 6.07259 20.0546 6.17541 20.6711 6.17541Z" fill="#9da0a2"/>
              </g>
              <g id="spot-right" filter="url(#filter1_f_1_2)">
                <path d="M29.4159 6.26233C30.0324 6.26233 30.5321 6.15951 30.5321 6.03268C30.5321 5.90585 30.0324 5.80304 29.4159 5.80304C28.7993 5.80304 28.2996 5.90585 28.2996 6.03268C28.2996 6.15951 28.7993 6.26233 29.4159 6.26233Z" fill="#9da0a2"/>
              </g>
              <g id="doors">
                <path id="right-door" d="M25.071 4.7569C25.0608 4.7569 25.0534 4.76429 25.0534 4.77448V43.9835C25.0534 43.9937 25.0608 44.001 25.071 44.001H33.6139C33.6241 44.001 33.6315 43.9936 33.6315 43.9835V4.77448C33.6315 4.76429 33.6241 4.7569 33.6139 4.7569H25.071ZM26.4772 6.17292H32.1452V14.169H26.4772V6.17292ZM26.4772 15.6319H32.1452V23.628H26.4772V15.6319ZM26.4772 25.126H32.1452V33.1221H26.4772V25.126ZM26.4772 34.5635H32.1452V42.5616H26.4772V34.5635Z" fill="#9da0a2"/>
                <path id="left-door" d="M16.4256 4.7569C16.4154 4.7569 16.4061 4.76429 16.4061 4.77448V43.9835C16.4061 43.9937 16.4154 44.001 16.4256 44.001H24.9666C24.9768 44.001 24.9861 43.9936 24.9861 43.9835V4.77448C24.9861 4.76429 24.9768 4.7569 24.9666 4.7569H16.4256ZM17.867 6.17292H23.535V14.169H17.867V6.17292ZM17.867 15.6319H23.535V23.628H17.867V15.6319ZM17.867 25.126H23.535V33.1221H17.867V25.126ZM17.867 34.5635H23.535V42.5616H17.867V34.5635Z" fill="#9da0a2"/>
                <path id="right-handle" fill="#6e6e6e" d="M26.0427 22.8137H25.4615C25.4336 22.8137 25.411 22.8364 25.411 22.8643V25.9778C25.411 26.0058 25.4336 26.0284 25.4615 26.0284H26.0427C26.0706 26.0284 26.0933 26.0058 26.0933 25.9778V22.8643C26.0933 22.8364 26.0706 22.8137 26.0427 22.8137Z"/>
                <path id="left-handle" fill="#6e6e6e" d="M24.5652 22.8137H23.9841C23.9561 22.8137 23.9335 22.8364 23.9335 22.8643V25.9778C23.9335 26.0058 23.9561 26.0284 23.9841 26.0284H24.5652C24.5931 26.0284 24.6158 26.0058 24.6158 25.9778V22.8643C24.6158 22.8364 24.5931 22.8137 24.5652 22.8137Z"/>
              </g>
                <path id="top-list" d="M33.6708 4.32158H16.3514C16.3296 4.32158 16.3118 4.33933 16.3118 4.36122V4.69473C16.3118 4.71663 16.3296 4.73437 16.3514 4.73437H33.6708C33.6927 4.73437 33.7104 4.71663 33.7104 4.69473V4.36122C33.7104 4.33933 33.6927 4.32158 33.6708 4.32158Z" fill="#9da0a2"/>
              </g>
              <defs>
            `;
          if (variables.state === 'on') {
            return `
              <svg viewBox="0 0 50 50"> ${style}
                <g id="vitrineskap">
                  <path id="bottom-list" d="M16.3284 44.0237L33.7012 44.0182C33.7012 44.0182 33.7104 44.1625 33.7104 44.328V45.263C33.7104 45.5613 33.7133 45.5617 33.3403 45.5617H16.682C16.3168 45.5617 16.3118 45.5613 16.3118 45.263V44.328C16.3118 44.1625 16.3284 44.0237 16.3284 44.0237V44.0237Z" fill="black" fill-opacity="0.857143"/>
                  <path id="cabinet" d="M33.3097 4.32158H16.7125C16.4912 4.32158 16.3118 4.50096 16.3118 4.72223V45.161C16.3118 45.3823 16.4912 45.5616 16.7125 45.5616H33.3097C33.531 45.5616 33.7104 45.3823 33.7104 45.161V4.72223C33.7104 4.50096 33.531 4.32158 33.3097 4.32158Z" fill="url(#paint0_linear_1_2)"/>
                  <g id="spot-left" filter="url(#filter0_f_1_2)">
                  <path d="M20.6711 6.17541C21.2876 6.17541 21.7874 6.07259 21.7874 5.94576C21.7874 5.81893 21.2876 5.71612 20.6711 5.71612C20.0546 5.71612 19.5548 5.81893 19.5548 5.94576C19.5548 6.07259 20.0546 6.17541 20.6711 6.17541Z" fill="#FFF6D5"/>
                </g>
                <g id="spot-right" filter="url(#filter1_f_1_2)">
                  <path d="M29.4159 6.26233C30.0324 6.26233 30.5321 6.15951 30.5321 6.03268C30.5321 5.90585 30.0324 5.80304 29.4159 5.80304C28.7993 5.80304 28.2996 5.90585 28.2996 6.03268C28.2996 6.15951 28.7993 6.26233 29.4159 6.26233Z" fill="#FFF6D5"/>
                </g>
                <g id="doors">
                  <path id="right-door" d="M25.071 4.7569C25.0608 4.7569 25.0534 4.76429 25.0534 4.77448V43.9835C25.0534 43.9937 25.0608 44.001 25.071 44.001H33.6139C33.6241 44.001 33.6315 43.9936 33.6315 43.9835V4.77448C33.6315 4.76429 33.6241 4.7569 33.6139 4.7569H25.071ZM26.4772 6.17292H32.1452V14.169H26.4772V6.17292ZM26.4772 15.6319H32.1452V23.628H26.4772V15.6319ZM26.4772 25.126H32.1452V33.1221H26.4772V25.126ZM26.4772 34.5635H32.1452V42.5616H26.4772V34.5635Z" fill="black"/>
                  <path id="left-door" d="M16.4256 4.7569C16.4154 4.7569 16.4061 4.76429 16.4061 4.77448V43.9835C16.4061 43.9937 16.4154 44.001 16.4256 44.001H24.9666C24.9768 44.001 24.9861 43.9936 24.9861 43.9835V4.77448C24.9861 4.76429 24.9768 4.7569 24.9666 4.7569H16.4256ZM17.867 6.17292H23.535V14.169H17.867V6.17292ZM17.867 15.6319H23.535V23.628H17.867V15.6319ZM17.867 25.126H23.535V33.1221H17.867V25.126ZM17.867 34.5635H23.535V42.5616H17.867V34.5635Z" fill="black"/>
                  <path id="right-handle" d="M26.0427 22.8137H25.4615C25.4336 22.8137 25.411 22.8364 25.411 22.8643V25.9778C25.411 26.0058 25.4336 26.0284 25.4615 26.0284H26.0427C26.0706 26.0284 26.0933 26.0058 26.0933 25.9778V22.8643C26.0933 22.8364 26.0706 22.8137 26.0427 22.8137Z" fill="#1A1A1A"/>
                  <path id="left-handle" d="M24.5652 22.8137H23.9841C23.9561 22.8137 23.9335 22.8364 23.9335 22.8643V25.9778C23.9335 26.0058 23.9561 26.0284 23.9841 26.0284H24.5652C24.5931 26.0284 24.6158 26.0058 24.6158 25.9778V22.8643C24.6158 22.8364 24.5931 22.8137 24.5652 22.8137Z" fill="#1A1A1A"/>
                </g>
                  <path id="top-list" d="M33.6708 4.32158H16.3514C16.3296 4.32158 16.3118 4.33933 16.3118 4.36122V4.69473C16.3118 4.71663 16.3296 4.73437 16.3514 4.73437H33.6708C33.6927 4.73437 33.7104 4.71663 33.7104 4.69473V4.36122C33.7104 4.33933 33.6927 4.32158 33.6708 4.32158Z" fill="black" fill-opacity="0.853175"/>
                </g>
                <defs>
                <filter id="filter0_f_1_2" x="18.2088" y="4.37018" width="4.92446" height="3.15116" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                  <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                  <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
                  <feGaussianBlur stdDeviation="0.672968" result="effect1_foregroundBlur_1_2"/>
                </filter>
                  <filter id="filter1_f_1_2" x="26.9536" y="4.4571" width="4.92446" height="3.15116" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                  <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                  <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
                  <feGaussianBlur stdDeviation="0.672968" result="effect1_foregroundBlur_1_2"/>
                </filter>
                <linearGradient id="paint0_linear_1_2" x1="24.8886" y1="55.5029" x2="25.1254" y2="-14.2782" gradientUnits="userSpaceOnUse">
                  <stop/>
                  <stop offset="1" stop-opacity="0"/>
                </linearGradient>
                </defs>
              </svg>
            `;
          }
          if (variables.state === 'off') {
            return `
              <svg viewBox="0 0 50 50"> ${style}
                ${path}
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50"> ${style} 
                ${path}
              </svg>
            `;
          }
        ]]]


  icon_unifi_cam:
    styles:
      custom_fields:
        icon:
          - width: 80%
          - margin-top: -1%
          - margin-left: -10%
    custom_fields:
      icon: >
        [[[
          let path = `
              <path id="unit" d="M24.959 47.162C15.907 47.162 8.598 39.945 8.621 30.981L8.70699 3.403C8.70699 3.403 13.159 2.749 25.042 2.847C40.934 2.977 41.38 3.426 41.38 3.426L41.298 30.983C41.277 39.947 34.01 47.164 24.96 47.164L24.959 47.162Z" fill="#9DA0A2"/>
              <path id="curve" d="M24.92 45.005C16.708 45.005 10.112 39.918 10.096 33.598L10.054 16.466C10.721 9.951 15.204 7.54 25.019 7.32C35.059 7.096 39.695 10.959 39.829 16.692L39.745 33.596C39.714 39.916 33.134 45.003 24.921 45.003L24.92 45.005Z" fill="#ABABAB"/>
            `;
          if (variables.state === 'on') {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
                <path id="grey-lens" opacity="0.737" d="M11.518 31.165C11.518 38.61 17.554 44.646 24.999 44.646C26.7694 44.6461 28.5225 44.2975 30.1581 43.6201C31.7938 42.9427 33.28 41.9497 34.5318 40.6978C35.7837 39.4459 36.7767 37.9598 37.4541 36.3241C38.1315 34.6885 38.4801 32.9354 38.48 31.165V28.525C38.4801 26.7546 38.1315 25.0015 37.4541 23.3659C36.7767 21.7302 35.7837 20.2441 34.5318 18.9922C33.28 17.7403 31.7938 16.7473 30.1581 16.0699C28.5225 15.3925 26.7694 15.0439 24.999 15.044C17.554 15.044 11.518 21.08 11.518 28.525V31.165Z" fill="#0E0E0E"/>
                <path id="black-lens" fill="#1A1A1A" d="M17.015 30.819C17.015 35.482 20.61 39.261 25.045 39.261C29.48 39.261 33.075 35.482 33.075 30.819V29.166C33.075 24.503 29.48 20.724 25.045 20.724C20.61 20.724 17.015 24.503 17.015 29.166V30.819Z"/>
                <path id="lens2" opacity="0.33" d="M25.028 24.818C22.058 24.818 19.652 27.224 19.652 30.194C19.652 33.164 22.058 35.57 25.028 35.57C27.998 35.57 30.404 33.164 30.404 30.194C30.404 27.224 27.998 24.818 25.028 24.818V24.818Z" fill="#333333"/>
                <path id="IR-LED" d="M25.005 21.76C24.825 21.7603 24.6524 21.8319 24.5252 21.9592C24.3979 22.0864 24.3263 22.259 24.326 22.439C24.3263 22.619 24.3979 22.7916 24.5252 22.9188C24.6524 23.0461 24.825 23.1177 25.005 23.118C25.185 23.1177 25.3575 23.0461 25.4848 22.9188C25.6121 22.7916 25.6837 22.619 25.684 22.439C25.6837 22.259 25.6121 22.0864 25.4848 21.9592C25.3575 21.8319 25.185 21.7603 25.005 21.76ZM25.005 36.894C24.825 36.8943 24.6524 36.9659 24.5252 37.0932C24.3979 37.2204 24.3263 37.393 24.326 37.573C24.3263 37.753 24.3979 37.9256 24.5252 38.0528C24.6524 38.1801 24.825 38.2517 25.005 38.252C25.185 38.2517 25.3575 38.1801 25.4848 38.0528C25.6121 37.9256 25.6837 37.753 25.684 37.573C25.6837 37.393 25.6121 37.2204 25.4848 37.0932C25.3575 36.9659 25.185 36.8943 25.005 36.894V36.894Z" fill="#1A1A1A"/>
                <path id="Reflection" opacity="0.638" d="M18.712 40.61L20.305 37.738C20.305 37.738 18.855 36.442 18.315 35.585C17.811 34.784 17.184 32.904 17.184 32.904L13.483 33.435C13.483 33.435 13.84 35.54 15.188 37.521C16.501 39.45 18.71 40.61 18.71 40.61H18.712Z" fill="#5A5A5A"/>
                <path id="lens" opacity="0.83" d="M25.005 26.126C22.746 26.126 20.913 27.957 20.913 30.218C20.913 31.3033 21.3441 32.3441 22.1115 33.1115C22.8789 33.8789 23.9197 34.31 25.005 34.31C26.0903 34.31 27.1311 33.8789 27.8985 33.1115C28.6659 32.3441 29.097 31.3033 29.097 30.218C29.0973 29.6806 28.9916 29.1483 28.786 28.6517C28.5805 28.1552 28.2791 27.704 27.8991 27.3239C27.519 26.9439 27.0678 26.6425 26.5712 26.4369C26.0747 26.2314 25.5424 26.1257 25.005 26.126V26.126Z" fill="#464646"/>
                <path id="eye" d="M25.035 29.169C24.467 29.169 24.009 29.629 24.009 30.195C24.009 30.761 24.469 31.221 25.035 31.221C25.601 31.221 26.061 30.763 26.061 30.195C26.061 29.627 25.601 29.169 25.035 29.169Z" fill="#606060"/>
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50">
                ${path}
                <path id="grey-lens" opacity="0.737" d="M11.518 31.165C11.518 38.61 17.554 44.646 24.999 44.646C26.7694 44.6461 28.5225 44.2975 30.1581 43.6201C31.7938 42.9427 33.28 41.9497 34.5318 40.6978C35.7837 39.4459 36.7767 37.9598 37.4541 36.3241C38.1315 34.6885 38.4801 32.9354 38.48 31.165V28.525C38.4801 26.7546 38.1315 25.0015 37.4541 23.3659C36.7767 21.7302 35.7837 20.2441 34.5318 18.9922C33.28 17.7403 31.7938 16.7473 30.1581 16.0699C28.5225 15.3925 26.7694 15.0439 24.999 15.044C17.554 15.044 11.518 21.08 11.518 28.525V31.165Z" fill="#0E0E0E"/>
                <path id="lens2" opacity="0.33" d="M25.028 24.818C22.058 24.818 19.652 27.224 19.652 30.194C19.652 33.164 22.058 35.57 25.028 35.57C27.998 35.57 30.404 33.164 30.404 30.194C30.404 27.224 27.998 24.818 25.028 24.818V24.818Z" fill="#333333"/>
                <path id="lens" opacity="0.83" d="M25.005 26.126C22.746 26.126 20.913 27.957 20.913 30.218C20.913 31.3033 21.3441 32.3441 22.1115 33.1115C22.8789 33.8789 23.9197 34.31 25.005 34.31C26.0903 34.31 27.1311 33.8789 27.8985 33.1115C28.6659 32.3441 29.097 31.3033 29.097 30.218C29.0973 29.6806 28.9916 29.1483 28.786 28.6517C28.5805 28.1552 28.2791 27.704 27.8991 27.3239C27.519 26.9439 27.0678 26.6425 26.5712 26.4369C26.0747 26.2314 25.5424 26.1257 25.005 26.126V26.126Z" fill="#464646"/>
                <path id="eye" d="M25.035 29.169C24.467 29.169 24.009 29.629 24.009 30.195C24.009 30.761 24.469 31.221 25.035 31.221C25.601 31.221 26.061 30.763 26.061 30.195C26.061 29.627 25.601 29.169 25.035 29.169Z" fill="#606060"/>
              </svg>
            `;
          }
        ]]]


  icon_unifi_doorbell:
    styles:
      custom_fields:
        icon:
          - width: 95%
          - margin-left: -27%
          - margin-top: -4%
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes on {
                from {
                  transform: scaleY(0);
                }
                to {
                  transform: scaleY(1);
                }
              }
              .on {
                animation: on 0.1s;
                transform-origin: -100% 46%;
                animation-fill-mode: forwards;
              }
              @keyframes off {
                from {
                  transform: scaleY(1);
                }
                to {
                  transform: scaleY(0);
                }
              }
              .off {
                animation: off 0.1s;
                transform-origin: -100% 46%;
                animation-fill-mode: forwards;
              }
            </style>
          `,
            path = `
              <g id="Doorbell">
                <path id="Unit" d="M19.367 2.303C18.9374 2.30287 18.512 2.38739 18.1151 2.55172C17.7182 2.71606 17.3575 2.957 17.0538 3.26076C16.75 3.56453 16.5091 3.92517 16.3447 4.32209C16.1804 4.719 16.0959 5.14441 16.096 5.574V44.162C16.0959 44.5916 16.1804 45.017 16.3447 45.4139C16.5091 45.8108 16.75 46.1715 17.0538 46.4752C17.3575 46.779 17.7182 47.0199 18.1151 47.1843C18.512 47.3486 18.9374 47.4331 19.367 47.433H30.635C31.0646 47.4331 31.49 47.3486 31.8869 47.1843C32.2838 47.0199 32.6445 46.779 32.9482 46.4752C33.252 46.1715 33.4929 45.8108 33.6573 45.4139C33.8216 45.017 33.9061 44.5916 33.906 44.162V5.574C33.9061 5.14441 33.8216 4.719 33.6573 4.32209C33.4929 3.92517 33.252 3.56453 32.9482 3.26076C32.6445 2.957 32.2838 2.71606 31.8869 2.55172C31.49 2.38739 31.0646 2.30287 30.635 2.303H30.633H19.367V2.303ZM28.951 42.549C29 42.549 29.039 42.59 29.039 42.639C29.039 42.688 29 42.727 28.951 42.727C28.902 42.727 28.863 42.688 28.863 42.639C28.863 42.59 28.902 42.549 28.951 42.549ZM29.246 42.549H29.254C29.303 42.549 29.342 42.588 29.342 42.637C29.342 42.686 29.303 42.725 29.254 42.725C29.205 42.725 29.166 42.683 29.166 42.637C29.166 42.591 29.201 42.554 29.246 42.549V42.549ZM27.123 42.551C27.172 42.551 27.211 42.592 27.211 42.641C27.211 42.69 27.172 42.729 27.123 42.729C27.074 42.729 27.035 42.69 27.035 42.641C27.035 42.592 27.074 42.551 27.123 42.551ZM27.426 42.551C27.475 42.551 27.514 42.592 27.514 42.641C27.514 42.69 27.475 42.729 27.426 42.729C27.377 42.729 27.338 42.69 27.338 42.641C27.338 42.592 27.377 42.551 27.426 42.551ZM27.731 42.551C27.78 42.551 27.819 42.592 27.819 42.641C27.819 42.69 27.78 42.729 27.731 42.729C27.682 42.729 27.643 42.69 27.643 42.641C27.643 42.592 27.682 42.551 27.731 42.551ZM28.028 42.551H28.036C28.085 42.551 28.124 42.59 28.124 42.639C28.124 42.688 28.085 42.727 28.036 42.727C27.987 42.727 27.948 42.685 27.948 42.639C27.948 42.593 27.983 42.556 28.028 42.551V42.551ZM28.342 42.551C28.391 42.551 28.43 42.592 28.43 42.641C28.43 42.69 28.391 42.729 28.342 42.729C28.293 42.729 28.254 42.69 28.254 42.641C28.254 42.592 28.293 42.551 28.342 42.551ZM28.639 42.551H28.647C28.696 42.551 28.737 42.59 28.737 42.639C28.737 42.688 28.696 42.727 28.647 42.727C28.598 42.727 28.559 42.685 28.559 42.639C28.559 42.593 28.594 42.556 28.639 42.551V42.551ZM26.202 42.553H26.21C26.259 42.553 26.298 42.592 26.298 42.641C26.298 42.69 26.259 42.729 26.21 42.729C26.161 42.729 26.122 42.687 26.122 42.641C26.122 42.595 26.157 42.558 26.202 42.553V42.553ZM26.507 42.553H26.515C26.564 42.553 26.603 42.592 26.603 42.641C26.603 42.69 26.564 42.729 26.515 42.729C26.466 42.729 26.427 42.687 26.427 42.641C26.427 42.595 26.462 42.558 26.507 42.553V42.553ZM26.81 42.553H26.82C26.869 42.553 26.908 42.592 26.908 42.641C26.908 42.69 26.869 42.729 26.82 42.729C26.771 42.729 26.732 42.687 26.732 42.641C26.732 42.595 26.765 42.558 26.81 42.553ZM25.279 42.555H25.299C25.348 42.555 25.387 42.594 25.387 42.643C25.387 42.692 25.348 42.731 25.299 42.731C25.25 42.731 25.209 42.692 25.209 42.643C25.209 42.6 25.239 42.563 25.279 42.555ZM25.593 42.555H25.601C25.65 42.555 25.689 42.594 25.689 42.643C25.689 42.692 25.65 42.731 25.601 42.731C25.552 42.731 25.513 42.689 25.513 42.643C25.513 42.597 25.548 42.56 25.593 42.555V42.555ZM25.896 42.555H25.906C25.955 42.555 25.994 42.594 25.994 42.643C25.994 42.692 25.955 42.731 25.906 42.731C25.857 42.731 25.818 42.689 25.818 42.643C25.818 42.597 25.851 42.56 25.896 42.555ZM23.765 42.557H23.773C23.822 42.557 23.863 42.596 23.863 42.645C23.863 42.694 23.822 42.733 23.773 42.733C23.724 42.733 23.685 42.691 23.685 42.645C23.685 42.599 23.72 42.562 23.765 42.557V42.557ZM24.068 42.557H24.078C24.127 42.557 24.166 42.596 24.166 42.645C24.166 42.694 24.127 42.733 24.078 42.733C24.029 42.733 23.99 42.691 23.99 42.645C23.99 42.599 24.023 42.562 24.068 42.557ZM24.375 42.557H24.385C24.434 42.557 24.473 42.596 24.473 42.645C24.473 42.694 24.434 42.733 24.385 42.733C24.336 42.733 24.297 42.691 24.297 42.645C24.297 42.599 24.33 42.562 24.375 42.557ZM24.682 42.557H24.69C24.739 42.557 24.78 42.596 24.78 42.645C24.78 42.694 24.739 42.733 24.69 42.733C24.641 42.733 24.602 42.691 24.602 42.645C24.602 42.599 24.637 42.562 24.682 42.557V42.557ZM24.977 42.557H24.995C25.044 42.557 25.083 42.596 25.083 42.645C25.083 42.694 25.044 42.733 24.995 42.733C24.946 42.733 24.907 42.694 24.907 42.645C24.907 42.602 24.937 42.565 24.977 42.557ZM22.243 42.559H22.253C22.302 42.559 22.341 42.598 22.341 42.647C22.341 42.696 22.302 42.735 22.253 42.735C22.204 42.735 22.165 42.693 22.165 42.647C22.165 42.601 22.198 42.564 22.243 42.559ZM22.55 42.559H22.558C22.607 42.559 22.646 42.598 22.646 42.647C22.646 42.696 22.607 42.735 22.558 42.735C22.509 42.735 22.47 42.693 22.47 42.647C22.47 42.601 22.505 42.564 22.55 42.559V42.559ZM22.853 42.559H22.863C22.912 42.559 22.951 42.598 22.951 42.647C22.951 42.696 22.912 42.735 22.863 42.735C22.814 42.735 22.775 42.693 22.775 42.647C22.775 42.601 22.808 42.564 22.853 42.559ZM23.152 42.559H23.172C23.221 42.559 23.26 42.598 23.26 42.647C23.26 42.696 23.221 42.735 23.172 42.735C23.123 42.735 23.082 42.696 23.082 42.647C23.082 42.604 23.112 42.567 23.152 42.559ZM23.455 42.559H23.475C23.524 42.559 23.563 42.598 23.563 42.647C23.563 42.696 23.524 42.735 23.475 42.735C23.426 42.735 23.387 42.696 23.387 42.647C23.387 42.604 23.415 42.567 23.455 42.559ZM21.025 42.561H21.035C21.084 42.561 21.123 42.6 21.123 42.649C21.123 42.698 21.084 42.737 21.035 42.737C20.986 42.737 20.947 42.695 20.947 42.649C20.947 42.603 20.98 42.566 21.025 42.561ZM21.332 42.561H21.342C21.391 42.561 21.43 42.6 21.43 42.649C21.43 42.698 21.391 42.737 21.342 42.737C21.293 42.737 21.252 42.695 21.252 42.649C21.252 42.603 21.287 42.566 21.332 42.561ZM21.639 42.561H21.647C21.659 42.561 21.671 42.565 21.682 42.569C21.714 42.582 21.735 42.612 21.735 42.649C21.735 42.695 21.701 42.732 21.639 42.737C21.594 42.732 21.559 42.692 21.559 42.649C21.559 42.606 21.589 42.571 21.639 42.561ZM21.934 42.561H21.952C22.001 42.561 22.04 42.6 22.04 42.649C22.04 42.698 22.001 42.737 21.952 42.737C21.903 42.737 21.864 42.698 21.864 42.649C21.864 42.606 21.894 42.569 21.934 42.561ZM20.725 42.563L20.733 42.565C20.773 42.565 20.806 42.591 20.817 42.628C20.82 42.636 20.821 42.642 20.821 42.651C20.821 42.697 20.787 42.734 20.733 42.739C20.684 42.739 20.645 42.697 20.645 42.651C20.645 42.605 20.68 42.568 20.725 42.563V42.563ZM28.202 42.821H28.212C28.261 42.821 28.3 42.86 28.3 42.909C28.3 42.958 28.261 42.997 28.212 42.997C28.163 42.997 28.124 42.955 28.124 42.909C28.124 42.863 28.157 42.826 28.202 42.821ZM28.507 42.821H28.517C28.566 42.821 28.605 42.86 28.605 42.909C28.605 42.958 28.566 42.997 28.517 42.997C28.468 42.997 28.429 42.955 28.429 42.909C28.429 42.863 28.462 42.826 28.507 42.821ZM28.812 42.821H28.82C28.869 42.821 28.91 42.86 28.91 42.909C28.91 42.958 28.869 42.997 28.82 42.997C28.771 42.997 28.732 42.955 28.732 42.909C28.732 42.863 28.767 42.826 28.812 42.821V42.821ZM29.117 42.821H29.127C29.176 42.821 29.217 42.86 29.217 42.909C29.217 42.958 29.176 42.997 29.127 42.997C29.078 42.997 29.039 42.955 29.039 42.909C29.039 42.863 29.072 42.826 29.117 42.821ZM29.424 42.821H29.434C29.483 42.821 29.522 42.86 29.522 42.909C29.522 42.958 29.483 42.997 29.434 42.997C29.385 42.997 29.346 42.955 29.346 42.909C29.346 42.863 29.379 42.826 29.424 42.821ZM26.987 42.823H26.997C27.046 42.823 27.085 42.862 27.085 42.911C27.085 42.96 27.046 42.999 26.997 42.999C26.948 42.999 26.907 42.957 26.907 42.911C26.907 42.865 26.942 42.828 26.987 42.823ZM27.294 42.823H27.302C27.351 42.823 27.39 42.862 27.39 42.911C27.39 42.96 27.351 42.999 27.302 42.999C27.253 42.999 27.214 42.957 27.214 42.911C27.214 42.865 27.249 42.828 27.294 42.823V42.823ZM27.597 42.823H27.607C27.656 42.823 27.695 42.862 27.695 42.911C27.695 42.96 27.656 42.999 27.607 42.999C27.558 42.999 27.519 42.957 27.519 42.911C27.519 42.865 27.552 42.828 27.597 42.823ZM27.904 42.823H27.914C27.963 42.823 28.002 42.862 28.002 42.911C28.002 42.96 27.963 42.999 27.914 42.999C27.865 42.999 27.824 42.957 27.824 42.911C27.824 42.865 27.859 42.828 27.904 42.823ZM25.468 42.825H25.476C25.525 42.825 25.564 42.864 25.564 42.913C25.564 42.962 25.525 43.003 25.476 43.003C25.427 43.003 25.388 42.959 25.388 42.913C25.388 42.867 25.423 42.83 25.468 42.825V42.825ZM25.771 42.825H25.781C25.83 42.825 25.869 42.864 25.869 42.913C25.869 42.962 25.83 43.003 25.781 43.003C25.732 43.003 25.693 42.959 25.693 42.913C25.693 42.867 25.726 42.83 25.771 42.825ZM26.076 42.825H26.086C26.135 42.825 26.174 42.864 26.174 42.913C26.174 42.962 26.135 43.003 26.086 43.003C26.037 43.003 25.998 42.959 25.998 42.913C25.998 42.867 26.031 42.83 26.076 42.825ZM26.381 42.825H26.391C26.44 42.825 26.479 42.864 26.479 42.913C26.479 42.962 26.44 43.003 26.391 43.003C26.342 43.003 26.303 42.959 26.303 42.913C26.303 42.867 26.336 42.83 26.381 42.825ZM26.686 42.825H26.696C26.745 42.825 26.784 42.864 26.784 42.913C26.784 42.962 26.745 43.003 26.696 43.003C26.647 43.003 26.608 42.959 26.608 42.913C26.608 42.867 26.641 42.83 26.686 42.825ZM24.563 42.827C24.612 42.827 24.651 42.866 24.651 42.915C24.651 42.964 24.612 43.005 24.563 43.005C24.514 43.005 24.475 42.964 24.475 42.915C24.475 42.866 24.514 42.827 24.563 42.827ZM24.858 42.827H24.868C24.917 42.827 24.956 42.866 24.956 42.915C24.956 42.964 24.917 43.005 24.868 43.005C24.819 43.005 24.78 42.961 24.78 42.915C24.78 42.869 24.813 42.832 24.858 42.827ZM25.163 42.827H25.173C25.222 42.827 25.263 42.866 25.263 42.915C25.263 42.964 25.222 43.005 25.173 43.005C25.124 43.005 25.085 42.961 25.085 42.915C25.085 42.869 25.118 42.832 25.163 42.827ZM23.347 42.829C23.396 42.829 23.435 42.87 23.435 42.919C23.435 42.968 23.396 43.007 23.347 43.007C23.298 43.007 23.257 42.968 23.257 42.919C23.257 42.87 23.298 42.829 23.347 42.829ZM23.642 42.829H23.652C23.701 42.829 23.74 42.87 23.74 42.919C23.74 42.968 23.701 43.007 23.652 43.007C23.603 43.007 23.564 42.965 23.564 42.919C23.564 42.873 23.597 42.834 23.642 42.829ZM23.949 42.829H23.959C24.008 42.829 24.047 42.87 24.047 42.919C24.047 42.968 24.008 43.007 23.959 43.007C23.91 43.007 23.871 42.965 23.871 42.919C23.871 42.873 23.904 42.834 23.949 42.829ZM24.254 42.829H24.264C24.313 42.829 24.352 42.87 24.352 42.919C24.352 42.968 24.313 43.007 24.264 43.007C24.215 43.007 24.176 42.965 24.176 42.919C24.176 42.873 24.209 42.834 24.254 42.829ZM21.52 42.831C21.569 42.831 21.608 42.872 21.608 42.921C21.608 42.97 21.569 43.009 21.52 43.009C21.471 43.009 21.432 42.97 21.432 42.921C21.432 42.872 21.471 42.831 21.52 42.831ZM21.825 42.831C21.874 42.831 21.913 42.872 21.913 42.921C21.913 42.97 21.874 43.009 21.825 43.009C21.776 43.009 21.737 42.97 21.737 42.921C21.737 42.872 21.776 42.831 21.825 42.831ZM22.13 42.831C22.179 42.831 22.218 42.872 22.218 42.921C22.218 42.97 22.179 43.009 22.13 43.009C22.081 43.009 22.042 42.97 22.042 42.921C22.042 42.872 22.081 42.831 22.13 42.831ZM22.429 42.831H22.437C22.486 42.831 22.525 42.872 22.525 42.921C22.525 42.97 22.486 43.009 22.437 43.009C22.388 43.009 22.349 42.967 22.349 42.921C22.349 42.875 22.384 42.836 22.429 42.831V42.831ZM22.742 42.831C22.791 42.831 22.83 42.872 22.83 42.921C22.83 42.97 22.791 43.009 22.742 43.009C22.693 43.009 22.654 42.97 22.654 42.921C22.654 42.872 22.693 42.831 22.742 42.831ZM23.037 42.831H23.045C23.094 42.831 23.135 42.872 23.135 42.921C23.135 42.97 23.094 43.009 23.045 43.009C22.996 43.009 22.957 42.967 22.957 42.921C22.957 42.875 22.992 42.836 23.037 42.831V42.831ZM20.601 42.833H20.609C20.658 42.833 20.697 42.874 20.697 42.923C20.697 42.972 20.658 43.011 20.609 43.011C20.56 43.011 20.521 42.969 20.521 42.923C20.521 42.877 20.556 42.838 20.601 42.833V42.833ZM20.904 42.833H20.914C20.963 42.833 21.002 42.874 21.002 42.923C21.002 42.972 20.963 43.011 20.914 43.011C20.865 43.011 20.826 42.969 20.826 42.923C20.826 42.877 20.859 42.838 20.904 42.833ZM21.209 42.833H21.219C21.268 42.833 21.307 42.874 21.307 42.923C21.307 42.972 21.268 43.011 21.219 43.011C21.17 43.011 21.131 42.969 21.131 42.923C21.131 42.877 21.164 42.838 21.209 42.833ZM28.393 43.093C28.442 43.093 28.481 43.134 28.481 43.183C28.481 43.232 28.442 43.271 28.393 43.271C28.344 43.271 28.305 43.232 28.305 43.183C28.305 43.134 28.344 43.093 28.393 43.093ZM29 43.093C29.049 43.093 29.09 43.134 29.09 43.183C29.09 43.232 29.049 43.271 29 43.271C28.951 43.271 28.912 43.232 28.912 43.183C28.912 43.134 28.951 43.093 29 43.093ZM29.297 43.093H29.307C29.356 43.093 29.395 43.132 29.395 43.181C29.395 43.23 29.356 43.269 29.307 43.269C29.258 43.269 29.219 43.227 29.219 43.181C29.219 43.135 29.252 43.098 29.297 43.093ZM27.174 43.095C27.223 43.095 27.262 43.136 27.262 43.185C27.262 43.234 27.223 43.273 27.174 43.273C27.125 43.273 27.084 43.234 27.084 43.185C27.084 43.136 27.125 43.095 27.174 43.095ZM27.479 43.095C27.528 43.095 27.567 43.136 27.567 43.185C27.567 43.234 27.528 43.273 27.479 43.273C27.43 43.273 27.391 43.234 27.391 43.185C27.391 43.136 27.43 43.095 27.479 43.095ZM27.782 43.095C27.831 43.095 27.87 43.136 27.87 43.185C27.87 43.234 27.831 43.273 27.782 43.273C27.733 43.273 27.694 43.234 27.694 43.185C27.694 43.136 27.733 43.095 27.782 43.095ZM28.089 43.095C28.138 43.095 28.177 43.136 28.177 43.185C28.177 43.234 28.138 43.273 28.089 43.273C28.04 43.273 28.001 43.234 28.001 43.185C28.001 43.136 28.04 43.095 28.089 43.095ZM28.691 43.095H28.701C28.75 43.095 28.789 43.134 28.789 43.183C28.789 43.232 28.75 43.271 28.701 43.271C28.652 43.271 28.613 43.229 28.613 43.183C28.613 43.137 28.646 43.1 28.691 43.095ZM25.654 43.097C25.703 43.097 25.742 43.138 25.742 43.187C25.742 43.236 25.703 43.275 25.654 43.275C25.605 43.275 25.566 43.236 25.566 43.187C25.566 43.138 25.605 43.097 25.654 43.097ZM25.957 43.097C26.006 43.097 26.045 43.138 26.045 43.187C26.045 43.236 26.006 43.275 25.957 43.275C25.908 43.275 25.869 43.236 25.869 43.187C25.869 43.138 25.908 43.097 25.957 43.097ZM26.262 43.097C26.311 43.097 26.35 43.138 26.35 43.187C26.35 43.236 26.311 43.275 26.262 43.275C26.213 43.275 26.174 43.236 26.174 43.187C26.174 43.138 26.213 43.097 26.262 43.097ZM26.559 43.097H26.569C26.618 43.097 26.657 43.136 26.657 43.185C26.657 43.234 26.618 43.273 26.569 43.273C26.52 43.273 26.481 43.231 26.481 43.185C26.481 43.139 26.514 43.102 26.559 43.097ZM26.864 43.097H26.874C26.923 43.097 26.962 43.136 26.962 43.185C26.962 43.234 26.923 43.273 26.874 43.273C26.825 43.273 26.786 43.231 26.786 43.185C26.786 43.139 26.819 43.102 26.864 43.097ZM24.122 43.101H24.13C24.179 43.101 24.22 43.14 24.22 43.189C24.22 43.238 24.179 43.277 24.13 43.277C24.081 43.277 24.042 43.235 24.042 43.189C24.042 43.143 24.077 43.106 24.122 43.101V43.101ZM24.425 43.101H24.437C24.486 43.101 24.525 43.14 24.525 43.189C24.525 43.238 24.486 43.277 24.437 43.277C24.388 43.277 24.347 43.235 24.347 43.189C24.347 43.143 24.38 43.106 24.425 43.101ZM24.734 43.101H24.744C24.793 43.101 24.832 43.14 24.832 43.189C24.832 43.238 24.793 43.277 24.744 43.277C24.695 43.277 24.656 43.235 24.656 43.189C24.656 43.143 24.689 43.106 24.734 43.101ZM25.039 43.101H25.047C25.096 43.101 25.135 43.14 25.135 43.189C25.135 43.238 25.096 43.277 25.047 43.277C24.998 43.277 24.959 43.235 24.959 43.189C24.959 43.143 24.994 43.106 25.039 43.101V43.101ZM25.334 43.101H25.354C25.403 43.101 25.442 43.14 25.442 43.189C25.442 43.238 25.403 43.277 25.354 43.277C25.305 43.277 25.266 43.238 25.266 43.189C25.266 43.146 25.294 43.109 25.334 43.101ZM22.906 43.103H22.916C22.965 43.103 23.004 43.142 23.004 43.191C23.004 43.24 22.965 43.279 22.916 43.279C22.867 43.279 22.828 43.237 22.828 43.191C22.828 43.145 22.861 43.108 22.906 43.103ZM23.201 43.103H23.219C23.268 43.103 23.309 43.142 23.309 43.191C23.309 43.24 23.268 43.279 23.219 43.279C23.17 43.279 23.131 43.24 23.131 43.191C23.131 43.148 23.161 43.111 23.201 43.103ZM23.508 43.103H23.526C23.575 43.103 23.614 43.142 23.614 43.191C23.614 43.24 23.575 43.279 23.526 43.279C23.477 43.279 23.438 43.24 23.438 43.191C23.438 43.148 23.468 43.111 23.508 43.103ZM23.811 43.103H23.829C23.878 43.103 23.917 43.142 23.917 43.191C23.917 43.24 23.878 43.279 23.829 43.279C23.78 43.279 23.741 43.24 23.741 43.191C23.741 43.148 23.771 43.111 23.811 43.103ZM21.383 43.105H21.393C21.442 43.105 21.481 43.144 21.481 43.193C21.481 43.242 21.442 43.281 21.393 43.281C21.344 43.281 21.303 43.239 21.303 43.193C21.303 43.147 21.338 43.11 21.383 43.105ZM21.688 43.105H21.698C21.747 43.105 21.786 43.144 21.786 43.193C21.786 43.242 21.747 43.281 21.698 43.281C21.649 43.281 21.61 43.239 21.61 43.193C21.61 43.147 21.643 43.11 21.688 43.105ZM21.983 43.105H22.001C22.05 43.105 22.089 43.144 22.089 43.193C22.089 43.242 22.05 43.281 22.001 43.281C21.952 43.281 21.913 43.242 21.913 43.193C21.913 43.15 21.943 43.113 21.983 43.105ZM22.288 43.105H22.309C22.358 43.105 22.397 43.144 22.397 43.193C22.397 43.242 22.358 43.281 22.309 43.281C22.26 43.281 22.217 43.242 22.217 43.193C22.217 43.15 22.247 43.113 22.287 43.105H22.288ZM22.593 43.105H22.613C22.662 43.105 22.701 43.144 22.701 43.193C22.701 43.242 22.662 43.281 22.613 43.281C22.564 43.281 22.525 43.242 22.525 43.193C22.525 43.15 22.553 43.113 22.593 43.105ZM20.765 43.107H20.785C20.834 43.107 20.873 43.146 20.873 43.195C20.873 43.244 20.834 43.283 20.785 43.283C20.736 43.283 20.697 43.244 20.697 43.195C20.697 43.152 20.725 43.115 20.765 43.107ZM21.079 43.107H21.087C21.136 43.107 21.175 43.146 21.175 43.195C21.175 43.244 21.136 43.283 21.087 43.283C21.038 43.283 20.999 43.241 20.999 43.195C20.999 43.149 21.034 43.112 21.079 43.107V43.107Z" fill="#F9F9F9"/>
                <path id="Vector" d="M30.534 4.908H19.527C19.286 4.90827 19.055 5.00412 18.8845 5.17454C18.7141 5.34495 18.6183 5.576 18.618 5.817V40.599C18.6183 40.84 18.7141 41.0711 18.8845 41.2415C19.055 41.4119 19.286 41.5077 19.527 41.508H30.534C30.775 41.5077 31.0061 41.4119 31.1765 41.2415C31.3469 41.0711 31.4427 40.84 31.443 40.599V5.817C31.4427 5.576 31.3469 5.34495 31.1765 5.17454C31.0061 5.00412 30.775 4.90827 30.534 4.908V4.908Z" fill="black"/>
                <path id="Display" d="M30.119 33.798H20.078C19.972 33.798 19.887 33.884 19.887 33.989V38.455C19.887 38.56 19.972 38.646 20.078 38.646H30.12C30.226 38.646 30.311 38.56 30.311 38.455V33.989C30.311 33.884 30.226 33.798 30.12 33.798H30.119Z" fill="#0E0E0E"/>
                <g id="Flood-light-shadow" filter="url(#filter_flood_shadow)">
                  <path id="Vector_2" d="M21.362 46.146L28.913 46.134C29.583 46.378 30.239 47.147 30.03 47.423L20.093 47.434C19.922 47.127 20.442 46.345 21.362 46.146V46.146Z" fill="url(#paint0_linear_vector_2)"/>
                </g>
                  <path id="Flood-light" d="M21.689 46.233H28.551C28.76 46.233 28.896 46.274 28.874 46.485C28.85 46.72 28.825 46.969 28.616 46.968L21.636 46.956C21.428 46.956 21.375 46.788 21.349 46.497C21.331 46.301 21.481 46.233 21.69 46.233H21.689Z" fill="black"/>
                  <path id="Ring-light" d="M24.965 29.06C26.2752 29.06 27.5317 28.5395 28.4581 27.6131C29.3845 26.6867 29.905 25.4302 29.905 24.12C29.905 22.8098 29.3845 21.5533 28.4581 20.6269C27.5317 19.7005 26.2752 19.18 24.965 19.18C23.6548 19.18 22.3983 19.7005 21.4719 20.6269C20.5455 21.5533 20.025 22.8098 20.025 24.12C20.025 25.4302 20.5455 26.6867 21.4719 27.6131C22.3983 28.5395 23.6548 29.06 24.965 29.06V29.06Z" fill="white"/>
                <g id="Button">
                  <path id="Button_Vector_3" d="M24.965 28.552C27.412 28.552 29.397 26.568 29.397 24.121C29.397 21.674 27.413 19.69 24.966 19.69C22.519 19.69 20.535 21.674 20.535 24.122C20.535 26.57 22.519 28.553 24.967 28.553L24.965 28.552Z" fill="black"/>
                  <path id="Button_Vector_4" d="M24.965 28.552C27.412 28.552 29.397 26.568 29.397 24.121C29.397 21.674 27.413 19.69 24.966 19.69C22.519 19.69 20.535 21.674 20.535 24.122C20.535 26.57 22.519 28.553 24.967 28.553L24.965 28.552Z" fill="url(#paint1_radial_1_2)"/>
                </g>
                <g id="Mics">
                  <path id="Mic_Vector_5" opacity="0.403" d="M21.201 16.26C21.402 16.26 21.566 16.097 21.566 15.895C21.566 15.693 21.403 15.53 21.201 15.53C20.999 15.53 20.836 15.693 20.836 15.895C20.836 16.097 20.999 16.26 21.201 16.26Z" fill="#4D4D4D"/>
                  <path id="Mic_Vector_6" opacity="0.384" d="M28.87 16.26C29.071 16.26 29.235 16.097 29.235 15.895C29.235 15.693 29.072 15.53 28.87 15.53C28.668 15.53 28.505 15.693 28.505 15.895C28.505 16.097 28.668 16.26 28.87 16.26Z" fill="#4D4D4D"/>
                </g>
                <g id="Lens">
                  <path id="Lens_Vector_7" opacity="0.711" d="M25.013 15.973C27.661 15.973 29.808 13.826 29.808 11.178C29.808 8.53 27.661 6.383 25.013 6.383C22.365 6.383 20.218 8.53 20.218 11.178C20.218 13.826 22.365 15.973 25.013 15.973V15.973Z" fill="#333333"/>
                  <path id="Lens_Vector_8" d="M25.013 13.774C26.447 13.774 27.609 12.612 27.609 11.178C27.609 9.744 26.447 8.582 25.013 8.582C23.579 8.582 22.417 9.744 22.417 11.178C22.417 12.612 23.58 13.774 25.013 13.774Z" fill="black"/>
                  <path id="Lens_Vector_9" d="M25.013 13.774C26.447 13.774 27.609 12.612 27.609 11.178C27.609 9.744 26.447 8.582 25.013 8.582C23.579 8.582 22.417 9.744 22.417 11.178C22.417 12.612 23.58 13.774 25.013 13.774Z" fill="url(#paint2_radial_1_2_lens)"/>
                  <path id="Lens_Vector_10" d="M25.013 13.045C25.5079 13.0442 25.9823 12.8473 26.3323 12.4973C26.6823 12.1473 26.8792 11.6729 26.88 11.178C26.8792 10.6831 26.6823 10.2087 26.3323 9.85871C25.9823 9.50875 25.5079 9.3118 25.013 9.311C24.5181 9.3118 24.0437 9.50875 23.6937 9.85871C23.3438 10.2087 23.1468 10.6831 23.146 11.178C23.1468 11.6729 23.3438 12.1473 23.6937 12.4973C24.0437 12.8473 24.5181 13.0442 25.013 13.045V13.045Z" fill="black"/>
                  <path id="Lens_Vector_11" d="M25.013 13.045C25.5079 13.0442 25.9823 12.8473 26.3323 12.4973C26.6823 12.1473 26.8792 11.6729 26.88 11.178C26.8792 10.6831 26.6823 10.2087 26.3323 9.85871C25.9823 9.50875 25.5079 9.3118 25.013 9.311C24.5181 9.3118 24.0437 9.50875 23.6937 9.85871C23.3438 10.2087 23.1468 10.6831 23.146 11.178C23.1468 11.6729 23.3438 12.1473 23.6937 12.4973C24.0437 12.8473 24.5181 13.0442 25.013 13.045V13.045Z" fill="url(#paint3_radial_1_2_lens)"/>
                  <path id="Lens_Vector_12" opacity="0.454" d="M25.013 11.951C25.44 11.951 25.786 11.605 25.786 11.178C25.786 10.751 25.44 10.405 25.013 10.405C24.586 10.405 24.24 10.751 24.24 11.178C24.24 11.605 24.586 11.951 25.013 11.951Z" fill="url(#paint4_radial_1_2_lens)"/>
                  <path id="Lens_Vector_13" opacity="0.254" d="M25.013 11.67C25.1435 11.67 25.2686 11.6182 25.3609 11.5259C25.4532 11.4336 25.505 11.3085 25.505 11.178C25.505 11.0475 25.4532 10.9224 25.3609 10.8301C25.2686 10.7378 25.1435 10.686 25.013 10.686C24.8825 10.686 24.7574 10.7378 24.6651 10.8301C24.5728 10.9224 24.521 11.0475 24.521 11.178C24.521 11.3085 24.5728 11.4336 24.6651 11.5259C24.7574 11.6182 24.8825 11.67 25.013 11.67V11.67Z" fill="url(#paint5_radial_1_2_lens)"/>
                </g>
              </g>
            `,
            gradient = `
              <defs>
                <filter id="filter_flood_shadow" x="19.7967" y="45.87" width="10.5368" height="1.828" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
                <feGaussianBlur stdDeviation="0.132" result="effect1_foregroundBlur_1_2"/>
                </filter>
                <linearGradient id="paint0_linear_vector_2" x1="238.384" y1="115.766" x2="238.913" y2="100.673" gradientUnits="userSpaceOnUse">
                <stop stop-color="#686C6E"/>
                <stop offset="1" stop-color="#686C6E" stop-opacity="0"/>
                </linearGradient>
                <radialGradient id="paint1_radial_1_2" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(93.3624 110.038) scale(29.8723 39.2763)">
                <stop stop-color="#1A1A1A"/>
                <stop offset="1" stop-color="#1A1A1A" stop-opacity="0"/>
                </radialGradient>
                <radialGradient id="paint2_radial_1_2_lens" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(129.822 49.2546) rotate(0.161447) scale(24.3224 23.5769)">
                <stop stop-color="#333333"/>
                <stop offset="1" stop-color="#333333" stop-opacity="0"/>
                </radialGradient>
                <radialGradient id="paint3_radial_1_2_lens" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(60.688 28.068) rotate(1.21746) scale(5.81712 6.65518)">
                <stop stop-color="#454545" stop-opacity="0"/>
                <stop offset="1"/>
                </radialGradient>
                <radialGradient id="paint4_radial_1_2_lens" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(43.7437 19.0226) scale(1.19567)">
                <stop stop-color="#1A1A1A"/>
                <stop offset="1" stop-color="#1A1A1A" stop-opacity="0"/>
                </radialGradient>
                <radialGradient id="paint5_radial_1_2_lens" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(37.0704 16.3081) scale(0.484271)">
                <stop stop-color="#000080"/>
                <stop offset="1" stop-color="#000080" stop-opacity="0"/>
                </radialGradient>
              </defs>
            `;
          if (variables.state === 'error') {
            return `
              <svg viewBox="0 0 50 50"> ${style} ${gradient} 
                ${path}
                ${gradient}
              </svg>
            `;
          }
          if (variables.state === 'off') {
            return `
              <svg viewBox="0 0 50 50"> ${style}
                ${path}
                ${gradient}
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50"> ${style} 
                ${path}
                ${gradient}
              </svg>
            `;
          }
        ]]]


  icon_garage:
    styles:
      custom_fields:
        icon:
          - width: 70%
    custom_fields:
      icon: >
        [[[
          if (variables.state === 'open' || variables.state === 'opening' || variables.state === 'closing') {
            return `
              <svg viewBox="0 0 50 50">
                <path fill="#454b4e" d="M42.2 28.3c0-.8-.2-1-.2-1L26 12.1s-.5-.4-1-.4-1 .3-1 .3L8.2 27.1c-.4.5-.4.9-.4.9v18.3c0 1.1.783 2 1.9 2h1.484a1.47 1.47 0 0 0 1.5-1.5v-14a1.47 1.47 0 0 1 1.5-1.5H36.05a1.47 1.47 0 0 1 1.5 1.5v14a1.47 1.47 0 0 0 1.5 1.5h1.45c1.1 0 2-.9 2-1.9 0-.2-.3-18.1-.3-18.1zM7.3 25l-1.6 1.5s-.3.3-.5.3-.5 0-.8-.2c-.2-.2-2-2.8-2-2.8s-.1-.4-.1-.7c.1-.3.2-.7.3-.8.4-.1 21.5-20.1 21.5-20.1s.4-.3.9-.3c.4 0 .8.1.9.2s.5.4.5.4l20.7 20.1s.2.3.3.4c.1.2.1.7.1.7 0 .1-.1.4-.2.5s-1.6 2.5-1.6 2.5-.1.3-.3.3c-.2.1-.4.1-.7 0-.2-.1-.5-.4-.5-.4L26.4 9.4s-.3-.3-.5-.4-.4-.2-.8-.2-.5.1-.8.1c-.1.1-.4.3-.7.5C23.3 9.8 7.3 25 7.3 25z"/>
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50">
                <path fill="#9da0a2" d="M42.2 28.3c0-.8-.2-1-.2-1L26 12.1s-.5-.4-1-.4-1 .3-1 .3L8.2 27.1c-.4.5-.4.9-.4.9v18.3c0 1.1.783 2 1.9 2h1.484a1.47 1.47 0 0 0 1.5-1.5v-14a1.47 1.47 0 0 1 1.5-1.5H36.05a1.47 1.47 0 0 1 1.5 1.5v14a1.47 1.47 0 0 0 1.5 1.5h1.45c1.1 0 2-.9 2-1.9 0-.2-.3-18.1-.3-18.1zM7.3 25l-1.6 1.5s-.3.3-.5.3-.5 0-.8-.2c-.2-.2-2-2.8-2-2.8s-.1-.4-.1-.7c.1-.3.2-.7.3-.8.4-.1 21.5-20.1 21.5-20.1s.4-.3.9-.3c.4 0 .8.1.9.2s.5.4.5.4l20.7 20.1s.2.3.3.4c.1.2.1.7.1.7 0 .1-.1.4-.2.5s-1.6 2.5-1.6 2.5-.1.3-.3.3c-.2.1-.4.1-.7 0-.2-.1-.5-.4-.5-.4L26.4 9.4s-.3-.3-.5-.4-.4-.2-.8-.2-.5.1-.8.1c-.1.1-.4.3-.7.5C23.3 9.8 7.3 25 7.3 25z"/>
                <path fill="#707070" d="M14.461 32.381c-.451 0-.812.323-.812.725v3.215c0 .401.362.725.813.725h21.336c.451 0 .814-.323.814-.725v-3.215c0-.401-.364-.725-.814-.725zm0 5.627c-.451 0-.812.323-.812.725v3.215c0 .401.362.725.813.725h21.336c.451 0 .814-.323.814-.725v-3.215c0-.401-.364-.725-.814-.725zm0 5.629c-.451 0-.812.323-.812.725v3.215c0 .401.362.725.813.725h21.336c.451 0 .814-.323.814-.725v-3.215c0-.401-.364-.725-.814-.725z" fill-rule="evenodd" paint-order="stroke fill markers"/>
              </svg>
            `;
          }
        ]]]


  icon_garage_large:
    styles:
      custom_fields:
        icon:
          - width: 95%
          - margin-left: -5%
          - margin-top: -18%
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes on {
                from {
                  transform: scaleY(0);
                }
                to {
                  transform: scaleY(1);
                }
              }
              .on {
                animation: on 0.1s;
                transform-origin: -100% 46%;
                animation-fill-mode: forwards;
              }
              @keyframes off {
                from {
                  transform: scaleY(1);
                }
                to {
                  transform: scaleY(0);
                }
              }
              .off {
                animation: off 0.1s;
                transform-origin: -100% 46%;
                animation-fill-mode: forwards;
              }
            </style>
          `,
            path = `
              <path fill="#9da0a2" d="M24.933 11.355l19.948 3.894c.082.14.09 1.51 0 1.8l-39.761-.033c-.089-.283-.085-1.618.01-1.821z"/>
              <rect fill="#9da0a2" width="1.966" height="20.53" x="5.006" y="18.115" rx=".256" paint-order="fill markers stroke"/>
              <rect fill="#9da0a2" width="1.966" height="20.53" x="43.028" y="18.115" rx=".256" paint-order="fill markers stroke"/>
              <rect fill="#707070" id="port1" width="34.328" height="5.932" x="7.836" y="18.115" rx=".186" paint-order="fill markers stroke"/>
              <rect fill="#707070" id="port2" width="34.328" height="7.032" x="7.836" y="24.863" rx=".186" ry=".22" paint-order="fill markers stroke"/>
              <rect fill="#707070" id="port3" width="34.328" height="5.932" x="7.836" y="32.71" rx=".186" paint-order="fill markers stroke"/>
            `;
          if (variables.state === 'open') {
            return `
              <svg viewBox="0 0 50 50"> ${style}
                <path fill="#9da0a2" id="garage" d="M24.9336 11.3555L5.12891 15.1934C5.03393 15.3966 5.03035 16.7323 5.11914 17.0156L44.8809 17.0488C44.9706 16.7588 44.9627 15.3882 44.8809 15.248L24.9336 11.3555ZM5.26172 18.1152C5.11983 18.1152 5.00586 18.2292 5.00586 18.3711V38.3887C5.00586 38.5306 5.11983 38.6445 5.26172 38.6445H6.7168C6.85868 38.6445 6.97266 38.5306 6.97266 38.3887V18.3711C6.97266 18.2292 6.85868 18.1152 6.7168 18.1152H5.26172ZM43.2832 18.1152C43.1413 18.1152 43.0273 18.2292 43.0273 18.3711V38.3887C43.0273 38.5306 43.1413 38.6445 43.2832 38.6445H44.7383C44.8802 38.6445 44.9941 38.5306 44.9941 38.3887V18.3711C44.9941 18.2292 44.8802 18.1152 44.7383 18.1152H43.2832Z"/>
                <path fill="#474b4d" id="car" d="M16.0195 23.7109C15.5919 24.4049 15.1131 25.2714 14.5781 26.3223L11.8164 29.0801V37.6621C11.8164 38.17 12.2304 38.584 12.7383 38.584H15.8027C16.3107 38.584 16.7246 38.17 16.7246 37.6621V36.7441H33.2754V37.6621C33.2754 38.17 33.6893 38.584 34.1973 38.584H37.2617C37.7696 38.584 38.1836 38.17 38.1836 37.6621V29.0801L35.4219 26.3223C34.8869 25.2714 34.4081 24.4049 33.9805 23.7109H33.3809C33.8204 24.3917 34.2878 25.2148 34.7617 26.2207L15.2852 26.2051C15.6558 25.3312 16.1128 24.4762 16.6191 23.7109L16.0195 23.7109ZM14.5469 29.3867C15.0067 29.3867 15.4252 29.401 15.8027 29.4316C16.5579 29.4929 17.4783 29.5952 18.5625 29.7383C18.4603 29.9427 18.3059 30.1491 18.1016 30.3535C17.795 30.6601 15.498 31.2715 15.1914 31.2715H13.9629C13.6563 31.2715 13.3505 30.9644 13.1973 30.6445C13.0951 30.4313 13.0449 30.027 13.0449 29.4316C13.587 29.401 14.087 29.3867 14.5469 29.3867V29.3867ZM35.4531 29.3867C35.913 29.3867 36.413 29.401 36.9551 29.4316C36.9551 30.027 36.9049 30.4313 36.8027 30.6445C36.6494 30.9644 36.3437 31.2715 36.0371 31.2715H34.8086C34.502 31.2715 32.205 30.6601 31.8984 30.3535C31.6941 30.1491 31.5397 29.9427 31.4375 29.7383C32.5217 29.5952 33.4421 29.4929 34.1973 29.4316C34.5748 29.401 34.9933 29.3867 35.4531 29.3867V29.3867ZM20.707 30H29.293L30.5176 31.5332C29.7001 33.7813 29.0884 34.9043 28.6797 34.9043H21.3203C20.9116 34.9043 20.2999 33.7813 19.4824 31.5332L20.707 30Z"/>
                <path fill="#707070" id="door" d="M8.02148 18.1152L7.83594 22.8398C7.83594 22.9244 7.91866 22.9922 8.02148 22.9922H41.9785C42.0813 22.9922 42.1641 22.9244 42.1641 22.8398L41.9785 18.1152H8.02148Z"/>
              </svg>
            `;
          }
          if (variables.state === 'closed') {
            return `
              <svg viewBox="0 0 50 50"> ${style}
                ${path}
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50"> ${style} 
                ${path}
              </svg>
            `;
          }
        ]]]

  icon_tv:
    styles:
      custom_fields:
        icon:
          - width: 89%
          - margin-top: -7%
          - margin-left: 1%
          - fill: >
              [[[
                return variables.state === 'on' || variables.state === 'playing' ? '#616161' : '#9da0a2';
              ]]]
    variables:
      tv_screen: ''
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes on {
                from {
                  transform: scaleY(0);
                }
                to {
                  transform: scaleY(1);
                }
              }
              .on {
                animation: on 1s;
                transform-origin: -100% 46%;
                animation-fill-mode: forwards;
              }
              @keyframes off {
                from {
                  transform: scaleY(1);
                }
                to {
                  transform: scaleY(0);
                }
              }
              .off {
                animation: off 1s;
                transform-origin: -100% 46%;
                animation-fill-mode: forwards;
              }
            </style>
          `,
            path = `
              <path d="M46 9.2v27.5H4.1V9.2H46m2.4-2.4H1.6v32.3h46.7c.1 0 .1-32.3.1-32.3zM11.9"/>
            `,
            gradient = `
              <linearGradient id="A" gradientUnits="userSpaceOnUse" x1="5.401" y1="34.714" x2="43.817" y2="11.74">
                <stop offset="0" stop-color="#64acb7"/>
                <stop offset="1" stop-color="#7fdbe9"/>
              </linearGradient>
            `;
          if (variables.state === 'on' && states[variables.tv_screen].state === 'on' && variables.timeout < 2000 || variables.state === 'playing' && variables.timeout < 2000) {
            return `
              <svg viewBox="0 0 50 50"> ${style} ${gradient} 
                <path d="M2.9,8h44.3v29.9H2.9V8z" fill="#20262890"/>
                <path class="on" d="M2.9,8h44.3v29.9H2.9V8z" fill="url(#A)"/> ${path} 
              </svg>
            `;
          }
          if (variables.state === 'on' && states[variables.tv_screen].state === 'on' && variables.timeout > 2000 || variables.state === 'playing' && variables.timeout > 2000) {
            return `
              <svg viewBox="0 0 50 50"> ${gradient} 
                <path d="M2.9,8h44.3v29.9H2.9V8z" fill="#20262890"/>
                <path class="on" d="M2.9,8h44.3v29.9H2.9V8z" fill="url(#A)"/> ${path} 
              </svg>
            `;
          }
          if (variables.state === 'off' && variables.timeout < 2000 || states[variables.tv_screen].state === 'off' && variables.timeout < 2000) {
            return `
              <svg viewBox="0 0 50 50"> ${style} ${gradient} 
                <path class="off" d="M2.9,8h44.3v29.9H2.9V8z" fill="url(#A)"/> ${path} 
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50"> ${style} 
                ${path}
              </svg>
            `;
          }
        ]]]

  icon_ps5:
    styles:
      custom_fields:
        icon:
          - width: 88%
          - margin-left: -1%
          - margin-top: -7%
    custom_fields:
      icon: >
        [[[
          if (variables.state === 'on' && variables.timeout < 2000) {
            return `
              <svg viewBox="0 0 50 50">
                <style>
                @keyframes on {
                  50% {
                    transform: translateY(0);
                  }
                  100% {
                    transform: translateY(-45%);
                  }
                }
                .on {
                  animation: on 2s cubic-bezier(0.550, 0.085, 0.680, 0.530) both;
                }
              </style>
              <g style="clip-path: url(#mask);">
                <g class="on">
                  <path fill="#00aa9e" d="M49.2 38.9l-75.6-25.1v7.4l75.6 25.2z"/>
                  <path fill="#f3c202" d="M49.2 46.4l-75.6-25.2v7.5l75.6 25.1z"/>
                  <path fill="#326db3" d="M49.2 53.8l-75.6-25.1V51l75.6 25.1zm0-22.3L-26.4 6.4v7.4l75.6 25.1z"/>
                </g>
              </g>
              <defs>
                <clipPath id="mask">
                  <path d="M47.5 33.2c-.5-2.2-3.9-3.5-9.1-3.9-3.8-.3-7.5.6-11.1 1.9l-.6.2v-5.7l-5.7.8-4.6 1.6L6 31.9h-.1c-1.9.7-3.8 2.2-3.7 4.2.1 2.1 4.7 2.6 8.2 3.2 3.3.6 6.2.2 8.9-.7l7.3 4.8L33 41l10.7-4h.1c2.8-1 4-2.5 3.7-3.8zm-31.3 2l-3.6 1.3c-2.2.8-4.1-1.1-2.1-1.9l1.7-.6 7.2-2.7v2.8l-3.2 1.1zm22.5-1.1l-1.9.7-10.2 3.7V36l6.5-2.4 3.8-1.3c4-.9 5.6.5 1.8 1.8z"/>
                </clipPath>
              </defs>
              <path fill="#de0029" d="M26.7 14.6v28.7l-7.3-2.5V7.1l9.3 2.6c6 1.7 9.6 5 9.6 10.7-.1 6.7-3 9.4-8.7 7.6V14.9c-.1-1.6-2.9-1.7-2.9-.3h0z"/>
            </svg>
          `;
          }

          return variables.state === 'on' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50">
            <g style="clip-path: url(#mask);">
              <g style="transform: translateY(-45%);">
                <path fill="#00aa9e" d="M49.2 38.9l-75.6-25.1v7.4l75.6 25.2z"/>
                <path fill="#f3c202" d="M49.2 46.4l-75.6-25.2v7.5l75.6 25.1z"/>
                <path fill="#326db3" d="M49.2 53.8l-75.6-25.1V51l75.6 25.1zm0-22.3L-26.4 6.4v7.4l75.6 25.1z"/>
              </g>
            </g>
            <defs>
              <clipPath id="mask">
                <path d="M47.5 33.2c-.5-2.2-3.9-3.5-9.1-3.9-3.8-.3-7.5.6-11.1 1.9l-.6.2v-5.7l-5.7.8-4.6 1.6L6 31.9h-.1c-1.9.7-3.8 2.2-3.7 4.2.1 2.1 4.7 2.6 8.2 3.2 3.3.6 6.2.2 8.9-.7l7.3 4.8L33 41l10.7-4h.1c2.8-1 4-2.5 3.7-3.8zm-31.3 2l-3.6 1.3c-2.2.8-4.1-1.1-2.1-1.9l1.7-.6 7.2-2.7v2.8l-3.2 1.1zm22.5-1.1l-1.9.7-10.2 3.7V36l6.5-2.4 3.8-1.3c4-.9 5.6.5 1.8 1.8z"/>
              </clipPath>
            </defs>
            <path fill="#de0029" d="M26.7 14.6v28.7l-7.3-2.5V7.1l9.3 2.6c6 1.7 9.6 5 9.6 10.7-.1 6.7-3 9.4-8.7 7.6V14.9c-.1-1.6-2.9-1.7-2.9-.3h0z"/>
          </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              <path fill="#9da0a2" d="M43.8 37h-.1l-10.6 4-4.2 1.6v-4.9l8-2.9 1.9-.7c3.8-1.3 2.2-2.7-1.8-1.9l-3.8 1.3-4.3 1.6v-4.5c3.1-1 6.3-1.6 9.5-1.4 5.3.4 8.7 1.6 9.1 3.9.3 1.4-.9 2.9-3.7 3.9zm-26.7-2.1l-.9.3-3.6 1.3c-2.2.8-4.1-1.1-2.1-1.9l1.7-.6 5-1.9v-4.2l-.6.2L6 31.9h-.1c-1.9.7-3.8 2.2-3.7 4.2.1 2.1 4.7 2.6 8.2 3.2 2.4.4 4.6.3 6.7-.1v-4.3zm12.4-20V28c5.7 1.7 8.7-.9 8.7-7.6.1-5.7-3.6-9-9.6-10.7l-9.3-2.6v33.8l7.2 2.5.1.1V14.6c.1-1.4 2.9-1.3 2.9.3z"/>
            </svg>
          `;
        ]]]

  icon_spot:
    styles:
      custom_fields:
        icon:
          - width: 70%
          - margin-left: -8%
          - margin-top: 3%
    custom_fields:
      icon: >
        [[[
          let state;
          if (variables.state === 'on' && variables.timeout < 2000) {
            state = 'on';
          } 
          if (variables.state === 'off' && variables.timeout < 2000) {
            state = 'off';
          }
          if (variables.state === 'on' && variables.timeout > 2000) {
            state = 'on_timeout';
          }
          return `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes on {
                  0% {
                    transform: rotateZ(0deg);
                    animation-timing-function: cubic-bezier(0.7, 0, 0.84, 0);
                  }
                  70% {
                    transform: rotateZ(-15deg);
                    animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
                  }
                  75% {
                    transform: rotateZ(-15deg);
                    animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
                  }
                  88% {
                    transform: rotateZ(-11deg);
                  }
                  100% {
                    transform: rotateZ(-15deg);
                  }
                }
                @keyframes off {
                  0% {
                    transform: rotateZ(-15deg);
                    animation-timing-function: cubic-bezier(0.7, 0, 0.84, 0);
                  }
                  70% {
                    transform: rotateZ(0deg);
                    animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
                  }
                  75% {
                    transform: rotateZ(0deg);
                    animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
                  }
                  88% {
                    transform: rotateZ(-4deg);
                  }
                  100% {
                    transform: rotateZ(0deg);
                  }
                }
                .on {
                  animation: on 0.7s;
                  transform-origin: 40% 20%;
                  animation-fill-mode: forwards;
                  animation-delay: -0.1s;
                }
                .off {
                  animation: off 0.7s;
                  transform-origin: 40% 20%;
                  animation-fill-mode: forwards;
                }
                .on_timeout {
                  transform: rotateZ(-15deg);
                  transform-origin: 40% 20%;
                }
              </style>
              <path style="clip-path: url(#mask);" fill="#9da0a2" d="M40.5.8H17.1c-.1 0-.1 0-.1.1A3.12 3.12 0 0 0 20.1 4h6.1c.1 0 .1 0 .1.1v7.4L18 19.1l3.6 3.5 9.1-8.6c.4-.4.6-1 .7-1.6V4c0-.1 0-.1.1-.1h6c1.7.1 3.1-1.3 3-3.1z"/>
              <defs>
                <clipPath id="mask">
                  <path class="${state}" d="M0 9.1h24l8.3 8.8H50V-9H0z"/>
                </clipPath>
              </defs>
              <path class="${state}" fill="var(--light-color)" d="M25.5 46.4s1.4.5 10.4-8.2c.5-.4 6.3-6.3 5.8-7.1-.7-.8-18.6-19.5-18.6-19.5s-.6-.9-8.6 6.4c-.6.5-8.7 8-7.7 9.1l18.7 19.3z"/>
            </svg>
          `;
        ]]]

  icon_win_pc:
    styles:
      custom_fields:
        icon:
          - width: 82%
          - margin-left: 1%
          - margin-top: -10%
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes WinLogo {
                10% {
                    transform: scale(0.9);
                }
                20% {
                    transform: scale(1.1);
                }
                30% {
                    transform: scale(1.1);
                }
                40% {
                    transform: scale(1);
                }
                50% {
                    transform: scale(0.9);
                }
                60% {
                    transform: scale(1);
                }
                70% {
                    transform: scale(1.1);
                }
                100% {
                    transform: scale(1);
                }
              }
              .WinLogo{
                  animation: WinLogo 1s;
                  transform-origin: center;
              }
            </style>
          `,
            paths = `
              <path fill="#373737" id="Screen" d="M47.6 7.95H2.5C0.5 7.95 0.5 7.95 0.5 9.95V40.05C0.5 42.035 0.503 42.05 2.5 42.05H47.5C49.51 42.05 49.5 42.035 49.5 40.05V10.05C49.499 7.978 49.501 7.975 47.6 7.95V7.95ZM48.033 38.628H2.069L2.167 9.57H48.032L48.033 38.628Z"/>
              <path fill="#0078D4" id="WinLogo" class="WinLogo" d="M18.359 17.663H24.655V23.959H18.359V17.663ZM25.345 17.663H31.641V23.959H25.345V17.663ZM18.359 24.65H24.655V30.946H18.359V24.65ZM25.345 24.65H31.641V30.946H25.345V24.65Z"/>
            `;
          if (variables.state === 'on' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50">
              ${style}
              ${paths}
            </svg>
          `;
          }

          return variables.state === 'on' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50">
              ${paths}
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              <path fill="#9da0a2" id="Screen" d="M47.6 7.95H2.5C0.5 7.95 0.5 7.95 0.5 9.95V40.05C0.5 42.035 0.503 42.05 2.5 42.05H47.5C49.51 42.05 49.5 42.035 49.5 40.05V10.05C49.499 7.978 49.501 7.975 47.6 7.95V7.95ZM48.033 38.628H2.069L2.167 9.57H48.032L48.033 38.628Z"/>
              <path fill="#9da0a2" id="WinLogo" d="M18.359 17.663H24.655V23.959H18.359V17.663ZM25.345 17.663H31.641V23.959H25.345V17.663ZM18.359 24.65H24.655V30.946H18.359V24.65ZM25.345 24.65H31.641V30.946H25.345V24.65Z"/>
            </svg>
          `;
        ]]]

  icon_monitors:
    styles:
      custom_fields:
        icon:
          - width: 73%
          - margin-left: -9%
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes cone {
                35% {
                  transform: scale(0.8);
                  animation-timing-function: cubic-bezier(0, 0.55, 0.45, 1);
                }
                36% {
                  transform: translateY(0%);
                }
                49% {
                  transform: scale(1.25);
                }
                63% {
                  transform: scale(0.85);
                  animation-timing-function: cubic-bezier(0, 0.55, 0.45, 1);
                }
                77% {
                  transform: scale(1.15);
                  animation-timing-function: cubic-bezier(0, 0.55, 0.45, 1);
                }
                95% {
                  transform: scale(1);
                }
              }
              .cone {
                animation: cone 1.2s;
                transform-origin: center;
              }
              @keyframes speaker {
                0% {
                  transform: scale(1);
                }
                40% {
                  transform: scale(1);
                }
                49% {
                  transform: scale(0.95);
                }
                63% {
                  transform: scale(1);
                }
                77% {
                  transform: scale(0.95);
                }
                100% {
                  transform: scale(1);
                }
              }
              .speaker {
                animation: speaker 1.3s;
                transform-origin: center;
              }
            </style>
          `,
            paths = `
              <g class="speaker">
                <path fill="#686868" d="M35.8 46.9H14.2c-1.1 0-2-1-2-2.3V6.7c0-1.3.9-2.3 2-2.3h21.5c1.1 0 2 1 2 2.3v37.9c0 1.2-.9 2.3-1.9 2.3z"/>
                <path fill="#2a2a2a" d="M39.2 1H10.8C9.4 1 8.3 2.1 8.2 3.5v42.9a2.65 2.65 0 0 0 2.6 2.6h28.3c1.4 0 2.5-1.2 2.6-2.6V3.5c0-1.4-1.1-2.5-2.5-2.5zM25 7c1.3 0 2.4 1.1 2.4 2.4s-1.1 2.4-2.4 2.4-2.4-1.1-2.4-2.4C22.5 8 23.6 7 25 7zm10.2 35.5l-.4 1.9s-.2.6-.6.6H15.8c-.4 0-.6-.6-.6-.6s-.1-1.1-.4-1.9.6-.9.6-.9h19.3c0-.1.8-.1.5.9z"/>
              </g>
              <path class="cone" fill="#e5dd00" d="M25 15.7c-6.2 0-11.3 5.1-11.3 11.3S18.8 38.3 25 38.3 36.3 33.2 36.3 27c-.1-6.3-5.1-11.3-11.3-11.3zm0 14.5a3.33 3.33 0 0 1-3.3-3.3 3.33 3.33 0 0 1 3.3-3.3 3.33 3.33 0 0 1 3.3 3.3c-.1 1.9-1.5 3.3-3.3 3.3z"/>
            `;
          if (variables.state === 'on' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50">
              ${style}
              ${paths}
            </svg>
          `;
          }

          return variables.state === 'on' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50">
              ${paths}
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              <path fill="#9da0a2" d="M25 18.6c-4.6 0-8.4 3.8-8.4 8.4s3.8 8.4 8.4 8.4 8.4-3.8 8.4-8.4-3.7-8.4-8.4-8.4zm0 11.7a3.33 3.33 0 0 1-3.3-3.3 3.33 3.33 0 0 1 3.3-3.3 3.33 3.33 0 0 1 3.3 3.3c0 1.8-1.4 3.3-3.3 3.3zM39.2 1H10.9C9.4 1 8.3 2.1 8.3 3.6v42.9a2.65 2.65 0 0 0 2.6 2.6h28.3a2.65 2.65 0 0 0 2.6-2.6v-43C41.7 2 40.5.9 39.2 1zM25 7c1.3 0 2.4 1.1 2.4 2.4s-1.1 2.4-2.4 2.4-2.4-1.1-2.4-2.4S23.7 7 25 7zm10.3 35.5l-.4 1.9s-.2.6-.6.6H15.8c-.4 0-.6-.6-.6-.6l-.4-1.9c-.2-.9.6-.9.6-.9h19.3s.9.1.6.9zM25 38.2c-6.2 0-11.3-5.1-11.3-11.3a11.29 11.29 0 1 1 22.6 0c.1 6.3-5 11.3-11.3 11.3z"/>
            </svg>
          `;
        ]]]


  icon_sub:
    styles:
      custom_fields:
        icon:
          - width: 73%
          - margin-left: -9%
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes cone {
                35% {
                  transform: scale(0.8);
                  animation-timing-function: cubic-bezier(0, 0.55, 0.45, 1);
                }
                36% {
                  transform: translateY(0%);
                }
                49% {
                  transform: scale(1.15);
                }
                63% {
                  transform: scale(0.85);
                  animation-timing-function: cubic-bezier(0, 0.55, 0.45, 1);
                }
                77% {
                  transform: scale(1.1);
                  animation-timing-function: cubic-bezier(0, 0.55, 0.45, 1);
                }
                95% {
                  transform: scale(1);
                }
              }
              .cone {
                animation: cone 1s;
                transform-origin: center;
              }
              @keyframes speaker {
                0% {
                  transform: scale(1);
                }
                40% {
                  transform: scale(1);
                }
                49% {
                  transform: scale(0.95);
                }
                63% {
                  transform: scale(1);
                }
                77% {
                  transform: scale(0.95);
                }
                100% {
                  transform: scale(1);
                }
              }
              .speaker {
                animation: speaker 1.1s;
                transform-origin: center;
              }
            </style>
          `,
            paths = `
              <g class="speaker">
                <path fill="#686868" d="M37.735 3.405h-25.47c-1.35 0-2.34.99-2.34 2.34v38.61c.024 1.282 1.058 2.316 2.34 2.34h25.47c1.282-.024 2.316-1.058 2.34-2.34v-38.7c-.09-1.35-1.17-2.34-2.34-2.25zm-12.78 9.72c-15-7.08-7.5-3.54 0 0z"/>
                <path fill="#2a2a2a" d="M10.85 1c-1.5 0-2.6 1.1-2.6 2.6v42.9a2.65 2.65 0 0 0 2.6 2.6h28.3a2.65 2.65 0 0 0 2.6-2.6v-43c-.1-1.5-1.3-2.6-2.6-2.5h-28.3z"/>
              </g>
              <path class="cone" fill="#e5dd00" d="M25 20.498a11.971 11.971 0 0 0 0 23.941 11.971 11.971 0 0 0 0-23.941zm0 8.971a3 3 0 1 1 0 6 3 3 0 1 1 0-6z"/>
            `;
          if (variables.state === 'on' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50">
              ${style}
              ${paths}
            </svg>
          `;
          }

          return variables.state === 'on' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50">
              ${paths}
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              <path fill="#9da0a2" d="M10.85 1c-1.5 0-2.6 1.1-2.6 2.6v42.9a2.65 2.65 0 0 0 2.6 2.6h28.3a2.65 2.65 0 0 0 2.6-2.6v-43c-.1-1.5-1.3-2.6-2.6-2.5h-28.3zM25 18.846a13.624 13.624 0 0 1 0 27.246 13.624 13.624 0 0 1-13.623-13.623A13.624 13.624 0 0 1 25 18.846zm0 1.652a11.971 11.971 0 0 0 0 23.941 11.971 11.971 0 0 0 0-23.941zm0 8.971a3 3 0 1 1 0 6 3 3 0 1 1 0-6z"/>
            </svg>
          `;
        ]]]


  icon_silus_dome:
    styles:
      custom_fields:
        icon:
          - width: 85%
          - margin-top: -8%
          - margin-left: -8%
    custom_fields:
      icon: >
        [[[
          let gradient = `
            <defs>
              <radialGradient id="silus" cx="25.521" cy="29.855" fx="25.521" fy="29.855" r="18.822" gradientTransform="matrix(0.7007324,-0.01430902,0.01688585,0.82693386,7.1334041,5.6236836)" spreadMethod="pad" gradientUnits="userSpaceOnUse">
              <stop offset="0" stop-color="var(--light-color)"/>
              <stop offset="1" stop-color="var(--light-color)" stop-opacity=".827"/>
              </radialGradient>
            </defs>
          `;
          if (variables.state === 'on' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50">
              ${gradient}
              <path fill="url(#silus)" d="M24.73 5.822c-.083 0-.163.009-.244.014-4.998.137-9.834 1.594-13.187 4.771-1.699 1.61-2.83 4.008-3.764 6.24-.962 2.301-1.357 5.391-1.357 8.049 0 5.343 1.144 11.009 4.615 14.486 1.581 1.584 3.915 2.945 5.965 3.887 0 0 1.024.78 7.42.887a1.64 1.64 0 0 0 .232.021c.219 0 .381-.008.59-.01l.59.01a1.64 1.64 0 0 0 .232-.021c6.396-.107 7.42-.887 7.42-.887 2.05-.942 4.384-2.303 5.965-3.887 3.471-3.478 4.615-9.143 4.615-14.486 0-2.658-.395-5.747-1.357-8.049-.934-2.232-2.065-4.63-3.764-6.24-3.354-3.178-8.19-4.634-13.187-4.771-.081-.005-.161-.014-.244-.014-.09 0-.18.003-.27.004l-.27-.004z"/>
            </svg>
          `;
          }
          return variables.state === 'on' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50">
              ${gradient}
              <path fill="url(#silus)" d="M24.73 5.822c-.083 0-.163.009-.244.014-4.998.137-9.834 1.594-13.187 4.771-1.699 1.61-2.83 4.008-3.764 6.24-.962 2.301-1.357 5.391-1.357 8.049 0 5.343 1.144 11.009 4.615 14.486 1.581 1.584 3.915 2.945 5.965 3.887 0 0 1.024.78 7.42.887a1.64 1.64 0 0 0 .232.021c.219 0 .381-.008.59-.01l.59.01a1.64 1.64 0 0 0 .232-.021c6.396-.107 7.42-.887 7.42-.887 2.05-.942 4.384-2.303 5.965-3.887 3.471-3.478 4.615-9.143 4.615-14.486 0-2.658-.395-5.747-1.357-8.049-.934-2.232-2.065-4.63-3.764-6.24-3.354-3.178-8.19-4.634-13.187-4.771-.081-.005-.161-.014-.244-.014-.09 0-.18.003-.27.004l-.27-.004z"/>
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              <path fill="#9da0a2" d="M24.73 5.822c-.083 0-.163.009-.244.014-4.998.137-9.834 1.594-13.187 4.771-1.699 1.61-2.83 4.008-3.764 6.24-.962 2.301-1.357 5.391-1.357 8.049 0 5.343 1.144 11.009 4.615 14.486 1.581 1.584 3.915 2.945 5.965 3.887 0 0 1.024.78 7.42.887a1.64 1.64 0 0 0 .232.021c.219 0 .381-.008.59-.01l.59.01a1.64 1.64 0 0 0 .232-.021c6.396-.107 7.42-.887 7.42-.887 2.05-.942 4.384-2.303 5.965-3.887 3.471-3.478 4.615-9.143 4.615-14.486 0-2.658-.395-5.747-1.357-8.049-.934-2.232-2.065-4.63-3.764-6.24-3.354-3.178-8.19-4.634-13.187-4.771-.081-.005-.161-.014-.244-.014-.09 0-.18.003-.27.004l-.27-.004z"/>
            </svg>
          `;
        ]]]


  icon_lamp:
    styles:
      custom_fields:
        icon:
          - width: 79%
          - margin-left: -16%
    custom_fields:
      icon: >
        [[[
          let state = variables.state === 'on' && variables.timeout < 2000 ? 'on' : null;
          return `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes on {
                  0% {
                    transform: scale(0.85);
                  }
                  20% {
                    transform: scale(1.1);
                  }
                  40% {
                    transform: scale(0.95);
                  }
                  60% {
                    transform: scale(1.03);
                  }
                  80% {
                    transform: scale(0.97);
                  }
                }
                .on {
                  animation: on 0.8s;
                  transform-origin: center;
                }
              </style>
              <path fill="#9da0a2" d="M26.5 21.8l3.8-6.1H19.7l3.8 6.1c-5 .7-6.3 5.8-5.7 10.2.7 5.1 3.2 10.1 5.7 14.4H19v2.5h11.8v-2.5h-4.5C29 42 31.4 37 32.1 32c.6-4.4-.6-9.4-5.6-10.2zm3.1 9.1c-.3 4.3-2.3 8.7-4.4 12.4l-.2.1v.1-.1c-1.8-3-3.3-6.4-4.1-9.7-.7-3.1-1-7.2 2.7-8.4 1.4-.5 3.1-.1 4.2.8 1.6 1 1.8 3 1.8 4.8z"/>
              <path class="${state}" fill="var(--light-color)" d="M38.1 20L35.7 3.8c-.3-1.9-.4-1.7-.6-2-.9-.6-2.3-.7-2.3-.7H17.4s-1.4 0-2.3.7c-.2.3-.3.1-.6 2C14 5.7 11.9 20 11.9 20s5.8.3 13.4.3h0c7.3 0 12.8-.3 12.8-.3z"/>
            </svg>
          `;
        ]]]

  icon_roborock:
    styles:
      custom_fields:
        icon:
          - width: 78%
          - margin-top: -5%
          - margin-left: -2%
          - fill: >
              [[[ return variables.state === 'cool' || variables.state === 'fan_only' ? '#5daeea' : '#9da0a2'; ]]]
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes spinner {
                from {
                    transform: rotateZ(0deg);
                }
                to {
                    transform: rotateZ(360deg);
                }
              }
              .spinner{
                  animation: spinner 0.75s infinite linear;
                  transform-origin: center;
                  transform-box: fill-box;
              }
            </style>
          `,
            paths = `
              <g id="roborock_s6 1">
                  <path id="spinner" class="spinner" fill="#242424" d="M32.91 9.04134C32.8719 9.05069 32.8319 9.15739 32.8319 9.15739L36.2207 11.2928L36.1513 11.3707L32.7377 9.24697C32.7377 9.24697 32.6654 9.3424 32.6994 9.3671C34.9404 10.9945 37.9007 12.7456 37.9007 12.7456C37.9007 12.7456 37.757 13.0686 37.767 13.2435C37.7763 13.405 37.9437 13.7094 37.9437 13.7094L33.4681 17.5631L33.5569 17.6879L36.5188 15.2552L36.572 15.3362L33.5662 17.8047L33.7055 17.8756L38.3071 14.1294C38.3071 14.1294 38.5881 14.3551 38.782 14.4158C39.1066 14.5174 39.355 14.3951 39.355 14.3951L41.9533 19.777L42.0964 19.6948L40.475 16.1709L40.5371 16.1419L42.1957 19.6482L42.3306 19.5888L39.8147 14.1323C39.8147 14.1323 39.8622 14.073 39.8904 14.0476C39.8904 14.0476 40.0829 13.9555 40.2025 13.7689C40.2757 13.6547 40.3302 13.5439 40.2723 13.284L40.4607 13.1692C41.681 12.9847 46.5213 12.2774 46.5213 12.2774L46.5093 12.1468L42.4523 12.6709L42.4356 12.603L46.5334 12.0447L46.5307 11.9097L40.2804 12.6595C40.1816 12.1789 39.5996 11.9417 39.5996 11.9417C39.872 10.7356 40.7947 5.76763 40.7947 5.76763C40.7947 5.76763 40.7271 5.72429 40.7216 5.74892L39.8258 9.73167L39.7529 9.73369L40.582 5.75001C40.5869 5.72607 40.5112 5.73213 40.5112 5.73213L39.0095 11.8494C39.0095 11.8494 38.8145 11.8172 38.198 12.2052C38.1564 12.2313 38.0509 12.2022 38.0509 12.2022L32.926 9.04331C32.9208 9.04003 32.9154 9.04007 32.91 9.04134L32.91 9.04134ZM38.9244 12.7578C39.01 12.7177 39.108 12.7132 39.1968 12.7453C39.2857 12.7775 39.3582 12.8436 39.3983 12.9292C39.4384 13.0148 39.4429 13.1128 39.4107 13.2017C39.3786 13.2905 39.3124 13.363 39.2269 13.4031C39.1413 13.4432 39.0433 13.4477 38.9544 13.4156C38.8655 13.3834 38.7931 13.3173 38.7529 13.2317C38.7128 13.1461 38.7084 13.0481 38.7405 12.9592C38.7727 12.8703 38.8388 12.7979 38.9244 12.7578V12.7578ZM38.9853 12.8957L38.9901 13.0108L38.8877 13.0588L38.9251 13.1548L39.0187 13.1526L39.076 13.2506L39.1627 13.2175L39.1608 13.1087L39.2507 13.0665L39.233 12.9802L39.1258 12.9774L39.0869 12.8783L38.9853 12.8957Z"/>
                  <path id="body" fill="#9da0a2" d="M47.53 24.915C47.53 25.215 47.5137 25.5257 47.4827 25.8451C47.4565 26.1156 46.3885 25.1267 46.3424 25.4086C46.3018 25.6562 46.2051 26.1692 46.2051 26.1692C46.608 26.4588 47.2919 27.2794 47.281 27.6406C47.0991 33.6614 41.5547 40.3054 41.5547 40.3054C35.6176 45.9611 30.6864 46.9202 25.029 47.3535C13.7137 48.2203 2.71482 36.3974 2.81452 27.7194C2.81452 27.7194 2.63723 27.3025 3.74864 26.1264C3.74864 26.1264 3.72872 25.4376 3.69895 25.1368C3.66614 24.8052 2.5689 26.3168 2.55081 25.9814C2.52888 25.575 2.55092 24.5912 2.55092 24.1794C2.55092 11.7956 12.6452 2.50781 25.029 2.50781C37.4128 2.50781 47.53 12.5312 47.53 24.915Z"/>
                  <path id="buttons" fill="#787878" d="M28.618 8.84152H21.3366C20.7142 8.84152 20.2097 9.29651 20.2097 9.85776C20.2097 10.419 20.7142 10.874 21.3366 10.874H28.618C29.2404 10.874 29.7449 10.419 29.7449 9.85776C29.7449 9.29651 29.2404 8.84152 28.618 8.84152Z"/>
                  <g id="lydar">
                      <path id="circle3251" d="M25.0356 27.3783C28.6601 27.3783 31.5984 24.44 31.5984 20.8155C31.5984 17.1909 28.6601 14.2526 25.0356 14.2526C21.411 14.2526 18.4727 17.1909 18.4727 20.8155C18.4727 24.44 21.411 27.3783 25.0356 27.3783Z" fill="#787878"/>
                      <path id="path3028" d="M25.0355 26.4502C28.1475 26.4502 30.6703 23.9274 30.6703 20.8155C30.6703 17.7035 28.1475 15.1807 25.0355 15.1807C21.9236 15.1807 19.4008 17.7035 19.4008 20.8155C19.4008 23.9274 21.9236 26.4502 25.0355 26.4502Z" fill="#9da0a2"/>
                  </g>
              </g>                      
            `;
          if (variables.state === 'on' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50">
              ${style}
              ${paths}
            </svg>
          `;
          }

          return variables.state === 'on' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50">
              ${paths}
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">                
              <g id="roborock_s6 1">
                <path id="spinner" fill="#9da0a2" d="M32.91 9.04134C32.8719 9.05069 32.8319 9.15739 32.8319 9.15739L36.2207 11.2928L36.1513 11.3707L32.7377 9.24697C32.7377 9.24697 32.6654 9.3424 32.6994 9.3671C34.9404 10.9945 37.9007 12.7456 37.9007 12.7456C37.9007 12.7456 37.757 13.0686 37.767 13.2435C37.7763 13.405 37.9437 13.7094 37.9437 13.7094L33.4681 17.5631L33.5569 17.6879L36.5188 15.2552L36.572 15.3362L33.5662 17.8047L33.7055 17.8756L38.3071 14.1294C38.3071 14.1294 38.5881 14.3551 38.782 14.4158C39.1066 14.5174 39.355 14.3951 39.355 14.3951L41.9533 19.777L42.0964 19.6948L40.475 16.1709L40.5371 16.1419L42.1957 19.6482L42.3306 19.5888L39.8147 14.1323C39.8147 14.1323 39.8622 14.073 39.8904 14.0476C39.8904 14.0476 40.0829 13.9555 40.2025 13.7689C40.2757 13.6547 40.3302 13.5439 40.2723 13.284L40.4607 13.1692C41.681 12.9847 46.5213 12.2774 46.5213 12.2774L46.5093 12.1468L42.4523 12.6709L42.4356 12.603L46.5334 12.0447L46.5307 11.9097L40.2804 12.6595C40.1816 12.1789 39.5996 11.9417 39.5996 11.9417C39.872 10.7356 40.7947 5.76763 40.7947 5.76763C40.7947 5.76763 40.7271 5.72429 40.7216 5.74892L39.8258 9.73167L39.7529 9.73369L40.582 5.75001C40.5869 5.72607 40.5112 5.73213 40.5112 5.73213L39.0095 11.8494C39.0095 11.8494 38.8145 11.8172 38.198 12.2052C38.1564 12.2313 38.0509 12.2022 38.0509 12.2022L32.926 9.04331C32.9208 9.04003 32.9154 9.04007 32.91 9.04134L32.91 9.04134ZM38.9244 12.7578C39.01 12.7177 39.108 12.7132 39.1968 12.7453C39.2857 12.7775 39.3582 12.8436 39.3983 12.9292C39.4384 13.0148 39.4429 13.1128 39.4107 13.2017C39.3786 13.2905 39.3124 13.363 39.2269 13.4031C39.1413 13.4432 39.0433 13.4477 38.9544 13.4156C38.8655 13.3834 38.7931 13.3173 38.7529 13.2317C38.7128 13.1461 38.7084 13.0481 38.7405 12.9592C38.7727 12.8703 38.8388 12.7979 38.9244 12.7578V12.7578ZM38.9853 12.8957L38.9901 13.0108L38.8877 13.0588L38.9251 13.1548L39.0187 13.1526L39.076 13.2506L39.1627 13.2175L39.1608 13.1087L39.2507 13.0665L39.233 12.9802L39.1258 12.9774L39.0869 12.8783L38.9853 12.8957Z"/>
                <path id="body" fill="#9da0a2" d="M47.53 24.915C47.53 25.215 47.5137 25.5257 47.4827 25.8451C47.4565 26.1156 46.3885 25.1267 46.3424 25.4086C46.3018 25.6562 46.2051 26.1692 46.2051 26.1692C46.608 26.4588 47.2919 27.2794 47.281 27.6406C47.0991 33.6614 41.5547 40.3054 41.5547 40.3054C35.6176 45.9611 30.6864 46.9202 25.029 47.3535C13.7137 48.2203 2.71482 36.3974 2.81452 27.7194C2.81452 27.7194 2.63723 27.3025 3.74864 26.1264C3.74864 26.1264 3.72872 25.4376 3.69895 25.1368C3.66614 24.8052 2.5689 26.3168 2.55081 25.9814C2.52888 25.575 2.55092 24.5912 2.55092 24.1794C2.55092 11.7956 12.6452 2.50781 25.029 2.50781C37.4128 2.50781 47.53 12.5312 47.53 24.915Z"/>
                <path id="buttons" fill="#808080" d="M28.618 8.84152H21.3366C20.7142 8.84152 20.2097 9.29651 20.2097 9.85776C20.2097 10.419 20.7142 10.874 21.3366 10.874H28.618C29.2404 10.874 29.7449 10.419 29.7449 9.85776C29.7449 9.29651 29.2404 8.84152 28.618 8.84152Z"/>
                <g id="lydar">
                    <path id="circle3251" d="M25.0356 27.3783C28.6601 27.3783 31.5984 24.44 31.5984 20.8155C31.5984 17.1909 28.6601 14.2526 25.0356 14.2526C21.411 14.2526 18.4727 17.1909 18.4727 20.8155C18.4727 24.44 21.411 27.3783 25.0356 27.3783Z" fill="#333333"/>
                    <path id="path3028" d="M25.0355 26.4502C28.1475 26.4502 30.6703 23.9274 30.6703 20.8155C30.6703 17.7035 28.1475 15.1807 25.0355 15.1807C21.9236 15.1807 19.4008 17.7035 19.4008 20.8155C19.4008 23.9274 21.9236 26.4502 25.0355 26.4502Z" fill="#9da0a2"/>
                </g>
              </g>  
            </svg>
          `;
        ]]]


  icon_ac:
    styles:
      custom_fields:
        icon:
          - width: 90%
          - margin-top: -6%
          - margin-left: 1%
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes bottom-flap {
                0% {
                    transform: rotateX(100deg);
                }
                100% {
                    transform: rotateX(0deg);
                }
              }
              .bottom-flap{
                animation: bottom-flap 4s ease-in-out;
                transform-origin: top;
                transform-box: fill-box;
              }
              @keyframes flow-control {
                0% {
                    transform: rotateX(100deg);
                }
                50% {
                    transform: rotateX(90deg);
                }
                100% {
                    transform: rotateX(0deg);
                }
              }
              .flow-control{
                animation: flow-control 5s ease-in-out;
                transform-origin: top;
                transform-box: fill-box;
              }
            </style>
          `,
            path = `
              <path fill="url(#aircon_paint2_linear_1_2)" id="aircon-unit" d="M1.21287 15.9548C0.98527 15.9548 0.801849 16.1382 0.801849 16.3658V31.8749C0.801849 32.1025 0.98527 32.2859 1.21287 32.2859H42.9177V32.5189C42.9177 32.6006 43.0462 32.6648 43.2055 32.6648H46.0787C46.062 32.7554 46.0539 32.8473 46.0546 32.9393V33.6502C46.0546 33.8685 46.0907 34.0452 46.1362 34.0452H47.3961C47.4416 34.0452 47.4778 33.8685 47.4778 33.6502V32.9393C47.4784 32.8473 47.4703 32.7554 47.4537 32.6648H47.6491C47.8085 32.6648 47.937 32.6006 47.937 32.5189V32.2859H48.7872C49.0148 32.2859 49.1982 32.1025 49.1982 31.8749V16.3658C49.1982 16.1382 49.0148 15.9548 48.7872 15.9548H1.21287ZM2.72978 23.7576H47.3613C47.4001 23.7576 47.4322 23.7897 47.4322 23.8312V24.4404C47.4322 24.4819 47.4001 24.5167 47.3613 24.5167H2.72844C2.68961 24.5167 2.65748 24.4819 2.65748 24.4404V23.8312C2.65748 23.7897 2.68961 23.7576 2.72844 23.7576H2.72978Z"/>
            `,
            gradient = `
              <linearGradient id="aircon_paint0_linear_1_2" x1="22.9118" y1="35.1798" x2="22.9118" y2="32.2111" gradientUnits="userSpaceOnUse">
                <stop stop-color="#CCCCCC"/>
                <stop offset="1" stop-color="#585858"/>
              </linearGradient>
              <linearGradient id="aircon_paint1_linear_1_2" x1="22.8125" y1="32.9688" x2="22.8125" y2="34.5938" gradientUnits="userSpaceOnUse">
                <stop stop-color="#4D4D4D"/>
                <stop offset="1" stop-color="#848484"/>
              </linearGradient>
              <linearGradient id="aircon_paint2_linear_1_2" x1="25.375" y1="14.625" x2="25.9375" y2="60.75" gradientUnits="userSpaceOnUse">
                <stop stop-color="#CCCCCC"/>
                <stop offset="1" stop-color="#2C2C2C"/>
              </linearGradient>
            `;
          if (variables.state !== 'off') {
            return `
              <svg viewBox="0 0 50 50"> ${gradient} 
                ${path}
                <path id="bottom-flap" d="M3.38065 31.8435H40.2322C40.2647 31.8435 40.2908 31.8697 40.2908 31.9022C40.3213 32.714 40.6142 33.7062 40.7243 34.4498L2.88846 34.4536C2.969 33.7186 3.32197 32.7133 3.32197 31.9022C3.32197 31.8697 3.34814 31.8435 3.38065 31.8435V31.8435Z" fill="url(#aircon_paint0_linear_1_2)"/>
                <path id="flow-control" d="M4.01023 31.2383H39.6673C39.6988 31.2383 39.7241 31.265 39.7241 31.2982C39.7756 33.3753 40.037 33.1396 40.1436 33.8985L3.534 33.9025C3.61192 33.1523 3.88716 33.4851 3.95346 31.2982C3.95346 31.265 3.97878 31.2383 4.01023 31.2383L4.01023 31.2383Z" fill="url(#aircon_paint1_linear_1_2)"/>
                ${style}
              </svg>
            `;
          }
          if (variables.state === 'off') {
            return `
              <svg viewBox="0 0 50 50"> ${style}
                <path fill="#9da0a2" id="aircon-unit" d="M1.21287 15.9548C0.98527 15.9548 0.801849 16.1382 0.801849 16.3658V31.8749C0.801849 32.1025 0.98527 32.2859 1.21287 32.2859H42.9177V32.5189C42.9177 32.6006 43.0462 32.6648 43.2055 32.6648H46.0787C46.062 32.7554 46.0539 32.8473 46.0546 32.9393V33.6502C46.0546 33.8685 46.0907 34.0452 46.1362 34.0452H47.3961C47.4416 34.0452 47.4778 33.8685 47.4778 33.6502V32.9393C47.4784 32.8473 47.4703 32.7554 47.4537 32.6648H47.6491C47.8085 32.6648 47.937 32.6006 47.937 32.5189V32.2859H48.7872C49.0148 32.2859 49.1982 32.1025 49.1982 31.8749V16.3658C49.1982 16.1382 49.0148 15.9548 48.7872 15.9548H1.21287ZM2.72978 23.7576H47.3613C47.4001 23.7576 47.4322 23.7897 47.4322 23.8312V24.4404C47.4322 24.4819 47.4001 24.5167 47.3613 24.5167H2.72844C2.68961 24.5167 2.65748 24.4819 2.65748 24.4404V23.8312C2.65748 23.7897 2.68961 23.7576 2.72844 23.7576H2.72978Z"/>
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50"> ${style} 
                <path fill="#9da0a2" id="aircon-unit" d="M1.21287 15.9548C0.98527 15.9548 0.801849 16.1382 0.801849 16.3658V31.8749C0.801849 32.1025 0.98527 32.2859 1.21287 32.2859H42.9177V32.5189C42.9177 32.6006 43.0462 32.6648 43.2055 32.6648H46.0787C46.062 32.7554 46.0539 32.8473 46.0546 32.9393V33.6502C46.0546 33.8685 46.0907 34.0452 46.1362 34.0452H47.3961C47.4416 34.0452 47.4778 33.8685 47.4778 33.6502V32.9393C47.4784 32.8473 47.4703 32.7554 47.4537 32.6648H47.6491C47.8085 32.6648 47.937 32.6006 47.937 32.5189V32.2859H48.7872C49.0148 32.2859 49.1982 32.1025 49.1982 31.8749V16.3658C49.1982 16.1382 49.0148 15.9548 48.7872 15.9548H1.21287ZM2.72978 23.7576H47.3613C47.4001 23.7576 47.4322 23.7897 47.4322 23.8312V24.4404C47.4322 24.4819 47.4001 24.5167 47.3613 24.5167H2.72844C2.68961 24.5167 2.65748 24.4819 2.65748 24.4404V23.8312C2.65748 23.7897 2.68961 23.7576 2.72844 23.7576H2.72978Z"/>
              </svg>
            `;
          }
        ]]]


  icon_climate:
    styles:
      custom_fields:
        icon:
          - width: 78%
          - margin-left: -10%
          - fill: >
              [[[
                if (variables.state === 'cool' || variables.state === 'fan_only') {
                  return '#5daeea';
                }
                else if (variables.state === 'heat') {
                  return '#ff8100';
                }
                else {
                  return '#9da0a2';
                }
              ]]]
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M36.8 1.2v1.7a5.34 5.34 0 0 1-5.3 5.3H18.4a5.34 5.34 0 0 1-5.3-5.3V1.2c-2.6.4-4.7 2.8-4.7 5.6v36.5c0 3.1 2.6 5.7 5.7 5.7h21.8c3.1 0 5.7-2.6 5.7-5.7V6.8c0-2.8-2.1-5.2-4.8-5.6zm-1.7 35.6c-.2 0-.4 0-.5-.1-.4-.1-1.2-.2-2.4-.6-.5-.2-.8-.3-1.2-.4-.3-.1-.7-.3-1.4-.5-1-.4-1.5-.5-1.9-.6-.5-.1-1.1-.2-1.9-.2s-1.4.2-1.9.4c-1 .3-1.8.7-2.1.9l-.6.3a9.75 9.75 0 0 1-1.4.6c-.3.1-.9.3-1.6.3h-.3c-.4 0-1 0-2-.2-.3-.1-.6-.1-.8-.2v-2.7l1.3.3c.5.1 1.3.2 1.7.2.5 0 .9-.2 1.1-.2.4-.1.6-.2 1-.4.2-.1.4-.2.7-.4.4-.2 1.3-.7 2.5-1 .6-.2 1.4-.4 2.5-.5s2 .1 2.5.2c.6.1 1.2.3 2.2.7l1.5.5c.3.1.6.2 1 .4 1 .3 1.8.5 2.1.5h.1v2.7zm0-6c-.2 0-.4 0-.5-.1-.4-.1-1.2-.2-2.4-.6-.5-.2-.8-.3-1.2-.4-.3-.1-.7-.3-1.4-.5-1-.4-1.5-.5-1.9-.6-.5-.1-1.1-.2-1.9-.2s-1.4.2-1.9.4c-1 .3-1.8.7-2.1.9l-.6.3a9.75 9.75 0 0 1-1.4.6c-.3.1-.9.3-1.6.3h-.3c-.4 0-1 0-2-.2-.3-.1-.6-.1-.8-.2v-2.7l1.3.3c.5.1 1.3.2 1.7.2.5 0 .9-.2 1.1-.2.4-.1.6-.2 1-.4.2-.1.4-.2.7-.4.4-.2 1.3-.7 2.5-1 .6-.2 1.4-.4 2.5-.5s2 .1 2.5.2c.6.1 1.2.3 2.2.7l1.5.5c.3.1.6.2 1 .4 1 .3 1.8.5 2.1.5h.1v2.7zm0-6c-.2 0-.4 0-.5-.1-.4-.1-1.2-.2-2.4-.6-.5-.2-.8-.3-1.2-.4-.3-.1-.7-.3-1.4-.5-1-.4-1.5-.5-1.9-.6-.5-.1-1.1-.2-1.9-.2s-1.4.2-1.9.4c-1 .3-1.8.7-2.1.9l-.6.3c-.4.2-.8.4-1.4.6-.3.1-.9.3-1.6.3h-.3c-.4 0-1 0-2-.2-.3-.1-.6-.1-.8-.2v-2.7l1.3.3c.5.1 1.3.2 1.7.2.5 0 .9-.2 1.1-.2.4-.1.6-.2 1-.4.2-.1.4-.2.7-.4.4-.2 1.3-.7 2.5-1 .6-.2 1.4-.4 2.5-.5s2 .1 2.5.2c.6.1 1.2.3 2.2.7l1.5.5c.3.1.6.2 1 .4 1 .3 1.8.5 2.1.5h.1v2.7zM15.7 1.9v-.8h18.6V3c0 1.5-1.2 2.8-2.8 2.8H18.4c-1.5 0-2.8-1.2-2.8-2.8V1.9z"/>
        </svg>


  icon_office:
    styles:
      custom_fields:
        icon:
          - width: 75%
          - margin-top: -5%
          - margin-left: -8%
          - color: >
              [[[ return variables.state === 'yes' ? '#e56601' : '#9da0a2'; ]]]
    custom_fields:
      icon: >
          <ha-icon icon="mdi:microsoft-office"></ha-icon>


  icon_keyboard:
    styles:
      custom_fields:
        icon:
          #- width: 95%
          - margin-top: -15%
          #- margin-left: 2%
    custom_fields:
      icon: >
        [[[
          let paths = `
              <path id="frame" fill="#9DA0A2" d="M48.75 15.438L1.297 15.444C0.713996 15.449 0.714996 15.448 0.714996 16.073V32.415C0.714996 33.05 1.225 33.561 1.86 33.561H48.118C48.753 33.561 49.263 33.049 49.263 32.415V16.072H49.267L49.263 
              15.927V15.447H48.962L48.751 15.437L48.75 15.438ZM2.297 16.844H4.537C4.59906 16.8439 4.66053 16.856 4.71786 16.8798C4.7752 16.9035 4.82726 16.9384 4.87105 16.9824C4.91484 17.0263 4.94949 17.0785 4.97299 17.136C4.99649 
              17.1934 5.00839 17.2549 5.008 17.317V19.555C5.00839 19.6171 4.99649 19.6786 4.97299 19.736C4.94949 19.7934 4.91484 19.8457 4.87105 19.8896C4.82726 19.9336 4.7752 19.9685 4.71786 19.9922C4.66053 20.016 4.59906 20.0281 
              4.537 20.028H2.297C2.23477 20.0284 2.17308 20.0164 2.11552 19.9928C2.05795 19.9692 2.00565 19.9343 1.96165 19.8903C1.91764 19.8463 1.88282 19.794 1.85919 19.7365C1.83556 19.6789 1.8236 19.6172 1.824 19.555V17.317C1.8236 
              17.2548 1.83556 17.1931 1.85919 17.1355C1.88282 17.078 1.91764 17.0256 1.96165 16.9816C2.00565 16.9376 2.05795 16.9028 2.11552 16.8792C2.17308 16.8556 2.23477 16.8436 2.297 16.844V16.844ZM6.385 16.846H8.625C8.68689 16.8459 
              8.74819 16.858 8.8054 16.8816C8.8626 16.9052 8.91458 16.9399 8.95834 16.9837C9.0021 17.0274 9.03679 17.0794 9.06041 17.1366C9.08404 17.1938 9.09613 17.2551 9.096 17.317V19.557C9.09613 19.6189 9.08404 19.6802 9.06041 
              19.7374C9.03679 19.7946 9.0021 19.8466 8.95834 19.8903C8.91458 19.9341 8.8626 19.9688 8.8054 19.9924C8.74819 20.016 8.68689 20.0281 8.625 20.028H6.385C6.32294 20.0284 6.26142 20.0165 6.20398 19.993C6.14655 19.9695 6.09433 
              19.9348 6.05036 19.891C6.00638 19.8473 5.97152 19.7952 5.94777 19.7379C5.92402 19.6805 5.91186 19.6191 5.912 19.557V17.317C5.91186 17.2549 5.92402 17.1935 5.94777 17.1361C5.97152 17.0788 6.00638 17.0267 6.05036 16.9829C6.09433 
              16.9392 6.14655 16.9045 6.20398 16.881C6.26142 16.8575 6.32294 16.8456 6.385 16.846V16.846ZM10.479 16.848H12.719C12.7809 16.8479 12.8422 16.86 12.8994 16.8836C12.9566 16.9072 13.0086 16.9419 13.0523 16.9857C13.0961 17.0294 
              13.1308 17.0814 13.1544 17.1386C13.178 17.1958 13.1901 17.2571 13.19 17.319V19.559C13.1901 19.6209 13.178 19.6822 13.1544 19.7394C13.1308 19.7966 13.0961 19.8486 13.0523 19.8923C13.0086 19.9361 12.9566 19.9708 12.8994 
              19.9944C12.8422 20.018 12.7809 20.0301 12.719 20.03H10.479C10.4171 20.0301 10.3558 20.018 10.2986 19.9944C10.2414 19.9708 10.1894 19.9361 10.1457 19.8923C10.1019 19.8486 10.0672 19.7966 10.0436 19.7394C10.02 19.6822 
              10.0079 19.6209 10.008 19.559V17.319C10.0079 17.2571 10.02 17.1958 10.0436 17.1386C10.0672 17.0814 10.1019 17.0294 10.1457 16.9857C10.1894 16.9419 10.2414 16.9072 10.2986 16.8836C10.3558 16.86 10.4171 16.8479 10.479 
              16.848V16.848ZM14.565 16.862H16.805C16.8672 16.8619 16.9289 16.8741 16.9863 16.898C17.0438 16.9218 17.0959 16.9569 17.1398 17.0011C17.1836 17.0453 17.2182 17.0977 17.2416 17.1554C17.265 17.213 17.2767 17.2748 17.276 
              17.337V19.575C17.2764 19.6371 17.2645 19.6986 17.241 19.756C17.2175 19.8134 17.1828 19.8657 17.139 19.9096C17.0953 19.9536 17.0432 19.9885 16.9859 20.0122C16.9285 20.036 16.8671 20.0481 16.805 20.048H14.565C14.5029 
              20.0481 14.4415 20.036 14.3841 20.0122C14.3268 19.9885 14.2747 19.9536 14.2309 19.9096C14.1872 19.8657 14.1525 19.8134 14.129 19.756C14.1055 19.6986 14.0936 19.6371 14.094 19.575V17.337C14.0933 17.2748 14.105 17.213 
              14.1284 17.1554C14.1518 17.0977 14.1864 17.0453 14.2302 17.0011C14.274 16.9569 14.3262 16.9218 14.3837 16.898C14.4411 16.8741 14.5028 16.8619 14.565 16.862V16.862ZM18.653 16.882H20.893C20.9551 16.8819 21.0165 16.894 
              21.0739 16.9178C21.1312 16.9415 21.1833 16.9764 21.227 17.0204C21.2708 17.0643 21.3055 17.1165 21.329 17.174C21.3525 17.2314 21.3644 17.2929 21.364 17.355V19.593C21.3644 19.6551 21.3525 19.7166 21.329 19.774C21.3055 
              19.8314 21.2708 19.8837 21.227 19.9276C21.1833 19.9716 21.1312 20.0065 21.0739 20.0302C21.0165 20.054 20.9551 20.0661 20.893 20.066H18.653C18.5909 20.0661 18.5295 20.054 18.4721 20.0302C18.4148 20.0065 18.3627 19.9716 
              18.3189 19.9276C18.2752 19.8837 18.2405 19.8314 18.217 19.774C18.1935 19.7166 18.1816 19.6551 18.182 19.593V17.355C18.1816 17.2929 18.1935 17.2314 18.217 17.174C18.2405 17.1165 18.2752 17.0643 18.3189 17.0204C18.3627 
              16.9764 18.4148 16.9415 18.4721 16.9178C18.5295 16.894 18.5909 16.8819 18.653 16.882V16.882ZM22.737 16.882H24.977C25.0391 16.8819 25.1005 16.894 25.1579 16.9178C25.2152 16.9415 25.2673 16.9764 25.311 17.0204C25.3548 
              17.0643 25.3895 17.1165 25.413 17.174C25.4365 17.2314 25.4484 17.2929 25.448 17.355V19.593C25.4484 19.6551 25.4365 19.7166 25.413 19.774C25.3895 19.8314 25.3548 19.8837 25.311 19.9276C25.2673 19.9716 25.2152 20.0065 
              25.1579 20.0302C25.1005 20.054 25.0391 20.0661 24.977 20.066H22.737C22.6748 20.0664 22.6131 20.0544 22.5555 20.0308C22.498 20.0072 22.4456 19.9723 22.4016 19.9283C22.3576 19.8843 22.3228 19.832 22.2992 19.7745C22.2756 
              19.7169 22.2636 19.6552 22.264 19.593V17.355C22.2636 17.2928 22.2756 17.2311 22.2992 17.1735C22.3228 17.116 22.3576 17.0636 22.4016 17.0196C22.4456 16.9756 22.498 16.9408 22.5555 16.9172C22.6131 16.8936 22.6748 16.8816 
              22.737 16.882V16.882ZM26.809 16.888H29.049C29.1111 16.8879 29.1725 16.9 29.2299 16.9238C29.2872 16.9475 29.3393 16.9824 29.383 17.0264C29.4268 17.0703 29.4615 17.1225 29.485 17.18C29.5085 17.2374 29.5204 17.2989 29.52 
              17.361V19.601C29.5201 19.6629 29.508 19.7242 29.4844 19.7814C29.4608 19.8386 29.4261 19.8906 29.3823 19.9343C29.3386 19.9781 29.2866 20.0128 29.2294 20.0364C29.1722 20.06 29.1109 20.0721 29.049 20.072H26.809C26.7471 
              20.0721 26.6858 20.06 26.6286 20.0364C26.5714 20.0128 26.5194 19.9781 26.4757 19.9343C26.4319 19.8906 26.3972 19.8386 26.3736 19.7814C26.35 19.7242 26.3379 19.6629 26.338 19.601V17.361C26.3376 17.2989 26.3495 17.2374 
              26.373 17.18C26.3965 17.1225 26.4312 17.0703 26.4749 17.0264C26.5187 16.9824 26.5708 16.9475 26.6281 16.9238C26.6855 16.9 26.7469 16.8879 26.809 16.888V16.888ZM30.887 16.904H33.127C33.1891 16.9036 33.2506 16.9155 33.308 
              16.939C33.3654 16.9625 33.4177 16.9972 33.4616 17.0409C33.5056 17.0847 33.5405 17.1368 33.5642 17.1941C33.588 17.2515 33.6001 17.3129 33.6 17.375V19.615C33.6001 19.6771 33.588 19.7385 33.5642 19.7959C33.5405 19.8532 
              33.5056 19.9053 33.4616 19.949C33.4177 19.9928 33.3654 20.0275 33.308 20.051C33.2506 20.0745 33.1891 20.0864 33.127 20.086H30.887C30.8251 20.0861 30.7638 20.074 30.7066 20.0504C30.6494 20.0268 30.5974 19.9921 30.5537 
              19.9483C30.5099 19.9046 30.4752 19.8526 30.4516 19.7954C30.428 19.7382 30.4159 19.6769 30.416 19.615V17.375C30.4159 17.3131 30.428 17.2518 30.4516 17.1946C30.4752 17.1374 30.5099 17.0854 30.5537 17.0417C30.5974 16.9979 
              30.6494 16.9632 30.7066 16.9396C30.7638 16.916 30.8251 16.9039 30.887 16.904V16.904ZM34.973 16.918H37.213C37.2752 16.9176 37.3369 16.9296 37.3945 16.9532C37.452 16.9768 37.5043 17.0116 37.5483 17.0556C37.5923 17.0996 
              37.6272 17.1519 37.6508 17.2095C37.6744 17.2671 37.6864 17.3288 37.686 17.391V19.631C37.6861 19.6931 37.674 19.7545 37.6502 19.8119C37.6265 19.8692 37.5916 19.9213 37.5476 19.965C37.5037 20.0088 37.4514 20.0435 37.394 
              20.067C37.3366 20.0905 37.2751 20.1024 37.213 20.102H34.973C34.9111 20.1021 34.8498 20.09 34.7926 20.0664C34.7354 20.0428 34.6834 20.0081 34.6397 19.9643C34.5959 19.9206 34.5612 19.8686 34.5376 19.8114C34.514 19.7542 
              34.5019 19.6929 34.502 19.631V17.391C34.5016 17.3289 34.5135 17.2674 34.537 17.21C34.5605 17.1525 34.5952 17.1003 34.6389 17.0564C34.6827 17.0124 34.7348 16.9775 34.7921 16.9538C34.8495 16.93 34.9109 16.9179 34.973 
              16.918V16.918ZM39.184 16.918H47.645C47.926 16.918 48.153 17.145 48.153 17.426V19.594C48.153 19.875 47.926 20.102 47.645 20.102H39.184C38.903 20.102 38.676 19.875 38.676 19.594V17.426C38.676 17.145 38.903 16.918 39.184 
              16.918ZM2.277 20.951H7.506C7.56395 20.9509 7.62135 20.9622 7.67492 20.9843C7.72848 21.0064 7.77715 21.0389 7.81812 21.0799C7.8591 21.1208 7.89158 21.1695 7.9137 21.2231C7.93581 21.2766 7.94713 21.334 7.947 21.392V23.693C7.94713 
              23.7509 7.93581 23.8084 7.9137 23.8619C7.89158 23.9155 7.8591 23.9641 7.81812 24.0051C7.77715 24.0461 7.72848 24.0786 7.67492 24.1007C7.62135 24.1228 7.56395 24.1341 7.506 24.134H2.277C2.21921 24.1339 2.16202 24.1224 2.10869 
              24.1001C2.05536 24.0779 2.00693 24.0454 1.96616 24.0044C1.9254 23.9635 1.8931 23.9149 1.87111 23.8615C1.84912 23.808 1.83787 23.7508 1.838 23.693V21.392C1.83787 21.3342 1.84912 21.277 1.87111 21.2235C1.8931 21.1701 1.9254 
              21.1215 1.96616 21.0806C2.00693 21.0396 2.05536 21.0071 2.10869 20.9849C2.16202 20.9626 2.21921 20.9511 2.277 20.951V20.951ZM9.353 20.951H11.593C11.6552 20.9506 11.7169 20.9626 11.7745 20.9862C11.832 21.0098 11.8843 21.0446 
              11.9283 21.0886C11.9723 21.1326 12.0072 21.185 12.0308 21.2425C12.0544 21.3001 12.0664 21.3618 12.066 21.424V23.664C12.0661 23.7261 12.054 23.7875 12.0302 23.8449C12.0065 23.9022 11.9716 23.9543 11.9276 23.998C11.8837 24.0418 
              11.8314 24.0765 11.774 24.1C11.7166 24.1235 11.6551 24.1354 11.593 24.135H9.353C9.29111 24.1351 9.2298 24.123 9.1726 24.0994C9.11539 24.0758 9.06342 24.0411 9.01966 23.9973C8.97589 23.9536 8.9412 23.9016 8.91758 23.8444C8.89396 
              23.7872 8.88186 23.7259 8.882 23.664V21.424C8.8816 21.3619 8.8935 21.3004 8.917 21.243C8.94051 21.1855 8.97515 21.1333 9.01894 21.0894C9.06273 21.0454 9.1148 21.0105 9.17213 20.9868C9.22947 20.963 9.29094 20.9509 9.353 
              20.951V20.951ZM13.437 20.967H15.675C15.7372 20.9666 15.7989 20.9786 15.8565 21.0022C15.914 21.0258 15.9663 21.0606 16.0103 21.1046C16.0543 21.1486 16.0892 21.2009 16.1128 21.2585C16.1364 21.3161 16.1484 21.3778 16.148 
              21.44V23.678C16.1484 23.7402 16.1364 23.8019 16.1128 23.8595C16.0892 23.917 16.0543 23.9693 16.0103 24.0133C15.9663 24.0573 15.914 24.0922 15.8565 24.1158C15.7989 24.1394 15.7372 24.1514 15.675 24.151H13.437C13.3748 
              24.1514 13.3131 24.1394 13.2555 24.1158C13.198 24.0922 13.1456 24.0573 13.1016 24.0133C13.0576 23.9693 13.0228 23.917 12.9992 23.8595C12.9756 23.8019 12.9636 23.7402 12.964 23.678V21.44C12.9636 21.3778 12.9756 21.3161 
              12.9992 21.2585C13.0228 21.2009 13.0576 21.1486 13.1016 21.1046C13.1456 21.0606 13.198 21.0258 13.2555 21.0022C13.3131 20.9786 13.3748 20.9666 13.437 20.967V20.967ZM17.533 20.975H19.771C19.8331 20.9746 19.8946 20.9865 
              19.952 21.01C20.0094 21.0335 20.0617 21.0682 20.1056 21.1119C20.1496 21.1557 20.1845 21.2078 20.2082 21.2651C20.232 21.3225 20.2441 21.3839 20.244 21.446V23.686C20.2444 23.7482 20.2324 23.8099 20.2088 23.8675C20.1852 
              23.925 20.1503 23.9773 20.1063 24.0213C20.0623 24.0653 20.01 24.1002 19.9525 24.1238C19.8949 24.1474 19.8332 24.1594 19.771 24.159H17.533C17.4708 24.1594 17.4091 24.1474 17.3515 24.1238C17.2939 24.1002 17.2416 24.0653 
              17.1976 24.0213C17.1536 23.9773 17.1188 23.925 17.0952 23.8675C17.0716 23.8099 17.0596 23.7482 17.06 23.686V21.446C17.0599 21.3839 17.072 21.3225 17.0958 21.2651C17.1195 21.2078 17.1544 21.1557 17.1984 21.1119C17.2423 
              21.0682 17.2945 21.0335 17.352 21.01C17.4094 20.9865 17.4709 20.9746 17.533 20.975V20.975ZM21.619 20.987H23.859C23.9209 20.9869 23.9822 20.999 24.0394 21.0226C24.0966 21.0462 24.1486 21.0809 24.1923 21.1247C24.2361 
              21.1684 24.2708 21.2204 24.2944 21.2776C24.318 21.3348 24.3301 21.3961 24.33 21.458V23.698C24.3304 23.7601 24.3185 23.8216 24.295 23.879C24.2715 23.9364 24.2368 23.9887 24.193 24.0326C24.1493 24.0766 24.0972 24.1115 
              24.0399 24.1352C23.9825 24.159 23.9211 24.1711 23.859 24.171H21.619C21.5569 24.1711 21.4955 24.159 21.4381 24.1352C21.3808 24.1115 21.3287 24.0766 21.2849 24.0326C21.2412 23.9887 21.2065 23.9364 21.183 23.879C21.1595 
              23.8216 21.1476 23.7601 21.148 23.698V21.458C21.1479 21.3961 21.16 21.3348 21.1836 21.2776C21.2072 21.2204 21.2419 21.1684 21.2857 21.1247C21.3294 21.0809 21.3814 21.0462 21.4386 21.0226C21.4958 20.999 21.5571 20.9869 
              21.619 20.987V20.987ZM25.711 20.991H27.951C28.0132 20.9909 28.0749 21.0031 28.1323 21.027C28.1898 21.0508 28.2419 21.0859 28.2858 21.1301C28.3296 21.1743 28.3642 21.2267 28.3876 21.2844C28.411 21.342 28.4227 21.4038 
              28.422 21.466V23.702C28.4227 23.7642 28.411 23.826 28.3876 23.8836C28.3642 23.9413 28.3296 23.9937 28.2858 24.0379C28.2419 24.0821 28.1898 24.1172 28.1323 24.141C28.0749 24.1649 28.0132 24.1771 27.951 24.177H25.711C25.6488 
              24.1771 25.5871 24.1649 25.5297 24.141C25.4722 24.1172 25.42 24.0821 25.3762 24.0379C25.3324 23.9937 25.2978 23.9413 25.2744 23.8836C25.251 23.826 25.2393 23.7642 25.24 23.702V21.466C25.2393 21.4038 25.251 21.342 25.2744 
              21.2844C25.2978 21.2267 25.3324 21.1743 25.3762 21.1301C25.42 21.0859 25.4722 21.0508 25.5297 21.027C25.5871 21.0031 25.6488 20.9909 25.711 20.991V20.991ZM29.801 21.007H32.039C32.1012 21.0066 32.1629 21.0186 32.2205 
              21.0422C32.278 21.0658 32.3303 21.1006 32.3743 21.1446C32.4183 21.1886 32.4532 21.241 32.4768 21.2985C32.5004 21.3561 32.5124 21.4178 32.512 21.48V23.718C32.5124 23.7802 32.5004 23.8419 32.4768 23.8995C32.4532 23.957 
              32.4183 24.0093 32.3743 24.0533C32.3303 24.0973 32.278 24.1322 32.2205 24.1558C32.1629 24.1794 32.1012 24.1914 32.039 24.191H29.801C29.7388 24.1914 29.6771 24.1794 29.6195 24.1558C29.5619 24.1322 29.5096 24.0973 29.4656 
              24.0533C29.4216 24.0093 29.3868 23.957 29.3632 23.8995C29.3396 23.8419 29.3276 23.7802 29.328 23.718V21.48C29.3276 21.4178 29.3396 21.3561 29.3632 21.2985C29.3868 21.241 29.4216 21.1886 29.4656 21.1446C29.5096 21.1006 
              29.5619 21.0658 29.6195 21.0422C29.6771 21.0186 29.7388 21.0066 29.801 21.007V21.007ZM33.879 21.011H36.117C36.1791 21.0106 36.2406 21.0225 36.298 21.046C36.3554 21.0695 36.4077 21.1042 36.4516 21.1479C36.4956 21.1917 
              36.5305 21.2438 36.5542 21.3011C36.578 21.3585 36.5901 21.4199 36.59 21.482V23.722C36.5901 23.7841 36.578 23.8455 36.5542 23.9029C36.5305 23.9602 36.4956 24.0123 36.4516 24.056C36.4077 24.0998 36.3554 24.1345 36.298 
              24.158C36.2406 24.1815 36.1791 24.1934 36.117 24.193H33.879C33.8169 24.1934 33.7554 24.1815 33.698 24.158C33.6405 24.1345 33.5883 24.0998 33.5444 24.056C33.5004 24.0123 33.4655 23.9602 33.4418 23.9029C33.418 23.8455 
              33.4059 23.7841 33.406 23.722V21.482C33.4059 21.4199 33.418 21.3585 33.4418 21.3011C33.4655 21.2438 33.5004 21.1917 33.5444 21.1479C33.5883 21.1042 33.6405 21.0695 33.698 21.046C33.7554 21.0225 33.8169 21.0106 33.879 
              21.011V21.011ZM42.119 21.011V21.013H47.644C47.7098 21.0127 47.7751 21.0255 47.836 21.0505C47.8968 21.0755 47.9522 21.1123 47.9988 21.1587C48.0455 21.2052 48.0825 21.2604 48.1077 21.3212C48.133 21.382 48.146 21.4472 
              48.146 21.513L48.128 27.831C48.127 28.082 47.963 28.323 47.556 28.331L43.89 28.306C43.661 28.304 43.443 28.072 43.439 27.843L43.375 24.603C43.372 24.458 43.202 24.198 42.951 24.197L42.119 24.195C42.0532 24.1953 41.9879 
              24.1825 41.927 24.1575C41.8661 24.1325 41.8108 24.0957 41.7641 24.0493C41.7175 24.0028 41.6805 23.9476 41.6552 23.8868C41.63 23.826 41.617 23.7608 41.617 23.695V21.51C41.617 21.4442 41.63 21.379 41.6552 21.3182C41.6805 
              21.2574 41.7175 21.2022 41.7641 21.1557C41.8108 21.1093 41.8661 21.0725 41.927 21.0475C41.9879 21.0225 42.0532 21.0097 42.119 21.01V21.011ZM37.945 21.013H40.185C40.2469 21.0129 40.3082 21.025 40.3654 21.0486C40.4226 21.0722 
              40.4746 21.1069 40.5183 21.1507C40.5621 21.1944 40.5968 21.2464 40.6204 21.3036C40.644 21.3608 40.6561 21.4221 40.656 21.484V23.724C40.6561 23.7859 40.644 23.8472 40.6204 23.9044C40.5968 23.9616 40.5621 24.0136 40.5183 
              24.0573C40.4746 24.1011 40.4226 24.1358 40.3654 24.1594C40.3082 24.183 40.2469 24.1951 40.185 24.195H37.945C37.8831 24.1951 37.8218 24.183 37.7646 24.1594C37.7074 24.1358 37.6554 24.1011 37.6117 24.0573C37.5679 24.0136 
              37.5332 23.9616 37.5096 23.9044C37.486 23.8472 37.4739 23.7859 37.474 23.724V21.484C37.4739 21.4221 37.486 21.3608 37.5096 21.3036C37.5332 21.2464 37.5679 21.1944 37.6117 21.1507C37.6554 21.1069 37.7074 21.0722 37.7646 
              21.0486C37.8218 21.025 37.8831 21.0129 37.945 21.013V21.013ZM2.307 25.086H9.289C9.35237 25.0857 9.41516 25.098 9.47376 25.1221C9.53236 25.1463 9.5856 25.1818 9.63041 25.2266C9.67522 25.2714 9.71072 25.3246 9.73485 
              25.3832C9.75897 25.4418 9.77126 25.5046 9.771 25.568V27.787C9.77126 27.8504 9.75897 27.9132 9.73485 27.9718C9.71072 28.0304 9.67522 28.0836 9.63041 28.1284C9.5856 28.1732 9.53236 28.2087 9.47376 28.2328C9.41516 28.257 9.35237 
              28.2693 9.289 28.269H2.307C2.24363 28.2693 2.18083 28.257 2.12223 28.2328C2.06363 28.2087 2.01039 28.1732 1.96558 28.1284C1.92077 28.0836 1.88528 28.0304 1.86115 27.9718C1.83702 27.9132 1.82473 27.8504 1.825 27.787V25.568C1.82473 
              25.5046 1.83702 25.4418 1.86115 25.3832C1.88528 25.3246 1.92077 25.2714 1.96558 25.2266C2.01039 25.1818 2.06363 25.1463 2.12223 25.1221C2.18083 25.098 2.24363 25.0857 2.307 25.086V25.086ZM11.2 25.086H13.44C13.5022 25.0856 13.5639 
              25.0976 13.6215 25.1212C13.679 25.1448 13.7313 25.1796 13.7753 25.2236C13.8193 25.2676 13.8542 25.3199 13.8778 25.3775C13.9014 25.4351 13.9134 25.4968 13.913 25.559V27.797C13.9134 27.8592 13.9014 27.9209 13.8778 27.9785C13.8542 
              28.036 13.8193 28.0883 13.7753 28.1323C13.7313 28.1763 13.679 28.2112 13.6215 28.2348C13.5639 28.2584 13.5022 28.2704 13.44 28.27H11.2C11.1379 28.2701 11.0765 28.258 11.0191 28.2342C10.9618 28.2105 10.9097 28.1756 10.8659 
              28.1316C10.8222 28.0877 10.7875 28.0354 10.764 27.978C10.7405 27.9206 10.7286 27.8591 10.729 27.797V25.559C10.7286 25.4969 10.7405 25.4354 10.764 25.378C10.7875 25.3205 10.8222 25.2683 10.8659 25.2244C10.9097 25.1804 10.9618 
              25.1455 11.0191 25.1218C11.0765 25.098 11.1379 25.0859 11.2 25.086V25.086ZM19.372 25.094H21.612C21.6741 25.0939 21.7355 25.106 21.7929 25.1298C21.8502 25.1535 21.9023 25.1884 21.946 25.2324C21.9898 25.2763 22.0245 25.3285 
              22.048 25.386C22.0715 25.4434 22.0834 25.5049 22.083 25.567V27.805C22.0834 27.8671 22.0715 27.9286 22.048 27.986C22.0245 28.0434 21.9898 28.0957 21.946 28.1396C21.9023 28.1836 21.8502 28.2185 21.7929 28.2422C21.7355 28.266 
              21.6741 28.2781 21.612 28.278H19.372C19.3098 28.2784 19.2481 28.2664 19.1905 28.2428C19.133 28.2192 19.0806 28.1843 19.0366 28.1403C18.9926 28.0963 18.9578 28.044 18.9342 27.9865C18.9106 27.9289 18.8986 27.8672 18.899 
              27.805V25.567C18.8986 25.5048 18.9106 25.4431 18.9342 25.3855C18.9578 25.328 18.9926 25.2756 19.0366 25.2316C19.0806 25.1876 19.133 25.1528 19.1905 25.1292C19.2481 25.1056 19.3098 25.0936 19.372 25.094V25.094ZM15.29 
              25.098H17.528C17.5902 25.0973 17.652 25.109 17.7096 25.1324C17.7673 25.1558 17.8197 25.1904 17.8639 25.2342C17.9081 25.278 17.9432 25.3302 17.967 25.3877C17.9909 25.4451 18.0031 25.5068 18.003 25.569V27.809C18.0031 
              27.8712 17.9909 27.9329 17.967 27.9903C17.9432 28.0478 17.9081 28.0999 17.8639 28.1438C17.8197 28.1876 17.7673 28.2222 17.7096 28.2456C17.652 28.269 17.5902 28.2807 17.528 28.28H15.29C15.2279 28.2804 15.1664 28.2685 
              15.109 28.245C15.0515 28.2215 14.9993 28.1868 14.9554 28.143C14.9114 28.0993 14.8765 28.0472 14.8528 27.9899C14.829 27.9325 14.8169 27.8711 14.817 27.809V25.569C14.8169 25.5069 14.829 25.4455 14.8528 25.3881C14.8765 
              25.3308 14.9114 25.2787 14.9554 25.2349C14.9993 25.1912 15.0515 25.1565 15.109 25.133C15.1664 25.1095 15.2279 25.0976 15.29 25.098V25.098ZM23.47 25.102H25.708C25.7702 25.1016 25.8319 25.1136 25.8895 25.1372C25.947 
              25.1608 25.9993 25.1956 26.0433 25.2396C26.0873 25.2836 26.1222 25.3359 26.1458 25.3935C26.1694 25.4511 26.1814 25.5128 26.181 25.575V27.813C26.1814 27.8752 26.1694 27.9369 26.1458 27.9945C26.1222 28.052 26.0873 28.1043 
              26.0433 28.1483C25.9993 28.1923 25.947 28.2272 25.8895 28.2508C25.8319 28.2744 25.7702 28.2864 25.708 28.286H23.47C23.4078 28.2864 23.3461 28.2744 23.2885 28.2508C23.231 28.2272 23.1786 28.1923 23.1346 28.1483C23.0906 
              28.1043 23.0558 28.052 23.0322 27.9945C23.0086 27.9369 22.9966 27.8752 22.997 27.813V25.575C22.9966 25.5128 23.0086 25.4511 23.0322 25.3935C23.0558 25.3359 23.0906 25.2836 23.1346 25.2396C23.1786 25.1956 23.231 25.1608 
              23.2885 25.1372C23.3461 25.1136 23.4078 25.1016 23.47 25.102ZM27.544 25.112H29.78C30.041 25.112 30.255 25.325 30.255 25.587V27.825C30.256 28.086 30.042 28.299 29.78 28.298H27.544C27.283 28.3 27.069 28.086 27.069 
              27.825V25.587C27.069 25.326 27.282 25.112 27.544 25.112ZM31.608 25.132H33.848C33.9102 25.1316 33.9719 25.1436 34.0295 25.1672C34.087 25.1908 34.1393 25.2256 34.1833 25.2696C34.2273 25.3136 34.2622 25.366 34.2858 
              25.4235C34.3094 25.4811 34.3214 25.5428 34.321 25.605V27.843C34.3214 27.9052 34.3094 27.9669 34.2858 28.0245C34.2622 28.082 34.2273 28.1343 34.1833 28.1783C34.1393 28.2223 34.087 28.2572 34.0295 28.2808C33.9719 
              28.3044 33.9102 28.3164 33.848 28.316H31.608C31.5459 28.3161 31.4845 28.304 31.4271 28.2802C31.3698 28.2565 31.3177 28.2216 31.2739 28.1776C31.2302 28.1337 31.1955 28.0814 31.172 28.024C31.1485 27.9666 31.1366 27.9051 31.137 27.843V25.605C31.1366 25.5429 31.1485 25.4814 31.172 25.424C31.1955 25.3665 31.2302 25.3143 31.2739 25.2704C31.3177 25.2264 31.3698 25.1915 31.4271 25.1678C31.4845 25.144 31.5459 25.1319 31.608 25.132V25.132ZM35.712 25.136H37.95C38.0122 25.1356 38.0739 25.1476 38.1315 25.1712C38.189 25.1948 38.2413 25.2296 38.2853 25.2736C38.3293 25.3176 38.3642 25.37 38.3878 25.4275C38.4114 25.4851 38.4234 25.5468 38.423 25.609V27.847C38.4234 27.9092 38.4114 27.9709 38.3878 28.0285C38.3642 28.086 38.3293 28.1383 38.2853 28.1823C38.2413 28.2263 38.189 28.2612 38.1315 28.2848C38.0739 28.3084 38.0122 28.3204 37.95 28.32H35.712C35.6498 28.3204 35.5881 28.3084 35.5305 28.2848C35.473 28.2612 35.4206 28.2263 35.3766 28.1823C35.3326 28.1383 35.2978 28.086 35.2742 28.0285C35.2506 27.9709 35.2386 27.9092 35.239 27.847V25.609C35.2386 25.5468 35.2506 25.4851 35.2742 25.4275C35.2978 25.37 35.3326 25.3176 35.3766 25.2736C35.4206 25.2296 35.473 25.1948 35.5305 25.1712C35.5881 25.1476 35.6498 25.1356 35.712 25.136ZM39.849 25.136H42.038C42.312 25.136 42.532 25.356 42.532 25.63V27.823C42.532 28.097 42.312 28.317 42.038 28.317H39.849C39.575 28.317 39.355 28.097 39.355 27.823V25.63C39.355 25.356 39.575 25.136 39.849 25.136ZM2.41 29.203H6.664C6.948 29.203 7.178 29.432 7.178 29.717V31.873C7.178 32.157 6.949 32.387 6.664 32.387H2.41C2.34252 32.3873 2.27565 32.3741 2.21328 32.3484C2.15091 32.3226 2.09428 32.2847 2.04665 32.2369C1.99903 32.1891 1.96137 32.1323 1.93585 32.0699C1.91033 32.0074 1.89747 31.9405 1.898 31.873V29.717C1.89747 29.6495 1.91033 29.5826 1.93585 29.5201C1.96137 29.4577 1.99903 29.4009 2.04665 29.3531C2.09428 29.3053 2.15091 29.2674 2.21328 29.2416C2.27565 29.2159 2.34252 29.2027 2.41 29.203ZM8.535 29.203H11.545C11.829 29.203 12.059 29.432 12.059 29.717V31.873C12.059 32.157 11.83 32.387 11.545 32.387H8.535C8.251 32.387 8.021 32.158 8.021 31.873V29.717C8.021 29.433 8.25 29.203 8.535 29.203V29.203ZM13.441 29.203H36.5C36.5647 29.2027 36.6288 29.2153 36.6886 29.2399C36.7484 29.2645 36.8027 29.3008 36.8485 29.3465C36.8942 29.3922 36.9305 29.4466 36.9551 29.5064C36.9797 29.5662 36.9923 29.6303 36.992 29.695V31.894C36.9923 31.9587 36.9797 32.0228 36.9551 32.0826C36.9305 32.1424 36.8942 32.1967 36.8485 32.2425C36.8027 32.2882 36.7484 32.3245 36.6886 32.3491C36.6288 32.3737 36.5647 32.3863 36.5 32.386H13.441C13.3763 32.3863 13.3122 32.3737 13.2524 32.3491C13.1926 32.3245 13.1382 32.2882 13.0925 32.2425C13.0468 32.1967 13.0105 32.1424 12.9859 32.0826C12.9613 32.0228 12.9487 31.9587 12.949 31.894V29.695C12.9487 29.6303 12.9613 29.5662 12.9859 29.5064C13.0105 29.4466 13.0468 29.3922 13.0925 29.3465C13.1382 29.3008 13.1926 29.2645 13.2524 29.2399C13.3122 29.2153 13.3763 29.2027 13.441 29.203V29.203ZM38.386 29.203H41.398C41.4655 29.2027 41.5323 29.2159 41.5947 29.2416C41.6571 29.2674 41.7137 29.3053 41.7613 29.3531C41.809 29.4009 41.8466 29.4577 41.8721 29.5201C41.8977 29.5826 41.9105 29.6495 41.91 29.717V31.873C41.9105 31.9405 41.8977 32.0074 41.8721 32.0699C41.8466 32.1323 41.809 32.1891 41.7613 32.2369C41.7137 32.2847 41.6571 32.3226 41.5947 32.3484C41.5323 32.3741 41.4655 32.3873 41.398 32.387H38.386C38.102 32.387 37.87 32.158 37.87 31.873V29.717C37.87 29.433 38.101 29.203 38.386 29.203V29.203ZM43.341 29.203H47.595C47.6625 29.2027 47.7293 29.2159 47.7917 29.2416C47.8541 29.2674 47.9107 29.3053 47.9583 29.3531C48.006 29.4009 48.0436 29.4577 48.0691 29.5201C48.0947 29.5826 48.1075 29.6495 48.107 29.717V31.873C48.1075 31.9405 48.0947 32.0074 48.0691 32.0699C48.0436 32.1323 48.006 32.1891 47.9583 32.2369C47.9107 32.2847 47.8541 32.3226 47.7917 32.3484C47.7293 32.3741 47.6625 32.3873 47.595 32.387H43.341C43.057 32.387 42.825 32.158 42.825 31.873V29.717C42.825 29.433 43.056 29.203 43.341 29.203V29.203Z"/>
            `;
          if (variables.state !== 'off' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50">
              <g id="keys">
                <path id="keys-dark" fill="#1A1A1A" d="M38.767 20.078C38.517 19.94 38.516 19.933 38.515 18.517C38.514 17.078 38.515 17.071 38.791 16.928C38.986 16.827 47.787 16.824 48.028 16.925C48.315 17.045 48.329 17.12 48.329 18.544V19.818L48.172 19.975L48.015 20.132L43.437 20.131L38.767 20.079V20.078ZM45.464 28.551L43.651 28.463C43.464 28.354 43.419 28.148 43.419 27.406L43.389 25.639L43.359 24.554L43.213 24.404L43.067 24.254H42.521C41.566 24.254 41.575 24.27 41.575 22.606C41.575 21.451 41.581 21.359 41.665 21.218C41.714 21.135 41.807 21.047 41.87 21.022C42.026 20.961 47.731 20.961 47.886 21.022C47.949 21.047 48.042 21.135 48.091 21.218C48.179 21.366 48.181 21.45 48.178 24.716C48.176 28.29 48.175 28.296 47.953 28.466C47.804 28.58 47.613 28.586 45.462 28.552L45.464 28.551ZM42.945 32.406C42.688 32.265 42.687 32.258 42.686 30.804C42.685 29.632 42.695 29.44 42.762 29.344C42.928 29.107 42.984 29.102 45.479 29.102L47.966 29.179C48.263 29.32 48.273 29.377 48.257 30.858L48.243 32.185L48.088 32.323L47.933 32.461L45.485 32.46L42.943 32.407L42.945 32.406ZM37.92 32.384C37.847 32.324 37.765 32.2 37.739 32.107C37.713 32.014 37.692 31.412 37.692 30.768C37.692 29.461 37.715 29.336 37.99 29.167C38.144 29.072 38.211 29.069 39.945 29.082L41.74 29.095L41.898 29.253L42.056 29.411L42.07 30.72C42.085 32.12 42.072 32.225 41.85 32.399C41.735 32.489 41.646 32.494 39.892 32.494C38.06 32.494 38.054 32.493 37.921 32.386L37.92 32.384ZM12.85 32.259C12.676 32.085 12.66 31.932 12.677 30.638C12.691 29.611 12.697 29.537 12.786 29.417C12.838 29.347 12.93 29.264 12.99 29.233C13.076 29.189 15.615 29.179 25.026 29.188L36.953 29.199L37.101 29.347L37.249 29.495L37.264 30.614C37.281 31.934 37.265 32.085 37.091 32.26L36.963 32.388H24.97H12.978L12.85 32.259ZM8.07 32.333L7.91501 32.194L7.90001 30.869C7.88301 29.389 7.897 29.311 8.202 29.166C8.421 29.062 11.614 29.055 11.86 29.158C12.171 29.288 12.174 29.302 12.174 30.766C12.174 31.613 12.156 32.126 12.122 32.199C12.001 32.466 11.959 32.471 10.014 32.471H8.22501L8.07 32.333ZM1.92301 32.364C1.85101 32.305 1.77001 32.182 1.74501 32.091C1.67701 31.849 1.69001 29.68 1.76001 29.475C1.79201 29.381 1.88601 29.263 1.97901 29.201L2.14101 29.092H4.51801C7.15801 29.092 7.14001 29.09 7.28701 29.4C7.39501 29.628 7.39801 31.977 7.29101 32.185C7.13701 32.483 7.24801 32.471 4.53101 32.471H2.05501L1.92301 32.364ZM1.93701 28.237C1.71601 28.115 1.70601 28.045 1.70401 26.66L1.70201 25.364L1.83601 25.214L1.97001 25.064L5.74001 25.052C9.927 25.038 9.72301 25.024 9.85601 25.341C9.94901 25.565 9.95001 27.775 9.85701 27.998C9.72201 28.321 9.99201 28.301 5.81301 28.299C2.77501 28.298 2.02601 28.286 1.93701 28.237V28.237ZM2.00001 24.164C1.94601 24.142 1.85701 24.068 1.80301 23.998C1.70701 23.876 1.70401 23.83 1.70401 22.528V21.184L1.84001 21.048L1.97601 20.912H4.89901H7.82201L7.94401 21.034L8.06601 21.156V22.523C8.06601 23.413 8.04901 23.922 8.01601 23.983C7.89801 24.204 7.83701 24.208 4.87501 24.205L2.00101 24.162L2.00001 24.164ZM2.10201 20.021C2.04901 20 1.96201 19.927 1.90901 19.859C1.81501 19.739 1.81201 19.695 1.81201 18.419V17.103L2.07801 16.837L3.41201 16.838C4.60701 16.839 4.75601 16.847 4.84301 16.918C5.03101 17.071 5.04201 17.148 5.04201 18.428C5.04201 19.458 5.03001 19.684 4.97101 19.799C4.84401 20.045 4.71801 20.066 3.39501 20.063C2.73801 20.061 2.15701 20.043 2.10401 20.021H2.10201Z"/>
                <path id="keys-light" fill="#333333" d="M35.202 28.349L35.055 28.202V26.745V25.288L35.201 25.124L35.347 24.96L36.768 24.946C38.119 24.933 38.197 24.937 38.353 25.034C38.443 25.09 38.539 25.193 38.566 25.264C38.593 25.335 38.615 25.989 38.615 26.748C38.615 28.219 38.598 28.318 38.329 28.441C38.252 28.476 37.701 28.495 36.779 28.495H35.348L35.202 28.349ZM39.337 28.326L39.167 28.156V26.77C39.167 25.247 39.182 25.161 39.466 25.014C39.675 24.906 42.142 24.902 42.399 25.009C42.719 25.143 42.733 25.222 42.716 26.799L42.701 28.205L42.537 28.351L42.373 28.497H40.94H39.507L39.337 28.326ZM37.506 24.317C37.264 24.169 37.236 23.987 37.235 22.566C37.235 21.199 37.261 21.034 37.505 20.873C37.616 20.801 37.816 20.792 39.12 20.805L40.609 20.82L40.732 20.963L40.855 21.106V22.586L40.802 24.164C40.678 24.396 40.537 24.416 39.059 24.416C37.77 24.416 37.654 24.408 37.504 24.317H37.506ZM33.495 24.262C33.4015 24.1999 33.3285 24.1115 33.285 24.008C33.199 23.76 33.209 21.393 33.298 21.181C33.433 20.857 33.441 20.856 35.019 20.856H36.441L36.585 21L36.729 21.144V22.581L36.678 24.112C36.558 24.336 36.422 24.356 34.994 24.356C33.758 24.356 33.636 24.348 33.494 24.262H33.495ZM34.63 20.125C34.399 19.943 34.394 19.909 34.394 18.531C34.394 17.098 34.408 17.018 34.682 16.877C34.804 16.814 35.025 16.805 36.161 16.817L37.496 16.831L37.635 16.986L37.774 17.141V18.524V19.907L37.635 20.046L37.496 20.185L36.1 20.183L34.63 20.124V20.125ZM30.515 20.221C30.242 20.068 30.241 20.064 30.24 18.506L30.291 16.964C30.413 16.735 30.549 16.716 32.042 16.716H33.448L33.612 16.862L33.776 17.008V18.491V19.974L33.637 20.113L33.498 20.252L32.057 20.264C31.062 20.272 30.585 20.259 30.516 20.22L30.515 20.221ZM29.508 24.283C29.455 24.261 29.367 24.194 29.314 24.135C29.223 24.033 29.216 23.948 29.203 22.624L29.189 21.221L29.356 21.054L29.523 20.887L30.921 20.888C32.172 20.889 32.33 20.898 32.422 20.973C32.623 21.136 32.634 21.216 32.634 22.628V23.987L32.493 24.145L32.352 24.303L30.979 24.313C30.224 24.319 29.562 24.305 29.509 24.282L29.508 24.283ZM31.226 28.398C30.989 28.266 30.978 28.192 30.976 26.704L30.974 25.311L31.118 25.15L31.262 24.989H32.725H34.188L34.332 25.15L34.476 25.311V26.689C34.476 28.175 34.462 28.272 34.222 28.396C34.031 28.495 31.403 28.496 31.226 28.398V28.398ZM27.274 28.362C27.219 28.339 27.128 28.262 27.072 28.191C26.974 28.066 26.97 28.018 26.97 26.732C26.97 25.352 26.98 25.273 27.178 25.112C27.269 25.038 27.423 25.03 28.651 25.029L30.114 25.077C30.331 25.193 30.349 25.322 30.349 26.738V28.072L30.21 28.227L30.071 28.382L28.722 28.392C27.98 28.398 27.328 28.383 27.273 28.36L27.274 28.362ZM23.252 28.356C23.1552 28.3227 23.069 28.2644 23.002 28.187C22.908 28.067 22.904 28.004 22.904 26.695C22.904 25.386 22.908 25.322 23.001 25.204C23.055 25.136 23.178 25.058 23.275 25.031C23.509 24.966 25.682 24.967 25.917 25.032C26.039 25.066 26.128 25.132 26.19 25.234C26.276 25.375 26.283 25.482 26.283 26.695C26.283 27.908 26.276 28.015 26.19 28.156C26.128 28.258 26.038 28.324 25.917 28.358C25.694 28.42 23.467 28.418 23.252 28.356V28.356ZM25.48 24.296C25.421 24.284 25.317 24.208 25.25 24.128L25.127 23.982V22.582V21.182L25.268 21.024L25.409 20.866H26.786C28.304 20.866 28.356 20.875 28.49 21.159C28.599 21.388 28.601 23.779 28.492 24.008C28.353 24.3 28.33 24.305 26.894 24.312C26.175 24.316 25.538 24.309 25.479 24.297L25.48 24.296ZM26.396 20.256C26.101 20.11 26.091 20.051 26.091 18.433V16.959L26.26 16.808L26.429 16.657H27.936H29.443L29.595 16.809L29.747 16.961V18.485C29.747 19.96 29.744 20.012 29.638 20.125C29.578 20.189 29.472 20.264 29.401 20.29C29.33 20.316 28.662 20.338 27.915 20.337C26.801 20.336 26.528 20.322 26.396 20.256V20.256ZM22.581 20.156C22.167 20.02 22.153 19.965 22.153 18.465C22.153 17.042 22.175 16.931 22.486 16.826C22.74 16.739 25.007 16.743 25.216 16.83C25.528 16.96 25.53 16.969 25.53 18.48C25.53 19.78 25.526 19.848 25.433 19.966C25.38 20.034 25.256 20.112 25.16 20.139C24.985 20.187 22.723 20.204 22.582 20.157L22.581 20.156ZM18.34 20.252C18.2367 20.2166 18.1446 20.1545 18.073 20.072C17.972 19.944 17.968 19.876 17.968 18.476C17.968 17.076 17.973 17.007 18.072 16.881C18.129 16.808 18.261 16.725 18.365 16.696C18.615 16.627 20.94 16.628 21.191 16.697C21.321 16.733 21.417 16.804 21.484 16.913C21.576 17.063 21.583 17.178 21.583 18.476C21.583 19.774 21.576 19.888 21.484 20.039C21.417 20.148 21.321 20.219 21.191 20.255C20.953 20.321 18.57 20.32 18.34 20.253V20.252ZM21.168 24.318C20.946 24.189 20.926 24.043 20.927 22.578C20.928 21.042 20.937 20.99 21.233 20.842C21.388 20.764 21.576 20.753 22.726 20.753C24.137 20.753 24.299 20.777 24.464 21.014C24.536 21.117 24.547 21.322 24.547 22.552C24.547 24.058 24.527 24.197 24.295 24.322C24.163 24.393 21.29 24.39 21.169 24.319L21.168 24.318ZM18.974 28.307C18.773 28.144 18.762 28.062 18.762 26.698C18.762 25.251 18.776 25.169 19.055 25.024C19.179 24.96 19.404 24.95 20.56 24.963L21.919 24.977L22.06 25.135L22.201 25.293V26.7V28.108L22.059 28.25L21.917 28.392L20.496 28.391C19.223 28.39 19.064 28.381 18.972 28.306L18.974 28.307ZM14.838 28.251L14.696 28.109V26.7V25.292L14.837 25.134L14.978 24.976L16.278 24.96C17.738 24.942 17.891 24.964 18.04 25.208C18.127 25.351 18.134 25.46 18.135 26.686C18.135 28.06 18.124 28.142 17.924 28.305C17.831 28.38 17.673 28.389 16.4 28.39L14.979 28.391L14.838 28.251ZM17.008 24.224L16.859 24.075V22.589L16.911 21.005C17.035 20.774 17.177 20.753 18.643 20.753C20.187 20.753 20.274 20.769 20.406 21.086C20.51 21.334 20.511 23.789 20.407 24.037C20.267 24.372 20.259 24.374 18.627 24.374H17.156L17.008 24.224ZM14.167 20.122C13.938 19.962 13.915 19.805 13.915 18.442C13.915 17.33 13.926 17.149 14.001 16.999C14.144 16.713 14.195 16.704 15.679 16.703C17.107 16.702 17.244 16.722 17.363 16.946C17.394 17.005 17.414 17.586 17.414 18.477V19.914L17.27 20.058L17.126 20.202H15.704C14.469 20.202 14.266 20.191 14.167 20.122V20.122ZM12.979 24.145L12.811 23.977V22.589C12.811 21.083 12.826 20.987 13.081 20.871C13.171 20.83 13.625 20.812 14.587 20.812H15.964L16.125 20.956L16.286 21.1V22.562V24.024L16.125 24.168L15.964 24.312H14.555H13.146L12.979 24.145ZM10.139 20.184C10.081 20.16 9.985 20.08 9.926 20.005C9.822 19.873 9.81901 19.823 9.81901 18.469C9.81901 16.983 9.83801 16.847 10.067 16.725C10.127 16.693 10.711 16.674 11.608 16.674C13.172 16.675 13.179 16.676 13.323 16.958C13.394 17.097 13.4 19.719 13.33 19.904C13.2813 19.9984 13.2076 20.0776 13.117 20.133C12.963 20.227 12.867 20.233 11.599 20.23L10.139 20.184V20.184ZM10.741 28.279L10.58 28.135L10.567 26.738C10.554 25.41 10.559 25.333 10.653 25.18C10.708 25.091 10.81 24.997 10.879 24.97C10.948 24.943 11.595 24.922 12.347 24.922C13.53 24.922 13.703 24.932 13.81 25.006C14.054 25.174 14.052 25.159 14.054 26.688L14.056 28.134L13.912 28.278L13.768 28.422H12.335H10.902L10.741 28.279ZM6.07401 20.104C5.78501 19.976 5.76801 19.884 5.76801 18.459L5.81301 17.056C5.83801 16.99 5.90801 16.891 5.96801 16.835C6.07401 16.737 6.12201 16.733 7.50101 16.733H8.92501L9.06701 16.875L9.209 17.017V18.425V19.833L9.06801 19.991L8.92701 20.149L7.57801 20.16C6.50401 20.169 6.19801 20.157 6.07501 20.103L6.07401 20.104ZM8.98701 24.263C8.70101 24.122 8.69201 24.065 8.69201 22.5V21.075L8.85601 20.929L9.02001 20.783H10.472H11.924L12.088 20.929L12.252 21.075V22.5C12.252 24.072 12.243 24.125 11.949 24.264C11.709 24.378 9.21901 24.376 8.98801 24.262L8.98701 24.263Z"/>
              </g>
              ${paths}
              <path id="top" fill="#1A1A1A" d="M1.859 14.303C1.70845 14.3023 1.55926 14.3315 1.42005 14.3888C1.28083 14.4461 1.15434 14.5304 1.04789 14.6369C0.941432 14.7433 0.857118 14.8698 0.79981 15.009C0.742503 15.1483 0.713339 15.2974 0.714 15.448V15.925C0.721 15.507 0.774 15.458 1.144 15.448H48.96C49.2 15.466 49.253 15.557 49.261 15.895V15.448H49.265C49.2657 15.2974 49.2365 15.1483 49.1792 15.009C49.1219 14.8698 49.0376 14.7433 48.9311 14.6369C48.8247 14.5304 48.6982 14.4461 48.559 14.3888C48.4197 14.3315 48.2705 14.3023 48.12 14.303H1.859Z"/>
            </svg>
          `;
          }
          return variables.state !== 'off' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50">
              <g id="keys">
                <path id="keys-dark" fill="#1A1A1A" d="M38.767 20.078C38.517 19.94 38.516 19.933 38.515 18.517C38.514 17.078 38.515 17.071 38.791 16.928C38.986 16.827 47.787 16.824 48.028 16.925C48.315 17.045 48.329 17.12 48.329 18.544V19.818L48.172 19.975L48.015 20.132L43.437 20.131L38.767 20.079V20.078ZM45.464 28.551L43.651 28.463C43.464 28.354 43.419 28.148 43.419 27.406L43.389 25.639L43.359 24.554L43.213 24.404L43.067 24.254H42.521C41.566 24.254 41.575 24.27 41.575 22.606C41.575 21.451 41.581 21.359 41.665 21.218C41.714 21.135 41.807 21.047 41.87 21.022C42.026 20.961 47.731 20.961 47.886 21.022C47.949 21.047 48.042 21.135 48.091 21.218C48.179 21.366 48.181 21.45 48.178 24.716C48.176 28.29 48.175 28.296 47.953 28.466C47.804 28.58 47.613 28.586 45.462 28.552L45.464 28.551ZM42.945 32.406C42.688 32.265 42.687 32.258 42.686 30.804C42.685 29.632 42.695 29.44 42.762 29.344C42.928 29.107 42.984 29.102 45.479 29.102L47.966 29.179C48.263 29.32 48.273 29.377 48.257 30.858L48.243 32.185L48.088 32.323L47.933 32.461L45.485 32.46L42.943 32.407L42.945 32.406ZM37.92 32.384C37.847 32.324 37.765 32.2 37.739 32.107C37.713 32.014 37.692 31.412 37.692 30.768C37.692 29.461 37.715 29.336 37.99 29.167C38.144 29.072 38.211 29.069 39.945 29.082L41.74 29.095L41.898 29.253L42.056 29.411L42.07 30.72C42.085 32.12 42.072 32.225 41.85 32.399C41.735 32.489 41.646 32.494 39.892 32.494C38.06 32.494 38.054 32.493 37.921 32.386L37.92 32.384ZM12.85 32.259C12.676 32.085 12.66 31.932 12.677 30.638C12.691 29.611 12.697 29.537 12.786 29.417C12.838 29.347 12.93 29.264 12.99 29.233C13.076 29.189 15.615 29.179 25.026 29.188L36.953 29.199L37.101 29.347L37.249 29.495L37.264 30.614C37.281 31.934 37.265 32.085 37.091 32.26L36.963 32.388H24.97H12.978L12.85 32.259ZM8.07 32.333L7.91501 32.194L7.90001 30.869C7.88301 29.389 7.897 29.311 8.202 29.166C8.421 29.062 11.614 29.055 11.86 29.158C12.171 29.288 12.174 29.302 12.174 30.766C12.174 31.613 12.156 32.126 12.122 32.199C12.001 32.466 11.959 32.471 10.014 32.471H8.22501L8.07 32.333ZM1.92301 32.364C1.85101 32.305 1.77001 32.182 1.74501 32.091C1.67701 31.849 1.69001 29.68 1.76001 29.475C1.79201 29.381 1.88601 29.263 1.97901 29.201L2.14101 29.092H4.51801C7.15801 29.092 7.14001 29.09 7.28701 29.4C7.39501 29.628 7.39801 31.977 7.29101 32.185C7.13701 32.483 7.24801 32.471 4.53101 32.471H2.05501L1.92301 32.364ZM1.93701 28.237C1.71601 28.115 1.70601 28.045 1.70401 26.66L1.70201 25.364L1.83601 25.214L1.97001 25.064L5.74001 25.052C9.927 25.038 9.72301 25.024 9.85601 25.341C9.94901 25.565 9.95001 27.775 9.85701 27.998C9.72201 28.321 9.99201 28.301 5.81301 28.299C2.77501 28.298 2.02601 28.286 1.93701 28.237V28.237ZM2.00001 24.164C1.94601 24.142 1.85701 24.068 1.80301 23.998C1.70701 23.876 1.70401 23.83 1.70401 22.528V21.184L1.84001 21.048L1.97601 20.912H4.89901H7.82201L7.94401 21.034L8.06601 21.156V22.523C8.06601 23.413 8.04901 23.922 8.01601 23.983C7.89801 24.204 7.83701 24.208 4.87501 24.205L2.00101 24.162L2.00001 24.164ZM2.10201 20.021C2.04901 20 1.96201 19.927 1.90901 19.859C1.81501 19.739 1.81201 19.695 1.81201 18.419V17.103L2.07801 16.837L3.41201 16.838C4.60701 16.839 4.75601 16.847 4.84301 16.918C5.03101 17.071 5.04201 17.148 5.04201 18.428C5.04201 19.458 5.03001 19.684 4.97101 19.799C4.84401 20.045 4.71801 20.066 3.39501 20.063C2.73801 20.061 2.15701 20.043 2.10401 20.021H2.10201Z"/>
                <path id="keys-light" fill="#333333" d="M35.202 28.349L35.055 28.202V26.745V25.288L35.201 25.124L35.347 24.96L36.768 24.946C38.119 24.933 38.197 24.937 38.353 25.034C38.443 25.09 38.539 25.193 38.566 25.264C38.593 25.335 38.615 25.989 38.615 26.748C38.615 28.219 38.598 28.318 38.329 28.441C38.252 28.476 37.701 28.495 36.779 28.495H35.348L35.202 28.349ZM39.337 28.326L39.167 28.156V26.77C39.167 25.247 39.182 25.161 39.466 25.014C39.675 24.906 42.142 24.902 42.399 25.009C42.719 25.143 42.733 25.222 42.716 26.799L42.701 28.205L42.537 28.351L42.373 28.497H40.94H39.507L39.337 28.326ZM37.506 24.317C37.264 24.169 37.236 23.987 37.235 22.566C37.235 21.199 37.261 21.034 37.505 20.873C37.616 20.801 37.816 20.792 39.12 20.805L40.609 20.82L40.732 20.963L40.855 21.106V22.586L40.802 24.164C40.678 24.396 40.537 24.416 39.059 24.416C37.77 24.416 37.654 24.408 37.504 24.317H37.506ZM33.495 24.262C33.4015 24.1999 33.3285 24.1115 33.285 24.008C33.199 23.76 33.209 21.393 33.298 21.181C33.433 20.857 33.441 20.856 35.019 20.856H36.441L36.585 21L36.729 21.144V22.581L36.678 24.112C36.558 24.336 36.422 24.356 34.994 24.356C33.758 24.356 33.636 24.348 33.494 24.262H33.495ZM34.63 20.125C34.399 19.943 34.394 19.909 34.394 18.531C34.394 17.098 34.408 17.018 34.682 16.877C34.804 16.814 35.025 16.805 36.161 16.817L37.496 16.831L37.635 16.986L37.774 17.141V18.524V19.907L37.635 20.046L37.496 20.185L36.1 20.183L34.63 20.124V20.125ZM30.515 20.221C30.242 20.068 30.241 20.064 30.24 18.506L30.291 16.964C30.413 16.735 30.549 16.716 32.042 16.716H33.448L33.612 16.862L33.776 17.008V18.491V19.974L33.637 20.113L33.498 20.252L32.057 20.264C31.062 20.272 30.585 20.259 30.516 20.22L30.515 20.221ZM29.508 24.283C29.455 24.261 29.367 24.194 29.314 24.135C29.223 24.033 29.216 23.948 29.203 22.624L29.189 21.221L29.356 21.054L29.523 20.887L30.921 20.888C32.172 20.889 32.33 20.898 32.422 20.973C32.623 21.136 32.634 21.216 32.634 22.628V23.987L32.493 24.145L32.352 24.303L30.979 24.313C30.224 24.319 29.562 24.305 29.509 24.282L29.508 24.283ZM31.226 28.398C30.989 28.266 30.978 28.192 30.976 26.704L30.974 25.311L31.118 25.15L31.262 24.989H32.725H34.188L34.332 25.15L34.476 25.311V26.689C34.476 28.175 34.462 28.272 34.222 28.396C34.031 28.495 31.403 28.496 31.226 28.398V28.398ZM27.274 28.362C27.219 28.339 27.128 28.262 27.072 28.191C26.974 28.066 26.97 28.018 26.97 26.732C26.97 25.352 26.98 25.273 27.178 25.112C27.269 25.038 27.423 25.03 28.651 25.029L30.114 25.077C30.331 25.193 30.349 25.322 30.349 26.738V28.072L30.21 28.227L30.071 28.382L28.722 28.392C27.98 28.398 27.328 28.383 27.273 28.36L27.274 28.362ZM23.252 28.356C23.1552 28.3227 23.069 28.2644 23.002 28.187C22.908 28.067 22.904 28.004 22.904 26.695C22.904 25.386 22.908 25.322 23.001 25.204C23.055 25.136 23.178 25.058 23.275 25.031C23.509 24.966 25.682 24.967 25.917 25.032C26.039 25.066 26.128 25.132 26.19 25.234C26.276 25.375 26.283 25.482 26.283 26.695C26.283 27.908 26.276 28.015 26.19 28.156C26.128 28.258 26.038 28.324 25.917 28.358C25.694 28.42 23.467 28.418 23.252 28.356V28.356ZM25.48 24.296C25.421 24.284 25.317 24.208 25.25 24.128L25.127 23.982V22.582V21.182L25.268 21.024L25.409 20.866H26.786C28.304 20.866 28.356 20.875 28.49 21.159C28.599 21.388 28.601 23.779 28.492 24.008C28.353 24.3 28.33 24.305 26.894 24.312C26.175 24.316 25.538 24.309 25.479 24.297L25.48 24.296ZM26.396 20.256C26.101 20.11 26.091 20.051 26.091 18.433V16.959L26.26 16.808L26.429 16.657H27.936H29.443L29.595 16.809L29.747 16.961V18.485C29.747 19.96 29.744 20.012 29.638 20.125C29.578 20.189 29.472 20.264 29.401 20.29C29.33 20.316 28.662 20.338 27.915 20.337C26.801 20.336 26.528 20.322 26.396 20.256V20.256ZM22.581 20.156C22.167 20.02 22.153 19.965 22.153 18.465C22.153 17.042 22.175 16.931 22.486 16.826C22.74 16.739 25.007 16.743 25.216 16.83C25.528 16.96 25.53 16.969 25.53 18.48C25.53 19.78 25.526 19.848 25.433 19.966C25.38 20.034 25.256 20.112 25.16 20.139C24.985 20.187 22.723 20.204 22.582 20.157L22.581 20.156ZM18.34 20.252C18.2367 20.2166 18.1446 20.1545 18.073 20.072C17.972 19.944 17.968 19.876 17.968 18.476C17.968 17.076 17.973 17.007 18.072 16.881C18.129 16.808 18.261 16.725 18.365 16.696C18.615 16.627 20.94 16.628 21.191 16.697C21.321 16.733 21.417 16.804 21.484 16.913C21.576 17.063 21.583 17.178 21.583 18.476C21.583 19.774 21.576 19.888 21.484 20.039C21.417 20.148 21.321 20.219 21.191 20.255C20.953 20.321 18.57 20.32 18.34 20.253V20.252ZM21.168 24.318C20.946 24.189 20.926 24.043 20.927 22.578C20.928 21.042 20.937 20.99 21.233 20.842C21.388 20.764 21.576 20.753 22.726 20.753C24.137 20.753 24.299 20.777 24.464 21.014C24.536 21.117 24.547 21.322 24.547 22.552C24.547 24.058 24.527 24.197 24.295 24.322C24.163 24.393 21.29 24.39 21.169 24.319L21.168 24.318ZM18.974 28.307C18.773 28.144 18.762 28.062 18.762 26.698C18.762 25.251 18.776 25.169 19.055 25.024C19.179 24.96 19.404 24.95 20.56 24.963L21.919 24.977L22.06 25.135L22.201 25.293V26.7V28.108L22.059 28.25L21.917 28.392L20.496 28.391C19.223 28.39 19.064 28.381 18.972 28.306L18.974 28.307ZM14.838 28.251L14.696 28.109V26.7V25.292L14.837 25.134L14.978 24.976L16.278 24.96C17.738 24.942 17.891 24.964 18.04 25.208C18.127 25.351 18.134 25.46 18.135 26.686C18.135 28.06 18.124 28.142 17.924 28.305C17.831 28.38 17.673 28.389 16.4 28.39L14.979 28.391L14.838 28.251ZM17.008 24.224L16.859 24.075V22.589L16.911 21.005C17.035 20.774 17.177 20.753 18.643 20.753C20.187 20.753 20.274 20.769 20.406 21.086C20.51 21.334 20.511 23.789 20.407 24.037C20.267 24.372 20.259 24.374 18.627 24.374H17.156L17.008 24.224ZM14.167 20.122C13.938 19.962 13.915 19.805 13.915 18.442C13.915 17.33 13.926 17.149 14.001 16.999C14.144 16.713 14.195 16.704 15.679 16.703C17.107 16.702 17.244 16.722 17.363 16.946C17.394 17.005 17.414 17.586 17.414 18.477V19.914L17.27 20.058L17.126 20.202H15.704C14.469 20.202 14.266 20.191 14.167 20.122V20.122ZM12.979 24.145L12.811 23.977V22.589C12.811 21.083 12.826 20.987 13.081 20.871C13.171 20.83 13.625 20.812 14.587 20.812H15.964L16.125 20.956L16.286 21.1V22.562V24.024L16.125 24.168L15.964 24.312H14.555H13.146L12.979 24.145ZM10.139 20.184C10.081 20.16 9.985 20.08 9.926 20.005C9.822 19.873 9.81901 19.823 9.81901 18.469C9.81901 16.983 9.83801 16.847 10.067 16.725C10.127 16.693 10.711 16.674 11.608 16.674C13.172 16.675 13.179 16.676 13.323 16.958C13.394 17.097 13.4 19.719 13.33 19.904C13.2813 19.9984 13.2076 20.0776 13.117 20.133C12.963 20.227 12.867 20.233 11.599 20.23L10.139 20.184V20.184ZM10.741 28.279L10.58 28.135L10.567 26.738C10.554 25.41 10.559 25.333 10.653 25.18C10.708 25.091 10.81 24.997 10.879 24.97C10.948 24.943 11.595 24.922 12.347 24.922C13.53 24.922 13.703 24.932 13.81 25.006C14.054 25.174 14.052 25.159 14.054 26.688L14.056 28.134L13.912 28.278L13.768 28.422H12.335H10.902L10.741 28.279ZM6.07401 20.104C5.78501 19.976 5.76801 19.884 5.76801 18.459L5.81301 17.056C5.83801 16.99 5.90801 16.891 5.96801 16.835C6.07401 16.737 6.12201 16.733 7.50101 16.733H8.92501L9.06701 16.875L9.209 17.017V18.425V19.833L9.06801 19.991L8.92701 20.149L7.57801 20.16C6.50401 20.169 6.19801 20.157 6.07501 20.103L6.07401 20.104ZM8.98701 24.263C8.70101 24.122 8.69201 24.065 8.69201 22.5V21.075L8.85601 20.929L9.02001 20.783H10.472H11.924L12.088 20.929L12.252 21.075V22.5C12.252 24.072 12.243 24.125 11.949 24.264C11.709 24.378 9.21901 24.376 8.98801 24.262L8.98701 24.263Z"/>
              </g>
              ${paths}
              <path id="top" fill="#1A1A1A" d="M1.859 14.303C1.70845 14.3023 1.55926 14.3315 1.42005 14.3888C1.28083 14.4461 1.15434 14.5304 1.04789 14.6369C0.941432 14.7433 0.857118 14.8698 0.79981 15.009C0.742503 15.1483 0.713339 15.2974 0.714 15.448V15.925C0.721 15.507 0.774 15.458 1.144 15.448H48.96C49.2 15.466 49.253 15.557 49.261 15.895V15.448H49.265C49.2657 15.2974 49.2365 15.1483 49.1792 15.009C49.1219 14.8698 49.0376 14.7433 48.9311 14.6369C48.8247 14.5304 48.6982 14.4461 48.559 14.3888C48.4197 14.3315 48.2705 14.3023 48.12 14.303H1.859Z"/>
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              ${paths}
              <path id="top" fill="#9da0a2" d="M1.859 14.303C1.70845 14.3023 1.55926 14.3315 1.42005 14.3888C1.28083 14.4461 1.15434 14.5304 1.04789 14.6369C0.941432 14.7433 0.857118 14.8698 0.79981 15.009C0.742503 15.1483 0.713339 15.2974 0.714 15.448V15.925C0.721 15.507 0.774 15.458 1.144 15.448H48.96C49.2 15.466 49.253 15.557 49.261 15.895V15.448H49.265C49.2657 15.2974 49.2365 15.1483 49.1792 15.009C49.1219 14.8698 49.0376 14.7433 48.9311 14.6369C48.8247 14.5304 48.6982 14.4461 48.559 14.3888C48.4197 14.3315 48.2705 14.3023 48.12 14.303H1.859Z"/>
            </svg>
          `;
        ]]]


  icon_play_pause:
    styles:
      custom_fields:
        play_pause:
          - top: -10%
          - right: 0
          - bottom: 0
          - left: 0
          - margin: auto
          - width: 25%
          - height: 25%
          - position: absolute
          - fill: '#dedede'
    custom_fields:
      play_pause: >
        [[[
          let style = `
            <style>
              .scale-up {
                animation: scale-up 1s forwards;
                cubic-bezier(.05, .5, .3, 1);
                transform-origin: center center;
              }
              @keyframes scale-up {
                0% {
                  opacity: 0;
                  transform: scale(0);
                }
                20% {
                  transform: scale(1);
                }
                30% {
                  opacity: 1;
                }
                80% {
                  opacity: 1;
                }
                100% {
                  opacity: 0;
                }
              }
            </style>
          `;
          if (variables.state === 'paused' && variables.timeout < 2000) {
              return `
                <svg viewBox="0 0 166 166">${style}
                  <path class="scale-up" d="M0 0h59.9v166H0zm106.1 0H166v166h-59.9z"/>
                </svg>
              `;
          }
          if (variables.state === 'playing' && variables.timeout < 2000) {
              return `
                <svg viewBox="0 0 166 166">${style}
                  <path class="scale-up" d="M0 0l166 83L0 166z"/>
                </svg>
              `;
          }
        ]]]


  icon_eth:
    styles:
      custom_fields:
        icon:
          - width: 85%
          - margin-top: -4%
          #- margin-left: -1%
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes on {
                10% {
                    transform: scale(0.9);
                }
                100% {
                    transform: scale(1);
                }
              }
              .on{
                  animation: on 1s;
                  transform-origin: center;
              }
            </style>
          `,
          paths = `
            <g id="eth_grouped">
              <g id="eth">
                <g id="plug">
                  <path id="frame" fill="#9da0a2" d="M3.58984 6.00391C2.8503 6.00391 2.25 6.60422 2.25 7.34375V42.3613C2.25 43.1009 2.8503 43.7012 3.58984 43.7012H46.4102C47.1497 43.7012 47.75 43.1009 47.75 42.3613V7.34375C47.75 6.60422 47.1497 6.00391 46.4102 6.00391H3.58984ZM6.50586 12.3164H43.7227V20.2754L43.0977 20.5664V26.3984L43.5039 26.4512V34.1074L35.9512 34.4512V37.9609L32.1816 38.0332V40.0957H17.7129V38.0332L13.7773 37.9609V34.4512L6.56836 34.1074V26.4512L7.21484 26.3984V20.5664L6.50586 20.2754V12.3164Z"/>
                </g>
              </g>
            </g>
            <defs>
            <filter id="filter0_f_1_2" x="2.67393" y="36.3776" width="10.2165" height="7.21689" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
              <feFlood flood-opacity="0" result="BackgroundImageFix"/>
              <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
              <feGaussianBlur stdDeviation="0.799847" result="effect1_foregroundBlur_1_2"/>
            </filter>
            <filter id="filter1_f_1_2" x="36.8916" y="36.3769" width="10.211" height="7.21141" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
              <feFlood flood-opacity="0" result="BackgroundImageFix"/>
              <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
              <feGaussianBlur stdDeviation="0.798476" result="effect1_foregroundBlur_1_2"/>
            </filter>
            </defs>
          `;
          return variables.state === 'healthy' ? `
            <svg viewBox="0 0 50 50">
              ${paths}
              <g id="left-led">
                <g id="left-glow" opacity="0.2" filter="url(#filter0_f_1_2)">
                  <path id="path3" opacity="0.2" d="M10.6745 37.9773H4.88991C4.54954 37.9773 4.27362 38.2771 4.27362 38.6469V41.3252C4.27362 41.695 4.54954 41.9948 4.88991 41.9948H10.6745C11.0148 41.9948 11.2907 41.695 11.2907 41.3252V38.6469C11.2907 38.2771 11.0148 37.9773 10.6745 37.9773Z" fill="#FFFF00"/>
                </g>
                <path id="left-led-light" d="M10.0712 38.5397H5.46896C5.19816 38.5397 4.97864 38.7593 4.97864 39.0301V40.9914C4.97864 41.2622 5.19816 41.4817 5.46896 41.4817H10.0712C10.342 41.4817 10.5615 41.2622 10.5615 40.9914V39.0301C10.5615 38.7593 10.342 38.5397 10.0712 38.5397Z" fill="#FFFF00" stroke="#4D4D4D" stroke-width="0.100828" stroke-linecap="square" stroke-linejoin="bevel"/>
              </g>
              <g id="right-led">
                <g id="right-glow" opacity="0.2" filter="url(#filter1_f_1_2)">
                  <path id="path8" opacity="0.2" d="M44.8894 37.9739H39.1049C38.7645 37.9739 38.4886 38.2737 38.4886 38.6435V41.3218C38.4886 41.6916 38.7645 41.9914 39.1049 41.9914H44.8894C45.2298 41.9914 45.5057 41.6916 45.5057 41.3218V38.6435C45.5057 38.2737 45.2298 37.9739 44.8894 37.9739Z" fill="#00FF00"/>
                </g>
                <path id="right-led-light" d="M44.4251 38.5397H39.8228C39.552 38.5397 39.3325 38.7593 39.3325 39.0301V40.9914C39.3325 41.2622 39.552 41.4817 39.8228 41.4817H44.4251C44.6959 41.4817 44.9154 41.2622 44.9154 40.9914V39.0301C44.9154 38.7593 44.6959 38.5397 44.4251 38.5397Z" fill="#00F311" stroke="#4D4D4D" stroke-width="0.100828" stroke-linecap="square" stroke-linejoin="bevel"/>
              </g>
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              ${paths}            
            </svg>
          `;
        ]]]


  icon_synology_ds:
    styles:
      custom_fields:
        icon:
          - width: 90%
          - margin-top: -6%
          #- margin-left: -1%
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes on {
                10% {
                    transform: scale(0.9);
                }
                20% {
                    transform: scale(1.1);
                }
                30% {
                    transform: scale(1.1);
                }
                40% {
                    transform: scale(1);
                }
                50% {
                    transform: scale(0.9);
                }
                60% {
                    transform: scale(1);
                }
                70% {
                    transform: scale(1.1);
                }
                100% {
                    transform: scale(1);
                }
              }
              .on{
                  animation: on 1s;
                  transform-origin: center;
              }
            </style>
          `,
            paths = `
              <path d="M3.998 8.396c-1.086 0-1.959.875-1.959 1.961v28.807c0 1.086.873 1.959 1.959 1.959h42.227c1.086 0 1.961-.873 1.961-1.959V10.357c0-1.086-.875-1.961-1.961-1.961zm2.103 3.09h35.28c.255 0 .461.198.461.441v24.578c0 .244-.206.441-.461.441H6.101c-.255 0-.461-.198-.461-.441V11.928c0-.244.206-.441.461-.441zM44.578 36.4h1.594a.46.46 0 0 1 .471.453v1.627c0 .252-.21.455-.471.455h-1.594c-.261 0-.471-.203-.471-.455v-1.627a.46.46 0 0 1 .471-.453z"/>
              <use xlink:href="#ds" x="-1.09"/>
              <use xlink:href="#ds" x="6.001"/>
              <use xlink:href="#ds" x="13.091"/>
              <use xlink:href="#ds" x="20.182"/>
              <use xlink:href="#ds" x="27.273" y="-.035"/>
              <defs>
              <path id="ds" d="M8.176 12.258c-.224 0-.402.203-.402.455v23.008c0 .252.179.455.402.455h4.949c.224 0 .402-.203.402-.455V12.713c0-.252-.179-.455-.402-.455zm2.475 18.398a1.144 1.144 0 1 1-1.144 1.145 1.144 1.144 0 0 1 1.145-1.145z"/>
              </defs>
            `;
          if (variables.state !== 'off' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50" fill="#9da0a2">
              ${style}
              ${paths}
            </svg>
          `;
          }
          return variables.state !== 'off' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50" fill="#9da0a2">
              ${paths}
            </svg>
          ` : `
            <svg viewBox="0 0 50 50" fill="#9da0a2">
              ${paths}            
            </svg>
          `;
        ]]]


  icon_synology_rs:
    styles:
      custom_fields:
        icon:
          #- width: 90%
          - margin-top: -6%
          - margin-left: 1%
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes on {
                10% {
                    transform: scale(0.9);
                }
                20% {
                    transform: scale(1.1);
                }
                30% {
                    transform: scale(1.1);
                }
                40% {
                    transform: scale(1);
                }
                50% {
                    transform: scale(0.9);
                }
                60% {
                    transform: scale(1);
                }
                70% {
                    transform: scale(1.1);
                }
                100% {
                    transform: scale(1);
                }
              }
              .on{
                  animation: on 1s;
                  transform-origin: center;
              }
            </style>
          `,
            paths = `
              <path d="M.899 20.526c-.383.017-.685.294-.685.636v7.674c0 .353.324.639.724.639h48.127c.4 0 .722-.285.722-.639v-7.674c0-.353-.322-.636-.722-.636H.937c-.012 0-.026-.001-.038 0zm4.681 2.063c.122 0 .222.099.221.221s-.099.222-.221.221-.222-.099-.221-.221.099-.222.221-.221zm1.201 0c.121.001.219.1.219.221s-.098.22-.219.221-.222-.099-.221-.221.099-.222.221-.221zm-2.786.856h42.012c.176 0 .317.138.317.309v4.51c0 .17-.141.309-.317.309H3.994c-.176 0-.317-.138-.317-.309v-4.51c0-.17.141-.309.317-.309z" paint-order="fill markers stroke" class="B"/>
              <use xlink:href="#rs" paint-order="fill markers stroke" class="B"/>
              <use xlink:href="#rs" y="2.446" paint-order="fill markers stroke" class="B"/>
              <use xlink:href="#rs" x="10.597" paint-order="fill markers stroke" class="B"/>
              <use xlink:href="#rs" x="10.597" y="2.452" paint-order="fill markers stroke" class="B"/>
              <use xlink:href="#rs" x="21.202" paint-order="fill markers stroke" class="B"/>
              <use xlink:href="#rs" x="21.202" y="2.446" paint-order="fill markers stroke" class="B"/>
              <use xlink:href="#rs" x="31.799" paint-order="fill markers stroke" class="B"/>
              <use xlink:href="#rs" x="31.799" y="2.452" paint-order="fill markers stroke" class="B"/>
              <defs >
                <path id="rs" d="M4.128 23.643a.24.24 0 0 0-.241.238v1.801a.24.24 0 0 0 .241.238h9.947c.132 0 .238-.106.238-.238v-1.801c0-.132-.106-.238-.238-.238zm4.972.93l.217.158-.081.258-.268.002-.085-.255z"/>
              </defs>
            `;
          if (variables.state !== 'off' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50" fill="#9da0a2">
              ${style}
              ${paths}
            </svg>
          `;
          }
          return variables.state !== 'off' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50" fill="#9da0a2">
              ${paths}
            </svg>
          ` : `
            <svg viewBox="0 0 50 50" fill="#9da0a2">
              ${paths}            
            </svg>
          `;
        ]]]


  icon_heater:
    styles:
      custom_fields:
        icon:
          #- width: 78%
          - margin-top: -18%
          - margin-left: -14%
          #- fill: >
          #    [[[ return variables.state === 'cool' || variables.state === 'fan_only' ? '#5daeea' : '#9da0a2'; ]]]
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes on {
                10% {
                    transform: scale(0.9);
                }
                20% {
                    transform: scale(1.1);
                }
                30% {
                    transform: scale(1.1);
                }
                40% {
                    transform: scale(1);
                }
                50% {
                    transform: scale(0.9);
                }
                60% {
                    transform: scale(1);
                }
                70% {
                    transform: scale(1.1);
                }
                100% {
                    transform: scale(1);
                }
              }
              .on{
                  animation: on 1s;
                  transform-origin: center;
              }
            </style>
          `,
            paths = `
              <g fill="#9da0a2">
                <path d="M10.75 33.822c-.768-.002-1.749.074-2.27.234-.729.225-1.034.648-1.297.979-.648.816-.42 1.014-.42 1.014.159.406 2.299.477 2.299.477l32.639-.143s1.357-.06 1.568-.451c0 0 .114-.305-.639-.9-.842-.666-1.697-1.151-3.541-1.154zm1.102.486l26.203.043c1.707.003 2.248.166 3.045.775l.744.555-1.633.084-30.572.094c-.515-.004-.603.005-1.541-.105 0 0 .042-.163.535-.729.21-.24.263-.505.938-.633.765-.097 1.549-.078 2.281-.084z" paint-order="markers fill stroke"/>
                <path d="M9.583 32.844l.873.033s.325.422.331.646c.012.407-.19.821-.497 1.11-.424.4-1.74.474-1.74.474l.447-.618c.454-.098.918-.076 1.269-.36.092-.075.035-.358.035-.358l-.718-.928zm30.63-.029l-1.032.028s-.23.302-.304.482c-.042.102-.08.226-.077.336a.37.37 0 0 0 .061.204c.189.262.438.497.696.702.159.126.329.248.519.32.374.144.354.165 1.182.215l-.486-.613s-.304.004-.459-.031c-.213-.048-.452-.122-.64-.234-.068-.041-.143-.084-.16-.162-.035-.158.08-.322.165-.457l.535-.791z"/>
              </g>
            `;
          if (variables.state !== 'off' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50">
              ${style}
              ${paths}
              <path fill="#1a1a1a" d="M10.043 13.444H39.64c1.806 0 3.26 1.454 3.26 3.26v12.939c0 1.806-1.454 3.26-3.26 3.26l-14.821.047c-10.251.026-14.775-.047-14.775-.047-1.806 0-3.26-1.454-3.26-3.26V16.703c0-1.806 1.454-3.26 3.26-3.26z" paint-order="markers fill stroke"/>
            </svg>
          `;
          }
          return variables.state !== 'off' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50">
              ${paths}
              <path fill="#1a1a1a" d="M10.043 13.444H39.64c1.806 0 3.26 1.454 3.26 3.26v12.939c0 1.806-1.454 3.26-3.26 3.26l-14.821.047c-10.251.026-14.775-.047-14.775-.047-1.806 0-3.26-1.454-3.26-3.26V16.703c0-1.806 1.454-3.26 3.26-3.26z" paint-order="markers fill stroke"/>
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              <g fill="#9da0a2">
                <path d="M10.75 33.822c-.768-.002-1.749.074-2.27.234-.729.225-1.034.648-1.297.979-.648.816-.42 1.014-.42 1.014.159.406 2.299.477 2.299.477l32.639-.143s1.357-.06 1.568-.451c0 0 .114-.305-.639-.9-.842-.666-1.697-1.151-3.541-1.154zm1.102.486l26.203.043c1.707.003 2.248.166 3.045.775l.744.555-1.633.084-30.572.094c-.515-.004-.603.005-1.541-.105 0 0 .042-.163.535-.729.21-.24.263-.505.938-.633.765-.097 1.549-.078 2.281-.084z" paint-order="markers fill stroke"/>
                <path d="M9.583 32.844l.873.033s.325.422.331.646c.012.407-.19.821-.497 1.11-.424.4-1.74.474-1.74.474l.447-.618c.454-.098.918-.076 1.269-.36.092-.075.035-.358.035-.358l-.718-.928zm30.63-.029l-1.032.028s-.23.302-.304.482c-.042.102-.08.226-.077.336a.37.37 0 0 0 .061.204c.189.262.438.497.696.702.159.126.329.248.519.32.374.144.354.165 1.182.215l-.486-.613s-.304.004-.459-.031c-.213-.048-.452-.122-.64-.234-.068-.041-.143-.084-.16-.162-.035-.158.08-.322.165-.457l.535-.791z"/>
              </g>
              <path fill="#9da0a2" d="M10.043 13.444H39.64c1.806 0 3.26 1.454 3.26 3.26v12.939c0 1.806-1.454 3.26-3.26 3.26l-14.821.047c-10.251.026-14.775-.047-14.775-.047-1.806 0-3.26-1.454-3.26-3.26V16.703c0-1.806 1.454-3.26 3.26-3.26z" paint-order="markers fill stroke"/>
            </svg>
          `;
        ]]]


  icon_contact_sensor:
    styles:
      custom_fields:
        icon:
          - width: 78%
          - margin-top: -4%
          - margin-left: -10%
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path fill="#9DA0A2" d="M14.02 3.79c-3.535.045-6.367 2.949-6.367 6.549v29.32c0 3.628 2.877 6.551 6.451 6.551h8.656c3.574 0 6.451-2.922 6.451-6.551v-29.32c0-3.628-2.877-6.549-6.451-6.549h-8.656c-.028 0-.056 0-.084 0zm4.252 32.498a.42.42 0 0 1 .418.418.42.42 0 0 1-.418.418.42.42 0 0 1-.418-.418.42.42 0 0 1 .418-.418z" paint-order="fill markers stroke"/>
          <rect fill="#9DA0A2" width="10.395" height="22.778" x="31.951" y="13.611" rx="3.111" ry="3.517" paint-order="fill markers stroke"/>
        </svg>


  icon_bathroom:
    styles:
      custom_fields:
        icon:
          - width: 78%
          - margin-left: -10%
    custom_fields:
      icon: >
        [[[
          let state;
          if (variables.state === 'on' && variables.timeout < 2000) {
            state = 'on';
          } 
          if (variables.state === 'off' && variables.timeout < 2000) {
            state = 'off';
          }
          if (variables.state === 'on' && variables.timeout > 2000) {
            state = 'on_timeout';
          }
          return `
            <svg viewBox="0 0 50 50" fill="var(--light-color)">
              <style>
                @keyframes on {
                  0% {
                    transform: rotateZ(0deg) translate(0%, 0%);
                  }
                  100% {
                    transform: rotateZ(-90deg) translate(-1.5%, 0%);
                  }
                }
                @keyframes off {
                  0% {
                    transform: rotateZ(-90deg) translate(-1.5%, 0%);
                  }
                  45% {
                    transform: rotateZ(-40deg);
                  }
                  55% {
                    transform: rotateZ(0deg);
                  }
                  65% {
                    transform: rotateZ(-15deg);
                  }
                  75% {
                    transform: rotateZ(0deg);
                  }
                  85% {
                    transform: rotateZ(-5deg);
                  }
                  95% {
                    transform: rotateZ(0deg);
                  }
                }
                .on {
                  animation: on 0.45s;
                  animation-fill-mode: forwards;
                  transform-origin: 45% 41%;
                  transition-timing-function: cubic-bezier(0.85, 0, 0.15, 1);
                }
                .on_timeout {
                  transform: rotateZ(-90deg) translate(-1.5%, 0%);
                  transform-origin: 45% 41%;
                }
                .off {
                  animation: off 1.1s linear;
                  animation-delay: 0.05s;
                  animation-fill-mode: both;
                  transform-origin: 45% 41%;
                }
              </style>
              <path d="M38.324 38.032l2.15-30.54H24.516l2.113 30.54zm-2.332 1.986l-.832 7.498h-5.252l-.905-7.498zM40.64 5.119l.185-2.638H24.17l.182 2.635zM12.162 46.942l-.336-22.702 2.266-7.871-.232-.853-3.605.133c-.309.012-.561-.252-.561-.561v-.266c.285-.91-.357-1.069-.186-1.83.244-1.079-.354-1.603-.131-2.357.311-1.05-.241-1.362-.037-2.096.297-1.069-.284-1.374-.064-2.1.302-1.002.165-.889-.111-1.83v-.266c0-.301.246-.535.547-.547l3.863-.145c.576-1.24.273-1.18 1.596-1.182.422 0 .545.17.559.578l.426 13.124h-.008l-1.674 7.857.012.559.334 22.341c.006.303-.246.551-.551.551h-1.566c-.297 0-.535-.242-.539-.539z"/>
            </svg>
          `;
        ]]]


  icon_colgate:
    styles:
      custom_fields:
        icon:
          - width: 81%
          - margin-left: -12%
    custom_fields:
      icon: >
        [[[
          let paths = `
            <path id="white-parts" fill="#9ca2a5" d="M14.746 2.46901C13.909 2.47601 14.078 2.56601 13.574 3.65101L9.713 3.79701C9.412 3.80901 9.164 4.04301 9.164 4.34401V4.61001C9.44 5.55101 9.577 5.43801 9.275 6.44001C9.055 7.16601 9.636 7.47101 9.339 8.54001C9.135 9.27401 9.687 9.58601 9.376 10.636C9.153 11.39 9.751 11.914 9.507 12.993C9.336 13.754 9.978 13.913 9.693 14.823V15.089C9.693 15.398 9.947 15.662 10.256 15.65L13.86 15.517L14.092 16.371L11.906 23.963C12.371 23.833 12.808 23.762 13.226 23.762C13.6547 23.7632 14.0803 23.8344 14.486 23.973L16.148 16.174H16.156L15.73 3.04701C15.716 2.63901 15.593 2.46901 15.171 2.46901C15.006 2.46901 14.865 2.46801 14.745 2.46901H14.746ZM24.17 2.48101L24.352 5.11601L40.641 5.12001L40.825 2.48101H24.17ZM28.461 40.018L28.498 40.782C29.62 41.634 30.736 46.266 29.285 46.852C29.078 46.936 29.365 47.516 29.365 47.516H35.635L36.467 40.018H28.461Z"/>
          `;
          return variables.state === 'on' ? `
            <svg viewBox="0 0 50 50">
              ${paths}
              <path id="tube-bottom" fill="#DD221D" stroke="#FF0000" d="M25.777 25.39L24.916 12.775C24.922 12.769 25.065 13.093 25.234 13.494C25.877 15.017 26.881 16.898 27.623 17.965C28.024 18.542 28.567 19.213 28.998 19.662C30.259 20.976 32.126 22.046 33.989 22.522C34.774 22.723 35.294 22.786 36.166 22.786C37.235 22.786 38.128 22.621 39.045 22.254L39.411 22.125C39.411 22.125 39.171 25.7 38.865 30.054L38.307 37.969L32.478 37.981L26.649 37.993L25.777 25.39Z" stroke-width="0.024" stroke-linejoin="round"/>
              <path id="tube-top" fill="#0262B9" stroke="#FF0000" d="M35.283 22.133C33.896 21.924 32.764 21.528 31.592 20.845C30.687 20.317 30.259 19.994 29.621 19.357C27.909 17.649 26.193 14.576 24.962 11.013L24.745 10.386L24.654 9.16301L24.562 7.73601L24.561 7.53201H32.5L40.439 7.59901C40.439 7.63601 40.223 10.725 39.959 14.464L39.479 21.304C39.479 21.366 38.987 21.603 38.505 21.773C37.761 22.035 37.246 22.12 36.289 22.138C35.814 22.147 35.361 22.144 35.282 22.132L35.283 22.133Z" stroke-width="0.024" stroke-linejoin="round"/>
              <path id="brush-handle" fill="#9ca2a5" d="M13.217 24.449C12.801 24.451 12.355 24.542 11.834 24.717L12.162 46.942L12.164 46.94C12.168 47.237 12.406 47.479 12.703 47.479H14.269C14.574 47.479 14.826 47.231 14.82 46.928L14.488 24.723C14.055 24.542 13.649 24.448 13.217 24.45V24.449Z"/>
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              ${paths}
              <path id="tube-bottom" fill="#9ca2a5" stroke="#9ca2a5" d="M25.777 25.39L24.916 12.775C24.922 12.769 25.065 13.093 25.234 13.494C25.877 15.017 26.881 16.898 27.623 17.965C28.024 18.542 28.567 19.213 28.998 19.662C30.259 20.976 32.126 22.046 33.989 22.522C34.774 22.723 35.294 22.786 36.166 22.786C37.235 22.786 38.128 22.621 39.045 22.254L39.411 22.125C39.411 22.125 39.171 25.7 38.865 30.054L38.307 37.969L32.478 37.981L26.649 37.993L25.777 25.39Z" stroke-width="0.024" stroke-linejoin="round"/>
              <path id="tube-top" fill="#9ca2a5" stroke="#9ca2a5" d="M35.283 22.133C33.896 21.924 32.764 21.528 31.592 20.845C30.687 20.317 30.259 19.994 29.621 19.357C27.909 17.649 26.193 14.576 24.962 11.013L24.745 10.386L24.654 9.16301L24.562 7.73601L24.561 7.53201H32.5L40.439 7.59901C40.439 7.63601 40.223 10.725 39.959 14.464L39.479 21.304C39.479 21.366 38.987 21.603 38.505 21.773C37.761 22.035 37.246 22.12 36.289 22.138C35.814 22.147 35.361 22.144 35.282 22.132L35.283 22.133Z" stroke-width="0.024" stroke-linejoin="round"/>     
              <path id="brush-handle" fill="#9ca2a5" d="M13.217 24.449C12.801 24.451 12.355 24.542 11.834 24.717L12.162 46.942L12.164 46.94C12.168 47.237 12.406 47.479 12.703 47.479H14.269C14.574 47.479 14.826 47.231 14.82 46.928L14.488 24.723C14.055 24.542 13.649 24.448 13.217 24.45V24.449Z"/>
            </svg>
          `;
        ]]]


  icon_toilet:
    styles:
      custom_fields:
        icon:
          - width: 78%
          - margin-left: -10%
    custom_fields:
      icon: >
        [[[
          let state;
          if (variables.state === 'on' && variables.timeout < 2000) {
            state = 'on';
          } 
          if (variables.state === 'off' && variables.timeout < 2000) {
            state = 'off';
          }
          if (variables.state === 'on' && variables.timeout > 2000) {
            state = 'on_timeout';
          }
          return `
            <svg viewBox="0 0 50 50" fill="var(--light-color)">
              <style>
                @keyframes on {
                  0% {
                    transform: rotateZ(0deg) translate(0%, 0%);
                  }
                  100% {
                    transform: rotateZ(-90deg) translate(-1.5%, 0%);
                  }
                }
                @keyframes off {
                  0% {
                    transform: rotateZ(-90deg) translate(-1.5%, 0%);
                  }
                  45% {
                    transform: rotateZ(-40deg);
                  }
                  55% {
                    transform: rotateZ(0deg);
                  }
                  65% {
                    transform: rotateZ(-15deg);
                  }
                  75% {
                    transform: rotateZ(0deg);
                  }
                  85% {
                    transform: rotateZ(-5deg);
                  }
                  95% {
                    transform: rotateZ(0deg);
                  }
                }
                .on {
                  animation: on 0.45s;
                  animation-fill-mode: forwards;
                  transform-origin: 45% 41%;
                  transition-timing-function: cubic-bezier(0.85, 0, 0.15, 1);
                }
                .on_timeout {
                  transform: rotateZ(-90deg) translate(-1.5%, 0%);
                  transform-origin: 45% 41%;
                }
                .off {
                  animation: off 1.1s linear;
                  animation-delay: 0.05s;
                  animation-fill-mode: both;
                  transform-origin: 45% 41%;
                }
              </style>
              <path d="M12.9 1.2h2.5c1.6 0 2.9 1.3 2.9 2.9v18.6c0 1.4 1.1 2.5 2.4 2.5h20.5c.5 0 1 .4.9 1-.1 2.6-1.2 9.6-10.2 11v7.6c0 .2.2.4.4.4h1.5a1.58 1.58 0 0 1 1.6 1.6v.3a1.58 1.58 0 0 1-1.6 1.6H11a1.58 1.58 0 0 1-1.6-1.6v-.3a1.58 1.58 0 0 1 1.6-1.6h1.6c.2 0 .4-.2.4-.4v-7.6s-5.2-.3-5.2-5.9V4.2c0-1.6 1.3-2.9 2.9-2.9l2.2-.1c0 .1 0 0 0 0z"/>
              <path class="${state}" d="M22.3 18.8h18.3a1.58 1.58 0 0 1 1.6 1.6v.6a1.58 1.58 0 0 1-1.6 1.6h-19c-.4 0-.7-.3-.8-.7v-2.3c0-.4.3-.7.7-.8h.8z"/>
            </svg>
          `;
        ]]]


  icon_fan2:
    styles:
      custom_fields:
        icon:
          - width: 75%
          - margin-left: -3%
    custom_fields:
      icon: >
        [[[
          let path = `
            <circle cx="25" cy="25" r="6.6"/>
            <path d="M31.9 30.4c-.5.6-1.1 1.1-1.7 1.5-1.4 1.1-3.2 1.7-5.2 1.7-2.3 0-4.5-.9-6-2.4-.9 1.1-1.6 2.3-2.3 3.2l-4.9 5.4c-1.8 2.7.3 5.6 2.5 7 3.9 2.4 9.8 3.1 14.1 1.9 4.6-1.3 7.9-4.7 7.4-9.7-.2-3.4-1.9-6-3.9-8.6zM17 28.3c-.4-1-.6-2.1-.6-3.3a8.7 8.7 0 0 1 6.4-8.4l-1.6-3.5L19 6.2c-1.5-2.8-5-2.5-7.3-1.2-4 2.2-7.5 6.9-8.7 11.3-1.2 4.6.2 9.2 4.7 11.3 3.1 1.3 6.1 1.2 9.3.7zm26.9-17.6c-3.3-3.4-8-4.6-12.1-1.8-2.8 1.8-4.2 4.6-5.5 7.5 4.2.6 7.4 4.2 7.4 8.6 0 .9-.1 1.7-.4 2.5 1.3.2 2.8.3 3.8.4 2.3.4 4.7 1.3 7.1 1.7 3.2.3 4.7-3 4.8-5.6.3-4.6-1.9-10.1-5.1-13.3z"/>
          `,
          style = `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes rotate {
                  0% {
                    visibility: visible;
                    transform: rotate(0deg) translateZ(0);
                  }
                  100% {
                    transform: rotate(1080deg) translateZ(0);
                  }
                }
                .start {
                  animation: rotate 2.8s ease-in;
                  transform-origin: center;
                  fill: #5daeea;
                  visibility: hidden;
                  will-change: transform;
                }
                .on {
                  animation: rotate 1.8s linear infinite;
                  transform-origin: center;
                  fill: #5daeea;
                  animation-delay: 2.8s;
                  visibility: hidden;
                  will-change: transform;
                }
                .end {
                  animation: rotate 2.8s;
                  transform-origin: center;
                  fill: #9ca2a5;
                  animation-timing-function: cubic-bezier(0.61, 1, 0.88, 1);
                  will-change: transform;
                }
                .start_timeout {
                  animation: rotate 1.8s linear infinite;
                  transform-origin: center;
                  fill: #5daeea;
                  visibility: hidden;
                  will-change: transform;
                }
                .end_timeout {
                  fill: #9ca2a5;
                }
              </style>
          `;
          if (variables.state === 'on' && variables.timeout < 2000) {
            return `${style}<g class="start">${path}</g><g class="on">${path}</g></svg>`;
          }
          if (variables.state === 'off' && variables.timeout < 2000) {
            return `${style}<g class="end">${path}</g></svg>`;
          }
          if (variables.state === 'on' && variables.timeout > 2000) {
            return `${style}<g class="start_timeout">${path}</g></svg>`;
          } else {
            return `${style}<g class="end_timeout">${path}</g></svg>`;
          }
        ]]]


  icon_bath_fan:
    styles:
      custom_fields:
        icon:
          - width: 90%
          - margin-top: -6%
          - margin-left: -6%
    custom_fields:
      icon: >
        [[[
          let path = `
            <g id="fan">
              <g id="blades">
                  <path id="path4442" d="M20.4142 8.58494C20.4142 8.58494 23.548 14.1059 23.8007 18.8746C23.8007 18.8746 27.1817 19.0543 28.6521 19.8988C29.3772 19.454 33.6133 15.1471 34.0596 12.104C34.0596 12.104 34.4456 10.1841 33.3633 8.73441C33.3633 8.73441 31.3309 5.33607 25.8781 5.854C23.6957 6.06413 20.7593 7.0502 20.4142 8.58494V8.58494Z" fill="url(#fan_paint0_linear_1_2)"/>
                  <path id="path4446" d="M36.9229 12.821C36.9229 12.821 33.7085 18.2955 29.7051 20.8986C29.7051 20.8986 31.24 23.9165 31.2438 25.6122C31.9916 26.0178 37.8396 27.5329 40.698 26.3978C40.698 26.3978 42.5538 25.7721 43.2681 24.1101C43.2681 24.1101 45.1949 20.6508 42.02 16.1874C41.1139 14.7797 38.4246 12.3525 36.9229 12.821V12.821Z" fill="url(#fan_paint1_linear_1_2)"/>
                  <path id="path4450" d="M41.5088 29.2361C41.5088 29.2361 35.1605 29.1896 30.9044 27.0241C30.9044 27.0241 29.0583 29.8623 27.5917 30.7134C27.6144 31.5638 29.2262 37.3858 31.6384 39.2938C31.6384 39.2938 33.1082 40.5881 34.9048 40.3757C34.9048 40.3757 38.864 40.3147 41.1419 35.3335C42.0192 33.8572 42.6653 30.3024 41.5088 29.2361Z" fill="url(#fan_paint2_linear_1_2)"/>
                  <path id="path4454" d="M29.5858 41.4151C29.5858 41.4151 26.452 35.8941 26.1993 31.1255C26.1993 31.1255 22.8183 30.9458 21.3479 30.1012C20.6228 30.5461 16.3867 34.853 15.9404 37.896C15.9404 37.896 15.5544 39.8159 16.6367 41.2656C16.6367 41.2656 18.6691 44.664 24.1219 44.146C26.0552 44.0721 29.2407 42.9498 29.5858 41.4151Z" fill="url(#fan_paint3_linear_1_2)"/>
                  <path id="path4458" d="M13.077 37.179C13.077 37.179 16.2915 31.7045 20.2949 29.1014C20.2949 29.1014 18.76 26.0835 18.7562 24.3878C18.0084 23.9822 12.1604 22.4671 9.30195 23.6022C9.30195 23.6022 7.44623 24.2279 6.7319 25.89C6.7319 25.89 4.80507 29.3493 7.98003 33.8126C8.82263 35.3519 11.5754 37.6475 13.077 37.179Z" fill="url(#fan_paint4_linear_1_2)"/>
                  <path id="path4462" d="M8.49121 20.7639C8.49121 20.7639 14.8394 20.8105 19.0955 22.9759C19.0955 22.9759 20.9417 20.1377 22.4083 19.2866C22.3856 18.4362 20.7738 12.6142 18.3615 10.7062C18.3615 10.7062 16.8918 9.41194 15.0952 9.62435C15.0952 9.62435 11.136 9.68532 8.85811 14.6666C8.29334 16.1344 7.33465 19.6977 8.49121 20.7639Z" fill="url(#fan_paint5_linear_1_2)"/>
                </g>
                <g id="core">
                  <path id="circle4732" d="M25 31.4117C28.5411 31.4117 31.4117 28.5411 31.4117 25C31.4117 21.459 28.5411 18.5883 25 18.5883C21.4589 18.5883 18.5883 21.459 18.5883 25C18.5883 28.5411 21.4589 31.4117 25 31.4117Z" fill="url(#fan_paint6_radial_1_2)"/>
                  <g id="path2362" filter="url(#fan_filter0_f_1_2)">
                  <path d="M25 31.1526C28.398 31.1526 31.1526 28.398 31.1526 25C31.1526 21.602 28.398 18.8474 25 18.8474C21.602 18.8474 18.8474 21.602 18.8474 25C18.8474 28.398 21.602 31.1526 25 31.1526Z" fill="#9DA0A2"/>
              </g>
              </g>
            </g>
          `,
          gradient = `
            <defs>
            <filter id="fan_filter0_f_1_2" x="18.6559" y="18.656" width="12.6881" height="12.6881" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
            <feFlood flood-opacity="0" result="BackgroundImageFix"/>
            <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
            <feGaussianBlur stdDeviation="0.0957283" result="effect1_foregroundBlur_1_2"/>
            </filter>
            <linearGradient id="fan_paint0_linear_1_2" x1="19.9104" y1="12.3916" x2="34.1265" y2="14.1319" gradientUnits="userSpaceOnUse">
            <stop stop-color="#9DA0A2"/>
            <stop offset="1" stop-color="#5E5E5E"/>
            </linearGradient>
            <linearGradient id="fan_paint1_linear_1_2" x1="33.3744" y1="14.288" x2="38.9753" y2="27.4697" gradientUnits="userSpaceOnUse">
            <stop stop-color="#9DA0A2"/>
            <stop offset="1" stop-color="#5E5E5E"/>
            </linearGradient>
            <linearGradient id="fan_paint2_linear_1_2" x1="38.464" y1="26.8965" x2="29.8488" y2="38.3379" gradientUnits="userSpaceOnUse">
            <stop stop-color="#9DA0A2"/>
            <stop offset="1" stop-color="#5E5E5E"/>
            </linearGradient>
            <linearGradient id="fan_paint3_linear_1_2" x1="30.0896" y1="37.6084" x2="15.8735" y2="35.8681" gradientUnits="userSpaceOnUse">
            <stop stop-color="#9DA0A2"/>
            <stop offset="1" stop-color="#5E5E5E"/>
            </linearGradient>
            <linearGradient id="fan_paint4_linear_1_2" x1="16.6256" y1="35.712" x2="11.0247" y2="22.5303" gradientUnits="userSpaceOnUse">
            <stop stop-color="#9DA0A2"/>
            <stop offset="1" stop-color="#5E5E5E"/>
            </linearGradient>
            <linearGradient id="fan_paint5_linear_1_2" x1="11.536" y1="23.1035" x2="20.1512" y2="11.6622" gradientUnits="userSpaceOnUse">
            <stop stop-color="#9DA0A2"/>
            <stop offset="1" stop-color="#5E5E5E"/>
            </linearGradient>
            <radialGradient id="fan_paint6_radial_1_2" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(25 25) scale(6.41167)">
            <stop stop-color="#9DA0A2"/>
            <stop offset="1" stop-color="#A7A7A7"/>
            </radialGradient>
            </defs>
          `,
          style = `
            <svg viewBox="0 0 50 50" ${gradient}>
              <style>
                @keyframes rotate {
                  0% {
                    visibility: visible;
                    transform: rotate(1080deg) translateZ(0);
                  }
                  100% {
                    transform: rotate(0deg) translateZ(0);
                  }
                }
                .start {
                  animation: rotate 2.8s ease-in;
                  transform-origin: center;
                  fill: #5daeea;
                  visibility: hidden;
                  will-change: transform;
                }
                .on {
                  animation: rotate 1.8s linear infinite;
                  transform-origin: center;
                  fill: #5daeea;
                  animation-delay: 2.8s;
                  visibility: hidden;
                  will-change: transform;
                }
                .end {
                  animation: rotate 2.8s;
                  transform-origin: center;
                  fill: #9ca2a5;
                  animation-timing-function: cubic-bezier(0.61, 1, 0.88, 1);
                  will-change: transform;
                }
                .start_timeout {
                  animation: rotate 1.8s linear infinite;
                  transform-origin: center;
                  fill: #5daeea;
                  visibility: hidden;
                  will-change: transform;
                }
                .end_timeout {
                  fill: #9ca2a5;
                }
              </style>
          `;
          if (variables.state === 'on' && variables.timeout < 2000) {
            return `${style}<g class="start">${path}</g><g class="on">${path}</g></svg>`;
          }
          if (variables.state === 'off' && variables.timeout < 2000) {
            return `${style}<g class="end">${path}</g></svg>`;
          }
          if (variables.state === 'on' && variables.timeout > 2000) {
            return `${style}<g class="start_timeout">${path}</g></svg>`;
          } else {
            return `${style}<g class="end_timeout">${path}</g></svg>`;
          }
        ]]]


  icon_humidifier:
    styles:
      custom_fields:
        icon:
          - width: 90%
          - margin-top: -6%
          - margin-left: -25%
    custom_fields:
      icon: >
        [[[
          let path = `
            <g id="icon_humidifier">
              <g id="unit">
                <path id="humid-body" d="M23.8009 9.08823C23.6439 9.07891 23.5055 9.07905 23.3946 9.09002C23.3946 9.09002 23.2564 9.13586 23.1464 9.30217C23.1464 9.30217 22.4899 10.8542 20.838 12.2147C20.838 12.2147 17.3255 14.8255 16.374 16.8064C16.374 16.8064 15.3993 18.7119 15.3061 20.4056C15.3061 20.4056 15.0356 24.2487 15.0382 26.6045C15.0382 26.6045 15.0002 37.3021 15.0436 42.733C15.4927 43.1472 17.3182 43.4199 19.3135 43.6049C21.6285 43.8196 24.1698 43.9118 25.045 43.8944C25.9659 43.876 28.5419 43.8378 30.8916 43.5815C32.5786 43.3976 34.1682 43.1205 34.854 42.5658C34.9983 37.9411 34.9883 30.8769 34.96 26.317C34.9439 23.7235 34.8647 21.8744 34.8647 21.8744C34.7654 19.3298 34.2391 18.3687 34.2391 18.3687C33.5214 15.7045 31.519 14.2318 31.519 14.2318C29.4747 12.3333 28.3117 11.7341 27.2365 9.82713C27.2365 9.82713 27.0031 9.66267 26.9147 9.64915C26.9147 9.64915 24.8992 9.15344 23.8009 9.08823ZM34.8432 43.0296C34.6269 43.5542 32.9805 43.9408 30.9724 44.1659C29.0024 44.3866 26.6891 44.4497 24.9928 44.4391C23.4096 44.4292 21.133 44.3294 19.1552 44.1407C17.0128 43.9363 15.2264 43.6269 15.0508 43.2112C15.0772 45.0965 15.2306 47.3337 15.2306 47.3337C15.2306 47.3337 15.5551 47.8978 17.2028 48.2505C19.3266 48.7052 23.0352 48.963 25.0395 48.9122C28.0296 48.8362 30.2163 48.7434 32.5904 48.2056C34.2889 47.8209 34.5645 47.2132 34.5645 47.2132C34.5645 47.2132 34.7897 44.5604 34.8378 43.231C34.8399 43.1719 34.8411 43.0897 34.8432 43.0296H34.8432Z" fill="url(#humid_paint0_linear_1_7)"/>
              </g>
            </g>
          `,
          gradient = `
            <defs>
            <linearGradient id="humid_paint0_linear_1_7" x1="10.6504" y1="29.2301" x2="37.5086" y2="29.1726" gradientUnits="userSpaceOnUse">
            <stop stop-color="#4D4D4D"/>
            <stop offset="1" stop-color="#9DA0A2"/>
            </linearGradient>
            <linearGradient id="humid_paint1_linear_1_7" x1="25.6505" y1="7.4543" x2="25.6856" y2="-1.03726" gradientUnits="userSpaceOnUse">
            <stop stop-color="#9DA0A2"/>
            <stop offset="1" stop-color="#9DA0A2" stop-opacity="0"/>
            </linearGradient>
            </defs>
          `,
          style = `
            <svg viewBox="0 0 50 50" ${gradient}>
              <style>
                @keyframes rotate {
                  0% {
                    visibility: visible;
                    opacity: 0;
                    transform: translateZ(100);
                  }
                  80% {
                    visibility: visible;
                    opacity: 1;
                  }
                  100% {
                    opacity: 100;
                    transform: translateZ(200);
                    visibility: hidden;
                  }
                }
                .start {
                  animation: smoke 8s ease-in;
                  visibility: hidden;
                  will-change: transform;
                }
                .on {
                  animation: rotate 1.8s linear infinite;
                  transform-origin: center;
                  fill: #5daeea;
                  animation-delay: 2.8s;
                  visibility: hidden;
                  will-change: transform;
                }
                .end {
                  animation: rotate 2.8s;
                  transform-origin: center;
                  fill: #9ca2a5;
                  animation-timing-function: cubic-bezier(0.61, 1, 0.88, 1);
                  will-change: transform;
                }
              </style>
          `;
          if (variables.state === 'on' && variables.timeout < 2000) {
            return `${style}<g class="start">
              <path id="smoke" d="M25.3868 8.08721C25.3868 8.08721 25.4992 8.77227 25.6784 8.16679C25.8607 7.55093 26.1098 5.63973 26.1252 5.08088C26.1399 4.5447 24.9289 3.90634 24.7933 3.20569C24.6773 2.606 25.0251 1.0734 25.2054 0.566276C25.3805 0.0736599 25.3868 0.597757 25.3868 0.597757" fill="url(#humid_paint1_linear_1_7)"/>
            </g>
            ${path}
            <g class="on">
              <path id="smoke" d="M25.3868 8.08721C25.3868 8.08721 25.4992 8.77227 25.6784 8.16679C25.8607 7.55093 26.1098 5.63973 26.1252 5.08088C26.1399 4.5447 24.9289 3.90634 24.7933 3.20569C24.6773 2.606 25.0251 1.0734 25.2054 0.566276C25.3805 0.0736599 25.3868 0.597757 25.3868 0.597757" fill="url(#humid_paint1_linear_1_7)"/>
            </g>
            ${path}
            <path id="humid-light" d="M15.0363 42.7276C15.475 43.1449 17.3101 43.4188 19.3144 43.6046C21.6294 43.8193 24.1702 43.9118 25.0454 43.8943C25.9663 43.8759 28.5422 43.8382 30.8918 43.5819C32.5828 43.3975 34.1762 43.1196 34.8593 42.5622V42.9936C34.7053 43.5365 33.0265 43.9362 30.9729 44.1664C29.0028 44.3872 26.6891 44.4497 24.9928 44.4391C23.4097 44.4292 21.1322 44.3302 19.1544 44.1414C16.9348 43.9296 15.0927 43.6049 15.0328 43.1663L15.0363 42.7276Z" fill="white"/>
            </svg>
            `;
          }
          if (variables.state === 'off' && variables.timeout < 2000) {
            return `${style}<g class="end">
              <path id="smoke" d="M25.3868 8.08721C25.3868 8.08721 25.4992 8.77227 25.6784 8.16679C25.8607 7.55093 26.1098 5.63973 26.1252 5.08088C26.1399 4.5447 24.9289 3.90634 24.7933 3.20569C24.6773 2.606 25.0251 1.0734 25.2054 0.566276C25.3805 0.0736599 25.3868 0.597757 25.3868 0.597757" fill="url(#humid_paint1_linear_1_7)"/>
            </g>
            ${path}
            </svg>
            `;
          }
          if (variables.state === 'on' && variables.timeout > 2000) {
            return `${style}<g class="start_timeout">${path}</g></svg>`;
          } else {
            return `<g class="end_timeout">${path}</g></svg>`;
          }
        ]]]


  icon_aqara_lock:
    styles:
      custom_fields:
        icon:
          - width: 85%
          - margin-left: -20%
          - margin-top: 1%
    custom_fields:
      icon: >
        [[[
          let style = `
            <style>
              @keyframes icon {
                  from {
                      fill: red;
                  }
                  to {
                      fill: transparent;
                  }
                }
              .icon{
                  animation: icon 1s infinite linear;
              }
            </style>
          `,
            paths = `
              <g id="lock">
                <path id="lockBody" d="M21.9407 1.60696H16.3609C15.181 1.60696 14.2245 2.56344 14.2245 3.74331V46.2411C14.2245 47.4209 15.181 48.3774 16.3609 48.3774H21.9407C23.1206 48.3774 24.077 47.4209 24.077 46.2411V3.74331C24.077 2.56344 23.1206 1.60696 21.9407 1.60696Z" fill="#333333"/>
                <path id="touchPad" d="M21.9616 2.00684H16.34C15.3871 2.00684 14.6146 2.77934 14.6146 3.73226V36.2022C14.6146 37.1552 15.3871 37.9277 16.34 37.9277H21.9616C22.9145 37.9277 23.687 37.1552 23.687 36.2022V3.73226C23.687 2.77934 22.9145 2.00684 21.9616 2.00684Z" fill="#1A1A1A"/>
                <path id="ringLight" d="M19.1493 27.2063C20.3207 27.2063 21.2703 26.2567 21.2703 25.0853C21.2703 23.9139 20.3207 22.9643 19.1493 22.9643C17.9779 22.9643 17.0283 23.9139 17.0283 25.0853C17.0283 26.2567 17.9779 27.2063 19.1493 27.2063Z" fill="#1E1E1E"/>
                <g id="handle">
                  <path id="handleBody" d="M33.874 23.246H19.2371C18.187 23.246 17.3356 24.0606 17.3356 25.0654C17.3356 26.0703 18.187 26.8848 19.2371 26.8848H33.874C34.9241 26.8848 35.7755 26.0703 35.7755 25.0654C35.7755 24.0606 34.9241 23.246 33.874 23.246Z" fill="#333333"/>
                  <path id="ringerSensor" d="M19.4841 24.1373H18.7891C18.2987 24.1373 17.9011 24.5349 17.9011 25.0253V25.1425C17.9011 25.6329 18.2987 26.0305 18.7891 26.0305H19.4841C19.9745 26.0305 20.372 25.6329 20.372 25.1425V25.0253C20.372 24.5349 19.9745 24.1373 19.4841 24.1373Z" fill="#1A1A1A"/>
                </g>
                </g>
                <g id="lockIcon">
                  <path id="icon" d="M16.9109 15.157C16.84 15.1632 16.7768 15.1991 16.7356 15.2564C16.7281 15.2669 16.7219 15.2773 16.7155 15.2903C16.706 15.3096 16.7 15.3269 16.6958 15.3472C16.6909 15.3713 16.6905 15.3803 16.6905 15.4631V15.5309H16.6602H16.6299V15.7695V16.0081H16.9281H17.2262V15.7695V15.5309H17.198H17.1697V15.4582C17.1697 15.4155 17.1694 15.3822 17.169 15.3775C17.1649 15.3279 17.1475 15.2842 17.1162 15.2451C17.1093 15.2365 17.0894 15.2165 17.0808 15.2097C17.044 15.1804 17.0046 15.1637 16.958 15.1578C16.9481 15.1566 16.9206 15.1561 16.9109 15.157ZM16.9397 15.2507C16.9809 15.2541 17.0153 15.2716 17.0419 15.303C17.0554 15.3189 17.066 15.3396 17.0711 15.3605C17.0754 15.378 17.0753 15.375 17.0756 15.4565L17.076 15.5309H16.9305H16.785V15.4575C16.785 15.379 16.785 15.3788 16.7884 15.3637C16.7917 15.3485 16.8002 15.3287 16.8086 15.3159C16.8295 15.2848 16.8609 15.2627 16.8965 15.2544C16.9124 15.2507 16.9254 15.2496 16.9397 15.2507Z" fill="#1A1A1A" fill-opacity="0.894118"/>
                </g>
            `;
          if (variables.state === 'on' && variables.timeout < 2000) {
          return `
            <svg viewBox="0 0 50 50">
              ${style}
              ${paths}
            </svg>
          `;
          }

          return variables.state === 'on' && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50">
              ${paths}
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">                
              <g id="lock">
                <path id="lockBody" fill="#9DA0A2" d="M21.9407 1.60696H16.3609C15.181 1.60696 14.2245 2.56344 14.2245 3.74331V46.2411C14.2245 47.4209 15.181 48.3774 16.3609 48.3774H21.9407C23.1206 48.3774 24.077 47.4209 24.077 46.2411V3.74331C24.077 2.56344 23.1206 1.60696 21.9407 1.60696Z"/>
                <path id="touchPad" fill="#535353" d="M21.9616 2.00684H16.34C15.3871 2.00684 14.6146 2.77934 14.6146 3.73226V36.2022C14.6146 37.1552 15.3871 37.9277 16.34 37.9277H21.9616C22.9145 37.9277 23.687 37.1552 23.687 36.2022V3.73226C23.687 2.77934 22.9145 2.00684 21.9616 2.00684Z"/>
                <path id="ringLight" fill="#535353" d="M19.1493 27.2063C20.3207 27.2063 21.2703 26.2567 21.2703 25.0853C21.2703 23.9139 20.3207 22.9643 19.1493 22.9643C17.9779 22.9643 17.0283 23.9139 17.0283 25.0853C17.0283 26.2567 17.9779 27.2063 19.1493 27.2063Z" fill="#1E1E1E"/>
                <g id="handle">
                  <path id="handleBody" fill="#9DA0A2" d="M33.874 23.246H19.2371C18.187 23.246 17.3356 24.0606 17.3356 25.0654C17.3356 26.0703 18.187 26.8848 19.2371 26.8848H33.874C34.9241 26.8848 35.7755 26.0703 35.7755 25.0654C35.7755 24.0606 34.9241 23.246 33.874 23.246Z"/>
                  <path id="FingerSensor" fill="#535353" d="M19.4841 24.1373H18.7891C18.2987 24.1373 17.9011 24.5349 17.9011 25.0253V25.1425C17.9011 25.6329 18.2987 26.0305 18.7891 26.0305H19.4841C19.9745 26.0305 20.372 25.6329 20.372 25.1425V25.0253C20.372 24.5349 19.9745 24.1373 19.4841 24.1373Z"/>
                </g>
                </g>
                <g id="lockIcon">
                  <path id="icon" fill="#535353" fill-opacity="0.894118" d="M16.9109 15.157C16.84 15.1632 16.7768 15.1991 16.7356 15.2564C16.7281 15.2669 16.7219 15.2773 16.7155 15.2903C16.706 15.3096 16.7 15.3269 16.6958 15.3472C16.6909 15.3713 16.6905 15.3803 16.6905 15.4631V15.5309H16.6602H16.6299V15.7695V16.0081H16.9281H17.2262V15.7695V15.5309H17.198H17.1697V15.4582C17.1697 15.4155 17.1694 15.3822 17.169 15.3775C17.1649 15.3279 17.1475 15.2842 17.1162 15.2451C17.1093 15.2365 17.0894 15.2165 17.0808 15.2097C17.044 15.1804 17.0046 15.1637 16.958 15.1578C16.9481 15.1566 16.9206 15.1561 16.9109 15.157ZM16.9397 15.2507C16.9809 15.2541 17.0153 15.2716 17.0419 15.303C17.0554 15.3189 17.066 15.3396 17.0711 15.3605C17.0754 15.378 17.0753 15.375 17.0756 15.4565L17.076 15.5309H16.9305H16.785V15.4575C16.785 15.379 16.785 15.3788 16.7884 15.3637C16.7917 15.3485 16.8002 15.3287 16.8086 15.3159C16.8295 15.2848 16.8609 15.2627 16.8965 15.2544C16.9124 15.2507 16.9254 15.2496 16.9397 15.2507Z"/>
                </g>
            </svg>
          `;
        ]]]


  icon_lock:
      styles:
        custom_fields:
          icon:
            - width: 85%
            - margin-left: 5%
            - margin-top: 1%
      custom_fields:
        icon: >
          [[[
            let color;
            if (variables.state === 'open' && variables.timeout < 2000) {
              color = '#fbd734';
            } 
            if (variables.state === 'closed' && variables.timeout < 2000) {
              color = '#a0a0a0';
            }
            if (variables.state === 'open' && variables.timeout > 2000) {
              color = '#fbd734';
            }
            if (variables.state === 'closed' && variables.timeout > 2000) {
              color = '#a0a0a0';
            }
            let state;
            if (variables.state === 'open' && variables.timeout < 2000) {
              state = 'on';
            } 
            if (variables.state === 'closed' && variables.timeout < 2000) {
              state = 'off';
            }
            if (variables.state === 'open' && variables.timeout > 2000) {
              state = 'on_timeout';
            }
            return `
              <svg stroke-miterlimit="10" style="fill-rule:nonzero;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round" viewBox="0 0 612 512" xmlns="http://www.w3.org/2000/svg" xmlns:vectornator="http://vectornator.io" xmlns:xlink="http://www.w3.org/1999/xlink"><defs/><clipPath id="ArtboardFrame">
              <path d="M0 0h612v512H0z"/></clipPath><g clip-path="url(#ArtboardFrame)" id="Untitled" vectornator:layerName="Untitled">
              <path d="M25.529 185.393H367.228C381.097 185.393 392.341 197.098 392.341 211.537V487.706C392.341 502.145 381.097 513.85 367.228 513.85H25.529C11.6597 513.85.416354 502.145.416352 487.706V211.494C.416349 197.055 11.6597 185.35 25.529 185.35V185.393z" fill="${color}" fill-rule="evenodd" opacity="1" stroke="none"/>
              <path d="M175.744 367.312 148.665 441.169h95.386L218.938 366.179C239.362 355.207 249.806 331.009 244.124 307.825 238.442 284.641 218.139 268.611 195.162 269.167 172.186 269.723 152.62 286.719 147.98 310.153 143.339 333.587 154.853 357.254 175.744 367.225V367.312z" fill="#36464e" fill-rule="evenodd" opacity="1" stroke="none"/>
              <path class="${state}" d="M336.913 181.305H293.793V145.384C293.945 118.423 283.677 92.4534 265.148 72.9335 247.611 54.0123 223.024 43.2642 197.277 43.2642 171.53 43.2642 146.942 54.0123 129.406 72.9335 110.876 92.4534 100.608 118.423 100.76 145.384V181.305H57.6403V145.384C57.5795 107.312 72.17 70.6868 98.3667 43.1524 123.999 15.7146 159.802.147898 197.277.147896 234.751.147896 270.554 15.7146 296.187 43.1524 322.404 70.6737 336.997 107.307 336.913 145.384c0 0 0 35.92100000000002.0 35.92100000000002z" fill="#808080" fill-rule="evenodd" opacity="1" stroke="none"/></g>
                <style>
                  @keyframes off {
                      0% {
                        transform: rotateY(180deg);
                        transform-origin: 310px bottom -50px;
                      }
                      100% {
                        transform: rotateY(0deg);
                      }
                    }
                  @keyframes on {
                      0% {
                        transform: rotateY(0deg)
                      }
                      100% {
                        transform: rotateY(180deg) ;
                        transform-origin: 305px bottom -200px;
                      }
                    }
                  .on {
                    animation: on 0.5s;
                    animation-fill-mode: forwards;
                    animation-delay: -0.1s;
                  }
                  .off {
                    animation: off 0.5s;
                    transform-origin: 40% 20%;
                    animation-fill-mode: forwards;
                  }
                  .on_timeout {
                    transform: rotateY(180deg) ;
                    transform-origin: 305px bottom -200px;
                  }
                </style>
              </svg>
            `;
          ]]]


  weather_forecast2:
    aspect_ratio: 1
    variables:
      forecast1pic: |
        [[[ 
          var state = states['weather.pirateweather'].attributes.forecast[1]['condition'];
          if (state == "cloudy") return 'url("/local/svg/weather/animated/cloudy.png")';
          else if (state == "clear-night") return 'url("/local/svg/weather/animated/moon-phase.png")';
          else if (state == "fog") return 'url("/local/svg/weather/animated/fog.png")';
          else if (state == "hail") return 'url("/local/svg/weather/animated/snow.png")';
          else if (state == "lightning") return 'url("/local/svg/weather/animated/lightning.png")';
          else if (state == "lightning-rainy") return 'url("/local/svg/weather/animated/lightning.png")';
          else if (state == "partlycloudy") return 'url("/local/svg/weather/animated/partiallycloudy1.png")';
          else if (state == "pouring") return 'url("/local/svg/weather/animated/rainy.png")';
          else if (state == "rainy") return 'url("/local/svg/weather/animated/rainy.png")';
          else if (state == "snowy") return 'url("/local/svg/weather/animated/snow.png")';
          else if (state == "snowy-rainy") return 'url("/local/svg/weather/animated/sleet.png")';
          else if (state == "sunny") return 'url("/local/svg/weather/animated/sunny.png")';
          else if (state == "windy") return 'url("/local/svg/weather/animated/windy.png")';
          else if (state == "windy-variant") 'url("/local/svg/weather/animated/windy.png")';
          else if (state == "exceptional") return 'url("/local/svg/weather/animated/sunny.png")';
        ]]]
      forecast2pic: |
        [[[ 
          var state = states['weather.pirateweather'].attributes.forecast[2]['condition'];
          if (state == "cloudy") return 'url("/local/svg/weather/animated/cloudy.png")';
          else if (state == "clear-night") return 'url("/local/svg/weather/animated/moon-phase.png")';
          else if (state == "fog") return 'url("/local/svg/weather/animated/fog.png")';
          else if (state == "hail") return 'url("/local/svg/weather/animated/snow.png")';
          else if (state == "lightning") return 'url("/local/svg/weather/animated/lightning.png")';
          else if (state == "lightning-rainy") return 'url("/local/svg/weather/animated/lightning.png")';
          else if (state == "partlycloudy") return 'url("/local/svg/weather/animated/partiallycloudy1.png")';
          else if (state == "pouring") return 'url("/local/svg/weather/animated/rainy.png")';
          else if (state == "rainy") return 'url("/local/svg/weather/animated/rainy.png")';
          else if (state == "snowy") return 'url("/local/svg/weather/animated/snow.png")';
          else if (state == "snowy-rainy") return 'url("/local/svg/weather/animated/sleet.png")';
          else if (state == "sunny") return 'url("/local/svg/weather/animated/sunny.png")';
          else if (state == "windy") return 'url("/local/svg/weather/animated/windy.png")';
          else if (state == "windy-variant") 'url("/local/svg/weather/animated/windy.png")';
          else if (state == "exceptional") return 'url("/local/svg/weather/animated/sunny.png")';
        ]]]
      forecast3pic: |
        [[[ 
          var state = states['weather.pirateweather'].attributes.forecast[3]['condition'];
          if (state == "cloudy") return 'url("/local/svg/weather/animated/cloudy.png")';
          else if (state == "clear-night") return 'url("/local/svg/weather/animated/moon-phase.png")';
          else if (state == "fog") return 'url("/local/svg/weather/animated/fog.png")';
          else if (state == "hail") return 'url("/local/svg/weather/animated/snow.png")';
          else if (state == "lightning") return 'url("/local/svg/weather/animated/lightning.png")';
          else if (state == "lightning-rainy") return 'url("/local/svg/weather/animated/lightning.png")';
          else if (state == "partlycloudy") return 'url("/local/svg/weather/animated/partiallycloudy1.png")';
          else if (state == "pouring") return 'url("/local/svg/weather/animated/rainy.png")';
          else if (state == "rainy") return 'url("/local/svg/weather/animated/rainy.png")';
          else if (state == "snowy") return 'url("/local/svg/weather/animated/snow.png")';
          else if (state == "snowy-rainy") return 'url("/local/svg/weather/animated/sleet.png")';
          else if (state == "sunny") return 'url("/local/svg/weather/animated/sunny.png")';
          else if (state == "windy") return 'url("/local/svg/weather/animated/windy.png")';
          else if (state == "windy-variant") 'url("/local/svg/weather/animated/windy.png")';
          else if (state == "exceptional") return 'url("/local/svg/weather/animated/sunny.png")';
        ]]]
      forecast4pic: |
        [[[ 
          var state = states['weather.pirateweather'].attributes.forecast[4]['condition'];
          if (state == "cloudy") return 'url("/local/svg/weather/animated/cloudy.png")';
          else if (state == "clear-night") return 'url("/local/svg/weather/animated/moon-phase.png")';
          else if (state == "fog") return 'url("/local/svg/weather/animated/fog.png")';
          else if (state == "hail") return 'url("/local/svg/weather/animated/snow.png")';
          else if (state == "lightning") return 'url("/local/svg/weather/animated/lightning.png")';
          else if (state == "lightning-rainy") return 'url("/local/svg/weather/animated/lightning.png")';
          else if (state == "partlycloudy") return 'url("/local/svg/weather/animated/partiallycloudy1.png")';
          else if (state == "pouring") return 'url("/local/svg/weather/animated/rainy.png")';
          else if (state == "rainy") return 'url("/local/svg/weather/animated/rainy.png")';
          else if (state == "snowy") return 'url("/local/svg/weather/animated/snow.png")';
          else if (state == "snowy-rainy") return 'url("/local/svg/weather/animated/sleet.png")';
          else if (state == "sunny") return 'url("/local/svg/weather/animated/sunny.png")';
          else if (state == "windy") return 'url("/local/svg/weather/animated/windy.png")';
          else if (state == "windy-variant") 'url("/local/svg/weather/animated/windy.png")';
          else if (state == "exceptional") return 'url("/local/svg/weather/animated/sunny.png")';
        ]]]
      forecast5pic: |
        [[[ 
          var state = states['weather.pirateweather'].attributes.forecast[5]['condition'];
          if (state == "cloudy") return 'url("/local/svg/weather/animated/cloudy.png")';
          else if (state == "clear-night") return 'url("/local/svg/weather/animated/moon-phase.png")';
          else if (state == "fog") return 'url("/local/svg/weather/animated/fog.png")';
          else if (state == "hail") return 'url("/local/svg/weather/animated/snow.png")';
          else if (state == "lightning") return 'url("/local/svg/weather/animated/lightning.png")';
          else if (state == "lightning-rainy") return 'url("/local/svg/weather/animated/lightning.png")';
          else if (state == "partlycloudy") return 'url("/local/svg/weather/animated/partiallycloudy1.png")';
          else if (state == "pouring") return 'url("/local/svg/weather/animated/rainy.png")';
          else if (state == "rainy") return 'url("/local/svg/weather/animated/rainy.png")';
          else if (state == "snowy") return 'url("/local/svg/weather/animated/snow.png")';
          else if (state == "snowy-rainy") return 'url("/local/svg/weather/animated/sleet.png")';
          else if (state == "sunny") return 'url("/local/svg/weather/animated/sunny.png")';
          else if (state == "windy") return 'url("/local/svg/weather/animated/windy.png")';
          else if (state == "windy-variant") 'url("/local/svg/weather/animated/windy.png")';
          else if (state == "exceptional") return 'url("/local/svg/weather/animated/sunny.png")';
        ]]]
      ypos: |
        [[[
          if (states["sensor.time"].state.split(":")[0] == "06"){ 
            return "49";} 
          else if (states["sensor.time"].state.split(":")[0] == "07"){ 
            return "47.9";}
          else if (states["sensor.time"].state.split(":")[0] == "08"){ 
            return "46.8";}
          else if (states["sensor.time"].state.split(":")[0] == "09"){ 
            return "45.8";}
          else if (states["sensor.time"].state.split(":")[0] == "10"){ 
            return "45.4";}
          else if (states["sensor.time"].state.split(":")[0] == "11"){ 
            return "45.1";}
          else if (states["sensor.time"].state.split(":")[0] == "12"){ 
            return "45";}
          else if (states["sensor.time"].state.split(":")[0] == "13"){ 
            return "45.1";}
          else if (states["sensor.time"].state.split(":")[0] == "14"){ 
            return "45.4";}
          else if (states["sensor.time"].state.split(":")[0] == "15"){ 
            return "45.8";}
          else if (states["sensor.time"].state.split(":")[0] == "16"){ 
            return "46.8";}
          else if (states["sensor.time"].state.split(":")[0] == "17"){ 
            return "47.9";}
          else if (states["sensor.time"].state.split(":")[0] == "18"){ 
            return "49";}
          else if (states["sensor.time"].state.split(":")[0] == "19"){ 
            return "50.6";}
          else if (states["sensor.time"].state.split(":")[0] == "21"){ 
            return "54.8";}        
          else if (states["sensor.time"].state.split(":")[0] == "22") { 
            return "56.9";}
          else if (states["sensor.time"].state.split(":")[0] == "23") { 
            return "59.4";}
          else if (states["sensor.time"].state.split(":")[0] == "24") { 
            return "60.6";}
        ]]]
      xpos: |
        [[[    
          return states["sensor.time"].state.split(":")[0] * 4.16;
        ]]]
      line: |
        [[[
          if (states['sun.sun'].attributes.next_rising.substr(11,2) == "06"){ 
            return "49";}
        ]]]
    show_icon: false
    show_state: true
    show_name: false
    styles:
      name:
        - position: absolute
        - top: 20px
        - left: 20px
        - font-size: 14px
        - font-weight: bold
      custom_fields:
        dayonetitle:
          - position: absolute
          - top: 40px
          - left: 0px
          - width: 100%
          - padding: 20px
          - border-bottom: 1px solid rgb(255,255,255,0.1)
          - text-transform: lowercase
          - font-weight: bold
        dayonerainicon:
          - position: absolute
          - top: 50px
          - right: 32px
          - padding: 0px
        dayonepic:
          - position: absolute
          - width: 120px
          - height: 120px
          - left: 37%
          - top: 118px
          - background-position: 0% 0%
          - transform: translate(0%, -50%)
          - color: rgb(255,255,255,0.6)
          - background-size: 28%
          - background-repeat: no-repeat
          - background-image: |
              [[[ return variables.forecast1pic ]]]
        dayonerainbar:
          - position: absolute
          - top: 68px
          - right: 15px
        daytwotitle:
          - top: 98px
          - text-transform: lowercase
          - font-weight: bold
          - left: 0px
          - width: 100%
          - border-bottom: 1px solid rgb(255,255,255,0.1)
          - padding: 20px
          - position: absolute
          - font-size: 16px
        daytworainicon:
          - top: 110px
          - right: 32px
          - padding: 0px
          - position: absolute
        daytwopic:
          - width: 120px
          - height: 120px
          - left: 37%
          - top: 177px
          - background-position: 0% 0%
          - transform: translate(0%, -50%)
          - color: grey
          - position: absolute
          - background-size: 28%
          - background-repeat: no-repeat
          - background-image: |
              [[[ return variables.forecast2pic ]]]
        daytworainbar:
          - top: 127px
          - right: 15px
          - position: absolute
        day3title:
          - top: 157px
          - text-transform: lowercase
          - font-weight: bold
          - left: 0px
          - width: 100%
          - padding: 20px
          - position: absolute
          - font-size: 16px
        day3rainicon:
          - top: 169px
          - right: 32px
          - padding: 0px
          - position: absolute
        day3pic:
          - width: 120px
          - height: 120px
          - left: 37%
          - top: 236px
          - background-position: 0% 0%
          - transform: translate(0%, -50%)
          - color: grey
          - position: absolute
          - background-size: 28%
          - background-repeat: no-repeat
          - background-image: |
              [[[ return variables.forecast3pic ]]]
        day3rainbar:
          - top: 186px
          - right: 15px
          - position: absolute
    custom_fields:
      dayonetitle: |
        [[[    
        return `<div align="left"> ${states['sensor.daytwo'].state}</div>`;
          ]]] 
      dayonepic: |
        [[[
              return (states['weather.pirateweather'].attributes.forecast[1]["temperature"]) +
              "° " +
              (states['weather.pirateweather'].attributes.forecast[1]["templow"]) + "°";
              ]]]
      dayonerainbar: |
        [[[                       
          if (states["weather.pirateweather"].state != "unavaliable") { 
            let input = states['weather.pirateweather'].attributes.forecast[1]['precipitation'],
              state = input * 10,
              color = '#79d5ff';
            return `
              <svg width="50" height="5">
                <rect x="0" y="0" rx="3" ry="3" width="106" height="5" stroke="#1f4455" fill="#1f4455" stroke-width="0"/>
                <rect x="0" y="0" rx="2" ry="2" width="${state}" height="5" fill="${color}" stroke-width="0"/>
                
            `;                     
          } 
        ]]]
      dayonerainicon: |
        [[[  return `<div> <ha-icon
                icon="ios:drop"
                style="width: 15px; height: 15px; color:rgb(255,255,255,0.6);"> </div>`;
          ]]] 
      daytwotitle: |
        [[[    
        return `<div align="left"> ${states['sensor.daythree'].state}</div>`;
          ]]] 
      daytwopic: |
        [[[
              return (states['weather.pirateweather'].attributes.forecast[2]["temperature"]) +
              "°  " +
              (states['weather.pirateweather'].attributes.forecast[2]["templow"]) + "°";
              ]]]
      daytworainbar: |
        [[[                       
          if (states["weather.pirateweather"].state != "unavaliable") { 
            let input = states['weather.pirateweather'].attributes.forecast[2]['precipitation'],
              state = input * 10,
              color = '#79d5ff';
            return `
              <svg width="50" height="5">
                <rect x="0" y="0" rx="3" ry="3" width="106" height="5" stroke="#1f4455" fill="#1f4455" stroke-width="0"/>
                <rect x="0" y="0" rx="2" ry="2" width="${state}" height="5" fill="${color}" stroke-width="0"/>
                
            `;                     
          } 
        ]]] 
      daytworainicon: |
        [[[  return `<div> <ha-icon
                icon="ios:drop"
                style="width: 15px; height: 15px; color:rgb(255,255,255,0.6);"> </div>`;
          ]]]
      day3title: |
        [[[    
        return `<div align="left"> ${states['sensor.dayfour'].state}</div>`;
          ]]] 
      day3pic: |
        [[[
              return (states['weather.pirateweather'].attributes.forecast[3]["temperature"]) +
              "°  " +
              (states['weather.pirateweather'].attributes.forecast[3]["templow"]) + "°";
              ]]]
      day3rainbar: |
        [[[                       
          if (states["weather.pirateweather"].state != "unavaliable") { 
            let input = states['weather.pirateweather'].attributes.forecast[3]['precipitation'],
              state = input * 10,
              color = '#79d5ff';
            return `
              <svg width="50" height="5">
                <rect x="0" y="0" rx="3" ry="3" width="106" height="5" stroke="#1f4455" fill="#1f4455" stroke-width="0"/>
                <rect x="0" y="0" rx="2" ry="2" width="${state}" height="5" fill="${color}" stroke-width="0"/>
                
            `;                     
          } 
        ]]]
      day3rainicon: |
        [[[  return `<div> <ha-icon
                icon="ios:drop"
                style="width: 15px; height: 15px; color:rgb(255,255,255,0.6);"></div>`;
          ]]]


  icon_entrance:
    styles:
      custom_fields:
        icon:
          - width: 80%
          - margin-left: -15%
    custom_fields:
      icon: >
        [[[
          let room = `d="M11.4,1.4h27.2v43.1H11.4V1.4z" fill="#bcbcbc"`,
            door = `d="M 38.6,1.4 H 11.4 V 44.5 H 38.6 Z M 12.898623,2.352289 h 23.771333 v 41.96722 H 12.898623 Z m 0,0 v 41.96722 H 36.669956 V 2.3502144 Z m 8.514901,4.9105942 h 6.741531 V 36.53351 h -6.741531 z"`;

          if (variables.state === 'on' && variables.timeout < 2000) {
            return `
              <style>
                .state {
                  animation: state 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
                }
                .opacity {
                  animation: opacity 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
                }
                @keyframes state {
                  0% {
                    transform: none;
                    fill: #9da0a2;
                  }
                  100% {
                    transform: skewY(10deg) translate(4.5%, -3.9%) scaleX(0.8);
                    fill: #2f2e2c;
                  }
                }
                @keyframes opacity {
                  0% {
                    opacity: 0;
                  }
                  100% {
                    opacity: 1;
                  }
                }
              </style>
              <svg viewBox="0 0 50 50">
                <path class="opacity" ${room}/>
                <path class="state" ${door}/>
              </svg>
            `;
          }

          if (variables.state === 'on' && variables.timeout > 2000) {
            return `
              <svg viewBox="0 0 50 50">
                <style>
                  .state_timeout_on {
                    transform: skewY(10deg) translate(4.5%, -3.9%) scaleX(0.8);
                    fill: #2f2e2c;
                  }
                </style>
                <path ${room}/>
                <path class="state_timeout_on" ${door}/>
              </svg>
            `;
          }

          return variables.state === 'off' && variables.timeout < 2000 ? `
            <style>
              .state {
                animation: state 0.4s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
              }
              .opacity {
                animation: opacity 0.4s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
              }
              .reverse {
                animation-direction: reverse;
              }
              @keyframes state {
                0% {
                  transform: none;
                  fill: #9da0a2;
                }
                100% {
                  transform: skewY(10deg) translate(4.5%, -3.9%) scaleX(0.8);
                  fill: #2f2e2c;
                }
              }
              @keyframes opacity {
                0% {
                  opacity: 0;
                }
                100% {
                  opacity: 1;
                }
              }
            </style>
            <svg viewBox="0 0 50 50">
              <path class="opacity reverse" ${room}/>
              <path class="state reverse" ${door}/>
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              <style>
                .state_timeout_off {
                  fill: var(--state-icon-color);
                }
              </style>
              <path class="state_timeout_off" ${door}/>
            </svg>
          `;
        ]]]


  icon_closet:
    styles:
      custom_fields:
        icon:
          - width: 80%
          - margin-left: -15%
    custom_fields:
      icon: >
        [[[
          let room = `d="M11.4,1.4h27.2v43.1H11.4V1.4z" fill="#bcbcbc"`,
            door = `d="M11.4 1.4v43.1h27.2V1.4H11.4zm23 23.4c0 1.1-.9 1.9-1.9 1.9h0c-1.1 0-1.9-.9-1.9-1.9V21c0-1.1.9-1.9 1.9-1.9h0c1.1 0 1.9.9 1.9 1.9v3.8z"`;

          if (variables.state === 'on' && variables.timeout < 2000) {
            return `
              <style>
                .state {
                  animation: state 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
                }
                .opacity {
                  animation: opacity 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
                }
                @keyframes state {
                  0% {
                    transform: none;
                    fill: #9da0a2;
                  }
                  100% {
                    transform: skewY(10deg) translate(4.5%, -3.9%) scaleX(0.8);
                    fill: #b68349;
                  }
                }
                @keyframes opacity {
                  0% {
                    opacity: 0;
                  }
                  100% {
                    opacity: 1;
                  }
                }
              </style>
              <svg viewBox="0 0 50 50">
                <path class="opacity" ${room}/>
                <path class="state" ${door}/>
              </svg>
            `;
          }

          if (variables.state === 'on' && variables.timeout > 2000) {
            return `
              <svg viewBox="0 0 50 50">
                <style>
                  .state_timeout_on {
                    transform: skewY(10deg) translate(4.5%, -3.9%) scaleX(0.8);
                    fill: #b68349;
                  }
                </style>
                <path ${room}/>
                <path class="state_timeout_on" ${door}/>
              </svg>
            `;
          }

          return variables.state === 'off' && variables.timeout < 2000 ? `
            <style>
              .state {
                animation: state 0.4s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
              }
              .opacity {
                animation: opacity 0.4s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
              }
              .reverse {
                animation-direction: reverse;
              }
              @keyframes state {
                0% {
                  transform: none;
                  fill: #9da0a2;
                }
                100% {
                  transform: skewY(10deg) translate(4.5%, -3.9%) scaleX(0.8);
                  fill: #b68349;
                }
              }
              @keyframes opacity {
                0% {
                  opacity: 0;
                }
                100% {
                  opacity: 1;
                }
              }
            </style>
            <svg viewBox="0 0 50 50">
              <path class="opacity reverse" ${room}/>
              <path class="state reverse" ${door}/>
            </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              <style>
                .state_timeout_off {
                  fill: var(--state-icon-color);
                }
              </style>
              <path class="state_timeout_off" ${door}/>
            </svg>
          `;
        ]]]


  icon_bolt:
    styles:
      custom_fields:
        icon:
          - width: 70%
          - margin-left: -10%
          - color: >
              [[[ return variables.state === 'on' ? '#000000' : '#9da0a2'; ]]]
    custom_fields:
      icon: >
        <ha-icon icon="custom:electric-bolt"></ha-icon>


  icon_tree:
    styles:
      custom_fields:
        icon:
          - width: 70%
          - margin-top: -5%
          - margin-left: -5%
          - color: >
              [[[ return variables.state === 'on' ? '#018c41' : '#9da0a2'; ]]]
    custom_fields:
      icon: >
        <ha-icon icon="custom:tree-flat"></ha-icon>


  icon_christmas_tree:
    styles:
      custom_fields:
        icon:
          - width: 77%
          - margin-left: -14%
          - margin-top: -1%
          - color: >
              [[[ return variables.state === 'on' ? '#50a873' : '#9da0a2'; ]]]
    custom_fields:
      icon: >
        <ha-icon icon="custom:christmas-tree"></ha-icon>


  icon_shield:
    styles:
      custom_fields:
        icon:
          - width: 75%
          - margin-top: -2%
          - margin-left: -5%
          - color: >
              [[[ return variables.state === 'on' ? '#8b3333' : '#9da0a2'; ]]]
    custom_fields:
      icon: >
        [[[ 
          return variables.state === 'off' ? '<ha-icon icon="mdi:shield-lock-open"></ha-icon>' : '<ha-icon icon="mdi:shield-lock"></ha-icon>'; 
        ]]]
        


  icon_away:
    #state_display: Auto
    styles:
      card:
        - transition: all 0.3s ease-out
      custom_fields:
        icon:
          - width: 79%
          - fill: >
              [[[ return variables.state === 'on' ? '#516d82' : '#9da0a2'; ]]]
    custom_fields:
      icon: >
        [[[
          let state = variables.state === 'on' ? 'on' : null;
          return `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes on {
                  10%,
                  20%,
                  100% {
                    transform: rotateZ(0deg);
                  }
                  30%,
                  50%,
                  70% {
                    transform: rotateZ(7deg);
                  }
                  90% {
                    transform: rotateZ(3deg);
                  }
                  40%,
                  60%,
                  80% {
                    transform: rotateZ(-7deg);
                  }
                }
                .on {
                  animation: on 1.35s cubic-bezier(0.5, 1, 0.89, 1);
                  animation-fill-mode: both;
                  transform-origin: 70% 80%;
                  animation-delay: 0s;
                }
              </style>
              <path class="${state}" d="M32.1 18.4s.3-1.6.7-2.1c.3-.6.9-1.4 1.6-1.8.6-.4 1.1-.7 1.4-.7s.7-.1 1 .1.6.4.8 1.3l.3 2.7.1 2.4.2 4.1c0 .3.2 3.1.2 3.3s.2 2.7.2 3.2l-.1 2.5c.1 1.6.5 3.1-.2 4.6-.6 1.4-1.7 2.7-2.9 3.6-.5.4-1.9 1.3-2.9 1.7-1.1.5-2.2.8-3.3 1.1-.5.1-1.4.4-2.3.3s-1.8-.6-2.1-1l-1.6-2.3c-.6-.8-2.1-2.3-2.3-2.5l-2.7-2.8c-.2-.2-2.7-3.5-2.9-3.8l-3.1-4.7-1.8-3.2-1.5-2.8-.9-1.8c-.1-.2-.3-1.1-.2-1.4.3-1.2 1.4-1.4 2.3-.7.3.2.9 1 1.1 1.3s6.1 8.1 6.1 8.1c.2.3.7.3.9 0s-.1-.7-.2-.9c-.4-.6-8.3-11.5-8.3-11.5s-.6-.9-.7-1.1c-.3-1.1 0-2.3 1.1-2.7s1.9.3 2.6 1.1c.3.3 8.3 11.5 8.3 11.5.2.2.3.3.5.3.3 0 .5-.4.4-.7-.1-.2-.5-.9-.5-.9L11.8 9c-.6-1-.9-2-.1-3 .7-.8 2.2-1.3 3-.2.3.3 10.1 14.3 10.1 14.3.2.2.5.4.7.3.5-.1.3-.7.1-1-.1-.2-8.4-11.8-8.4-11.8-.4-.9-.6-2 .2-2.8 1-1.1 2.5-.5 3.3.5.2.3 1 1.4 1 1.4l2.7 3.7c.1.2 3.4 4.4 3.8 4.8.9 1.1 1.8 2.2 2.7 3.2l.5.5c.1.1.1.4.1.8 0 1.3.1 2.6.1 3.9 0 .2.1.4.2.6.3.3.6.1.7-.2.1-.2 0-2.4 0-2.7-.3-.3-.5-1.3-.4-2.9zM12.2 46.9s-2.8-.8-4.8-2.7-2.6-2.7-2.8-3-1.8-3-2-3.6c-.2-.5-.2-.7.2-1 .4-.4 1-.5 1.3.1.1.2.4 1 .5 1.2s1 1.9 1.7 2.8 1.6 2.2 4.4 3.8c.6.3 1.2.6 1.9.9.3.1.6.2.8.4.1.2.1.6-.1.8-.2.4-.7.4-1.1.3zM7.1 30.7l.9 3.1c.3.7 1.1 2.3 1.9 3.3s2.4 2.6 3.4 3.2 2 1.1 3 1.5c1 .3 1.1.4 1.2.5.3.4.2 1.2-.4 1.3-.2 0-1.2 0-1.8-.3L12 41.7c-.5-.4-3.9-3.1-5.1-6S5.3 31 5.2 30.4s-.2-1.1 0-1.4c.3-.4.9-.8 1.3-.3.2.3.3.6.3.9.1 0 .2.8.3 1.1zm26.8-25s.2-.1.5-.1.8.3 1.4.7 1.9 1 3.6 2.9 2.9 3.9 3.4 5.8c.5 1.8.8 3.1.9 5.5 0 .5.1 1.6 0 1.7-.2.5-.5.7-1 .7-.6 0-.7-.5-.7-1l-.1-2.9c-.1-.6-.3-1.9-.7-2.9-.3-1-.7-2.3-1.7-3.6-.9-1.3-2.1-2.8-3.2-3.5l-2.4-1.5c-.6-.6-.7-1.2 0-1.8zm4.9-2.5s.3-.2.5-.1c.2 0 .7.3.9.4s2.1 1.3 3.6 3c1.5 1.6 3.5 5.1 3.7 7.4.1.4.2.9 0 1-.2.2-.4.4-.7.4-.2 0-.5 0-.7-.1-.1-.2-.4-1.1-.4-1.3s-.6-2-1.1-3.1C44 9.7 43.5 8.5 42 7.1s-2.2-1.9-2.8-2.2-1.1-.6-1.1-1c.1-.3.3-.6.7-.7z"/>
            </svg>
          `;
        ]]]

  icon_home:
    #state_display: Auto
    styles:
      card:
        - transition: all 0.3s ease-out
      custom_fields:
        icon:
          - width: 70%
          - fill: >
              [[[ return variables.state === 'on' ? '#c7983e' : '#9da0a2'; ]]]
    custom_fields:
      icon: >
        [[[
          let state = variables.state === 'on' ? 'on' : null;
          return `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes on {
                  from,
                  20%,
                  40%,
                  60%,
                  80%,
                  to {
                    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
                  }
                  0% {
                    transform: scale(0.3);
                  }
                  20% {
                    transform: scale(1.1);
                  }
                  40% {
                    transform: scale(0.9);
                  }
                  60% {
                    transform: scale(1.03);
                  }
                  80% {
                    transform: scale(0.97);
                  }
                  to {
                    transform: scale(1);
                  }
                }
                .on {
                  animation: on 1s;
                  transform-origin: center;
                }
              </style>
              <path class="${state}" d="M42.2 28.3c0-.8-.2-1-.2-1L26 12.1s-.5-.4-1-.4-1 .3-1 .3L8.2 27.1c-.4.5-.4.9-.4.9v18.3c0 1.1.9 2 1.9 2h8.2a1.47 1.47 0 0 0 1.5-1.5v-14a1.47 1.47 0 0 1 1.5-1.5h8.4a1.47 1.47 0 0 1 1.5 1.5v14a1.47 1.47 0 0 0 1.5 1.5h8.2c1.1 0 2-.9 2-1.9 0-.2-.3-18.1-.3-18.1zM7.3 25l-1.6 1.5s-.3.3-.5.3-.5 0-.8-.2c-.2-.2-2-2.8-2-2.8s-.1-.4-.1-.7c.1-.3.2-.7.3-.8.4-.1 21.5-20.1 21.5-20.1s.4-.3.9-.3c.4 0 .8.1.9.2s.5.4.5.4l8.9 8.5V6s.1-.4.2-.7c.1-.2.3-.3.4-.3s.3-.1.3-.1h3s.3.1.4.3a1.08 1.08 0 0 1 .3.7v9.8l7.2 6.9s.2.3.3.4c.1.2.1.7.1.7 0 .1-.1.4-.2.5s-1.6 2.5-1.6 2.5-.1.3-.3.3c-.2.1-.4.1-.7 0-.2-.1-.5-.4-.5-.4L26.4 9.4s-.3-.3-.5-.4-.4-.2-.8-.2-.5.1-.8.1c-.1.1-.4.3-.7.5C23.3 9.8 7.3 25 7.3 25z"/>
            </svg>
          `;
        ]]]

